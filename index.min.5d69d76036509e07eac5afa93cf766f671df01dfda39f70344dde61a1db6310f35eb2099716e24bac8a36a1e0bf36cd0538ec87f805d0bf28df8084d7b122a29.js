var suggestions=document.getElementById("suggestions"),search=document.getElementById("search");search!==null&&document.addEventListener("keydown",inputFocus);function inputFocus(e){e.ctrlKey&&e.key==="/"&&(e.preventDefault(),search.focus()),e.key==="Escape"&&(search.blur(),suggestions.classList.add("d-none"))}document.addEventListener("click",function(e){var t=suggestions.contains(e.target);t||suggestions.classList.add("d-none")}),document.addEventListener("keydown",suggestionFocus);function suggestionFocus(e){const s=suggestions.classList.contains("d-none");if(s)return;const t=[...suggestions.querySelectorAll("a")];if(t.length===0)return;const n=t.indexOf(document.activeElement);if(e.key==="ArrowUp"){e.preventDefault();const s=n>0?n-1:0;t[s].focus()}else if(e.key==="ArrowDown"){e.preventDefault();const s=n+1<t.length?n+1:n;t[s].focus()}}(function(){var e=new FlexSearch.Document({tokenize:"forward",cache:100,document:{id:"id",store:["href","title","description"],index:["title","description","content"]}});e.add({id:0,href:"/docs/overview/",title:"Overview",description:"Overview Doks.",content:""}),e.add({id:1,href:"/docs/overview/introduction/",title:"📖 Introduction",description:"WAHA - WhatsApp HTTP API that you can install on your own server and run in less than 5 minutes!",content:`WAHA - WhatsApp HTTP API that you can install on your own server and run in less than 5 minutes!
Get started #👉 Run WhatsApp HTTP API in less than 5 minutes! We will guide you through the necessary steps to successfully send your first text message using WhatsApp HTTP API in Quick Start →.
Disclaimer #This project is not affiliated, associated, authorized, endorsed by, or in any way officially connected with WhatsApp or any of its subsidiaries or its affiliates. The official WhatsApp website can be found at whatsapp.com.
\u0026ldquo;WhatsApp\u0026rdquo; as well as related names, marks, emblems and images are registered trademarks of their respective owners. Also it is not guaranteed you will not be blocked by using this method. WhatsApp does not allow bots or unofficial clients on their platform, so this shouldn\u0026rsquo;t be considered totally safe.
For any businesses looking to integrate with WhatsApp for critical applications, we highly recommend using officially supported methods, such as Twilio\u0026rsquo;s solution or other alternatives. You might also consider the official API -\u0026gt;.
Features #Here\u0026rsquo;s the available features:
Messages #Send messages Receive messages Message replies Send location Receive location React to messages Send media (images/documents/files) Send voice messages Receive media (images/audio/video/documents) Receive messages - webhook retries Groups #Create a group Get invite for group Modify group info (subject, description) Add group participants Kick group participants Promote/demote group participants Contacts #Mute/unmute chats Block/unblock contacts Get contact info Get profile pictures Get presence (online\\offline\\typing) status Sessions #Multi Device Get the screenshot Single WhatsApp account running inside one container Multiple WhatsApp account running inside one container Session saving (don\u0026rsquo;t have to scan QR on every restart) Session saving on remote storage (mongodb) Security #API authentication Swagger panel authentication Updates #Bug fixes and updates come as soon as they are implemented. Engines #Not all Engines support all Features, see the feature supported by engines -\u0026gt;.
Versions #WAHA is distributed in two versions:
Core - the basic version that meet almost 80% people\u0026rsquo;s needs. 100% free and open source -\u0026gt;. Plus - the version with advanced messages, security, and reliability features. Donations, no license expiration, quick updates, read more about Plus Version → `}),e.add({id:2,href:"/docs/overview/quick-start/",title:"⚡ Quick Start",description:"One page summary of how to start WhatsApp HTTP API.",content:`On this page you\u0026rsquo;re going to install WAHA, run it, authenticate the client using QR code and send the first text message to WhatsApp!
Requirements #Only thing that you must have - installed docker. Please follow the original instruction how to install docker -\u0026gt;.
When you are ready - come back and follows the below steps to send the first text message to WhatsApp via HTTP API!
Why Docker?Docker makes it easy to ship all-in-one solution with the runtime and dependencies. You don\u0026rsquo;t have to worry about language-specific libraries or chrome installation.
Also, Docker makes installation and update processes so simple, just one command!
Send your first message #We will guide you through the necessary steps to successfully send your first text message using WhatsApp HTTP API.
Are you a visual learner? We\u0026rsquo;ve got you covered! Watch the video below to see how to send your first message using WAHA.
1. Download image #Assuming you have installed Docker, let\u0026rsquo;s download the image.
For Core version the command is
docker pull devlikeapro/whatsapp-http-api For Plus version, we use login to get the image before:
docker login -u devlikeapro -p {KEY} docker pull devlikeapro/whatsapp-http-api-plus docker logout Read more about how to get PASSWORD for Plus Version →
1.1 Download image on ARM #If you\u0026rsquo;re using ARM (like Apple Silicon, Apple M1, etc.) - use following commands to download the image
For Core version the command is
# Download the image docker pull devlikeapro/whatsapp-http-api:arm # Rename it, so you can use devlikeapro/whatsapp-http-api image in other place docker tag devlikeapro/whatsapp-http-api:arm devlikeapro/whatsapp-http-api For Plus version the command is:
docker login -u devlikeapro -p {KEY} docker pull devlikeapro/whatsapp-http-api-plus:arm docker logout # Rename it, so you can use devlikeapro/whatsapp-http-api image in other place docker tag devlikeapro/whatsapp-http-api-plus:arm devlikeapro/whatsapp-http-api-plus 2. Run WhatsApp HTTP API #Run WhatsApp HTTP API:
docker run -it --rm -p 3000:3000/tcp --name whatsapp-http-api devlikeapro/whatsapp-http-api # It prints logs and the last line must be # WhatsApp HTTP API is running on: http://[::1]:3000 Open the link in your browser http://localhost:3000/ and you\u0026rsquo;ll see API documentation (Swagger).
👉 We don't recommend expose the API in the internet without authentication! Read more about Security -\u0026gt;
3. Start a new session #To start a new session you should have your mobile phone with installed WhatsApp application close to you.
Please go and read how what we\u0026rsquo;ll need to a bit later: How to log in - the instruction on WhatsApp site When your ready - find POST /api/session/start, click on Try it out, then Execute a bit below.
The example payload:
{ \u0026quot;name\u0026quot;: \u0026quot;default\u0026quot; } By using the request with name values you can start multiple session (WhatsApp accounts) inside the single docker container in Plus version and only one account in Core version.
Read more about multiple sessions →
4. Get and scan QR #Find GET /api/screenshot and execute it, it shows you QR code.
Scan the QR with your cell phone\u0026rsquo;s WhatsApp app.
5. Get the screenshot #Execute GET /api/screenshot after a few seconds after scanning the QR - it\u0026rsquo;ll show you the screenshot of you Whatsapp instance. If you can get the actual screenshot - then you\u0026rsquo;re ready to start sending messages!
6. Send a text message #Let\u0026rsquo;s send a text message - find POST /api/sendText in swagger and change chatId this way: use a phone international phone number without + symbol and add @c.us at the end.
For phone number 12132132131 the chatId is 12132132131@c.us.
The example payload:
{ \u0026quot;chatId\u0026quot;: \u0026quot;12132132130@c.us\u0026quot;, \u0026quot;text\u0026quot;: \u0026quot;Hi there!\u0026quot;, \u0026quot;session\u0026quot;: \u0026quot;default\u0026quot; } Also, you can use curl and send POST request like this:
# Phone without + export PHONE=12132132130 curl -d \u0026quot;{\\\u0026quot;chatId\\\u0026quot;: \\\u0026quot;\${PHONE}@c.us\\\u0026quot;, \\\u0026quot;text\\\u0026quot;: \\\u0026quot;Hello from WhatsApp HTTP API\\\u0026quot; }\u0026quot; -H \u0026quot;Content-Type: application/json\u0026quot; -X POST http://localhost:3000/api/sendText What is next? #Learn about the easiest way to manage your WhatsApp sessions - Dashboard -\u0026gt; Right now you\u0026rsquo;ve sent simple text message, but you can send more! Send messages -\u0026gt; Read how to receive and response to messages Receive messages -\u0026gt; Save session information, so you don\u0026rsquo;t have to scan QR after container restart -\u0026gt; Make sure your API is properly protected -\u0026gt; `}),e.add({id:3,href:"/docs/overview/how-to-avoid-blocking/",title:"⚠️ How to Avoid Blocking",description:"How to Avoid Blocking From Whatsapp",content:`How to Avoid Blocking in WhatsApp when developing bots.
It\u0026rsquo;s important to keep in mind that WhatsApp has strict policies in place to prevent spamming and abuse of their platform.
If you\u0026rsquo;re developing a bot for WhatsApp, it\u0026rsquo;s crucial to follow these guidelines to avoid getting blocked.
Guidelines to Follow #1. Only Reply to Messages #When developing a bot for WhatsApp, you should never initiate a conversation. Instead, your bot should only reply to messages that it receives. This will prevent your bot from being flagged as spam by WhatsApp\u0026rsquo;s users and algorithms.
You can use a short link http://wa.me/7911111111?text=Hi so a user can click on it and start the dialog with the bot first
2. Avoid Spamming and Sending Unnecessary Content #Sending too many messages or sending content that the user did not request can also lead to your bot being blocked. Make sure to only send relevant and useful information to the user. Additionally, do not send too many messages at once, as this can also trigger spam filters.
3. Other Considerations #There are other guidelines to follow when developing a bot for WhatsApp, such as avoiding the use of banned words and not sharing sensitive or inappropriate content. Make sure to read WhatsApp\u0026rsquo;s policies thoroughly to ensure that your bot complies with all of their rules.
How to Process Messages #When processing messages in your bot, it\u0026rsquo;s important to follow certain steps to avoid being flagged as spam. Here\u0026rsquo;s a recommended process to follow:
Send seen before processing the message. This can be done by sending a POST /api/sendSeen/ request to the WAHA API.
Start typing before sending a message and wait for a random interval depending on the size of the message. This can be done by sending a POST /api/startTyping/ request.
Stop typing before sending the message. This can be done by sending a POST /api/stopTyping/ request.
Send the text message using the POST /api/sendText request.
By following these steps, you can ensure that your bot processes messages in a way that\u0026rsquo;s compliant with WhatsApp\u0026rsquo;s guidelines and reduces the risk of being blocked.
How to not get Banned? #WhatsApp knows that it\u0026rsquo;s uncommon for someone to send so many messages or bulk messages to people they\u0026rsquo;ve never talked to each other before so it is considered spam/marketing junk pretty fast. There are some tips before sending a message to WhatsApp
Dos and Don\u0026rsquo;ts:
Important: Do NOT send messages which get you a report. As long as you don\u0026rsquo;t get reports from users who you sent a message, your account will be mostly fine. Having real content, a survey that the person agreed with is different from a marketing message on a Saturday night. Send messages written in different ways, you could make a script that places spacebars randomly on your string AND includes the person\u0026rsquo;s (first) name Never use fixed times, always go for sending the first message, wait a random time between 30 ~ and 60 seconds and then send the second message Always try to group contacts by their area code, WhatsApp expects a regular person to talk mostly with contacts that are within the same area of your phone number. Have a profile picture, this is not related to WhatsApp Bots Catcher® but sending a new message for someone not having a picture/name/status will elevate your chances of being manually tagged as spam. Send \u0026ldquo;seen\u0026rdquo; confirmation to messages or disable it on WhatsApp Avoid sending links that were previously marked as spam on WhatsApp or non-HTTPS. A URL shortener is a good idea IMPORTANT: It\u0026rsquo;s terrible if you send messages 24/7 without giving it some time to wait. Random delays between messages are not enough, send a reasonable amount of messages keeping in mind your conversion rate, For example: for one hour send a maximum of 4 messages per contact that have replied to your message, and stop sending messages for one hour, then start again. Again, don\u0026rsquo;t send messages without stopping for a while between every \u0026ldquo;package\u0026rdquo; Send only one short message when starting a conversation, one should not send long texts or multiple messages without the user consenting Have in mind:
For every one you send a message that doesn\u0026rsquo;t have your number on their contact list asked if it\u0026rsquo;s spam, being tagged as spam a few times (5 - 10) will get you banned WhatsApp records every movement you do, you can even check the logs when sending simple support email, it contains all kinds of information, this said: act as human as possible Try to engage in conversations, as long as you send a message and the person doesn\u0026rsquo;t automatically block you it\u0026rsquo;ll be quite okay. People constantly talking to you and adding you to their contact list will make your number stronger against a ban Think about that like a points system, you start with zero points (negative if your device was previously blacklisted), if you reach below zero you are out, if you engage in conversations you get a point, if you are tagged as spam you lose some points, if you are blocked you may lose more points Finally, If your content is spam, it doesn\u0026rsquo;t matter if you are using a broadcast list, group, or direct contact, you will still be banned As API, we say all that\u0026rsquo;s left to do right now is to agree with WhatsApp\u0026rsquo;s policy, not send spam messages, and always wait for the other person to contact you first.
You could make it by sending an SMS to the person with a link to start a chat on WhatsApp with you by link https://wa.me/12132132131?text=Hi.
`}),e.add({id:4,href:"/docs/overview/faq/",title:"❓ FAQ",description:"Answers to frequently asked questions.",content:`How much CPU and Memory does WhatsApp HTTP API consume? #WEBJS #The benchmark has been made on Intel(R) Core(TM) i7-10510U CPU @ 1.80GHz. It may differ from case to case, it depends on usage pattern - how many messages you get, how many send, etc.
Accounts (sessions) in the container CPU Memory 1 30% 400MB 10 270% 1.5GB The nature of WhatsApp HTTP API and its underlying engines - is to run real WhatsApp Web version in Chrome and communicate with it to prevent blocking from WhatsApp. It\u0026rsquo;s the reason why it\u0026rsquo;s so demanding on resources.
NOWEB #If you\u0026rsquo;re looking for less resource demanded engine - have a look at NOWEB engine -\u0026gt;
Quotes from the users:
The server has 2 CPU and 8GB of memory. Today we have 85 sessions in this instance.
400 sessions with 4CPU and 32RAM. It\u0026rsquo;s working fine.
`}),e.add({id:5,href:"/docs/overview/changelog/",title:"🔄 Changelog",description:"WAHA's changelog",content:`If you wish to get and read Release Notes - read them on one of our platforms, these posts are FREE.
Boosty -\u0026gt; Patreon -\u0026gt; Subscribe for FREE to get new updates there!
2024.5 #🎉 New #Swagger White Label - show your own brand in the Swagger documentation!
Read more about Swagger White Label Issue: #305 Build: 2024.5.4 🐛 Fixes #Don\u0026rsquo;t allow to start two sessions with the same name.
Before API allowed to start two sessions with the same name, which could lead to potential problems (no way to stop the first, abandoned session).
Issue: #315 Read more about start a session Build: 2024.5.3 Engine: ALL 🐛 Fixes - WEBJS #Fix send video issue POST /api/sendVideo in WEBJS.
Issue: #321 Issue: #328 Build: 2024.5.9 Engine: WEBJS 💡 If you\u0026rsquo;re experiencing \u0026ldquo;forever loading\u0026rdquo; issue - set up WAHA_WEBJS_WEB_VERSION=2.2412.54-videofix environment variable:
docker run -it -p 3000:3000/tcp -e WAHA_WEBJS_WEB_VERSION=2.2412.54-videofix devlikeapro/whatsapp-http-api-plus:chrome Use local cache for WEBJS engine (versions file).
Issue: #316 Build: 2024.5.4 Engine: WEBJS 🐛 Fixes - NOWEB #Set heap memory limit to 16GB for NOWEB engine.
Issue: #347 Build: 2024.5.11 Add body to messages with caption in NOWEB engine.
Build: 2024.5.10 Fix \u0026ldquo;document with caption\u0026rdquo; message media issue
Issue: #345 Build: 2024.5.10 Important NOWEB Engine Update! WhatsApp has deprecated the version currently being used in the NOWEB engine
Read on Patreon Read on Boosty Build: 2024.5.8 Engine: NOWEB 2024.4 #🎉 New #Add WAHA Dashboard - UI to manage your WhatsApp sessions!
Read more about Dashboard Open screenshot Add GET /api/sessions/{session} endpoint to get information about a specific session.
Read more about Get session information Issue: #300 Implement GET /api/contacts/profile-picture for NOWEB engine.
Read more about Get contact profile picture Issue: #298 2024.3 #🎉 New #Add message.reaction webhook in WEBJS and NOWEB engines
Read more about message.reaction event Issue: #275 👉 NOWEB engine note - reactions were sent in 'message' and 'message.any' events, not it\u0026rsquo;s available only in 'message.reaction'!
Add star and unstar message endpoint PUT /api/star
Read Star and unstar message documentation Issue: #273 Add PUT /api/{session}/chats/{chatId}/messages/{messageId} endpoint to edit the message.
Read more about Edit message Issue: #241 Add DELETE /api/{session}/chats/{chatId}/messages/{messageId} endpoint to delete the message.
Read more about Delete message Issue: #209 Add POST /api/sendContactVcard support for NOWEB engine.
Read more about Send Contact vCard Issue: #276 Handles caption and filename right in POST /api/sendFile
Issue: #94 Issue: #133 Add security settings for who can send messages PUT /api/{session}/groups/{groupId}/settings/security/messages-admin-only
Read Security - who can send messages Issue: #274 Add config.debug field to POST /api/session/start to enable debug and verbose logs for the session.
👉 Breaking changes #NOWEB - reactions were sent in 'message' and 'message.any' events, not it\u0026rsquo;s available only in 'message.reaction'! Add required body in PUT /api/{session}/groups/{groupId}/settings/security/info-admin-only endpoint. { \u0026quot;adminsOnly\u0026quot;: false } POST /api/sendContactVcard doesn\u0026rsquo;t work in VENOM anymore (use NOWEB engine). 2024.2 #Add support for MongoDB as storage for Session data Support persistent file storage for media files - now you can save media files between container restarts If you set WHATSAPP_FILES_LIFETIME=0 environment variable - media files will be never deleted. Add GET /api/health endpoint to check the health of the service 2024.1 #Implement Patron Portal where you can get your personal API key and manage your perks. Read more on Patreon -\u0026gt; Read more on Boosty -\u0026gt; 2024.2 #Listen for browser disconnected and page close events in WEBJS engine #262 2023.12 #December 2023
Add chatId field to GET /api/contacts/check-exists to help get the right chatId for Brazilian numbers. Read more about error sending text to half of Brazilian numbers (every number registered before 2012) -\u0026gt; 2023.11 #November 2023
Add different formats for QR code: binary image - GET /api/{session}/auth/qr base64 image - GET /api/{session}/auth/qr and set Accept: application/json header raw - GET /api/{session}/auth/qr?format=raw Add different formats for the screenshot: binary image - GET /api/{session}/screenshot base64 image - GET /api/{session}/screenshot and set Accept: application/json header Add WHATSAPP_SWAGGER_ENABLED=false so you can hide Swagger documentation (available only in Plus version). #185 Add dedicated media field in webhook payload - now you can know which media is attached to the message. { \u0026quot;event\u0026quot;: \u0026quot;message\u0026quot;, \u0026quot;session\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;payload\u0026quot;: { \u0026quot;hasMedia\u0026quot;: true, \u0026quot;media\u0026quot;: { \u0026quot;url\u0026quot;: \u0026quot;http://localhost:3000/api/files/true_11111111111@c.us_AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA.pdf\u0026quot;, \u0026quot;mimetype\u0026quot;: \u0026quot;application/pdf\u0026quot;, \u0026quot;filename\u0026quot;: \u0026quot;file.pdf\u0026quot; } } } Add WHATSAPP_DOWNLOAD_MEDIA environment variable to control media download. Available only in Plus version. WHATSAPP_DOWNLOAD_MEDIA=True - download media WHATSAPP_DOWNLOAD_MEDIA=False - do not download media at all. Add filename field for document (file attachments) - the original filename of the document. Add /api/sendVideo endpoint to NOWEB and WEBJS engines. Available only in Plus version. Add security settings for edit group info GET /api/{session}/groups/{groupId}/settings/security/info-admin-only - updates the group settings to only allow admins to edit group info (title, description, photo). 2023.10 #October 2023
Add session.status event for all engines! Now you can get the latest session\u0026rsquo;s status immediately after it changes. Add message.revoked event in WEBJS engine Add me field in webhook payload - now you can know which number is associated with the session Add enviroment field in webhook payload - now you can know which environment is used for the session 2023.9 #September 2023
Add GET /api/sessions/{session/me endpoint so you can get the phone number associated with the session Add polls support in NOWEB engine Add dedicated Get QR endpoint! Support pairing method (NOWEB) - you can connect with a code instead of QR. Add string field ackName: DEVICE|READ|... in message.ack payload Support message.ack event webhook in NOWEB engine 2023.8 #August 2023
Added stories (aka status) endpoints to NOWEB engine! POST /api/{session}/status/text|image|voice|video - choose one that suites your! Added chats endpoints Get all chats - GET /api/{session/chats Delete chat - DELETE /api/{session/chats/{chatId} Get messages from chat - GET /api/{session/chats/{chatId}/messages?limit=1000?downloadMedia=true Clear messages in the chat DELETE /api/{session/chats/{chatId}/messages Added downloadMedia flag to speed up GET /api/messages and GET /api/{session/chats/{chatId}/messages performance. Added set presence endpoint! With online presence you can show your status as online #121 With offline presence you can get notifications for your device #28 Added security settings for edit group info PUT /api/{session}/groups/{groupId}/settings/security/info-admin-only - updates the group settings to only allow admins to edit group info (title, description, photo). 2023.7 #July 2023
Now session can have their own Webhooks - you can define webhook configuration when you start a session with POST /api/session/start! Add HMAC authentication for webhooks Configure retries Add you custom headers Added proxy configuration with supporting proxy authentication. Thanks puntolino for the contribution! You can control proxy\u0026rsquo;s settings per session with POST /api/session/start or globally with environment variables. Added presence information - now you can get online status for a contact by calling endpoints or receiving a webhook event! Now you can mention contact in groups by settings mentions field in POST /api/sendText read more about it in Send Messages -\u0026gt; 2023.6 #June 2023
Improvements on session management, restarting sessions and more:
Added WHATSAPP_RESTART_ALL_SESSIONS=True: Set this variable to True to start all STOPPED sessions after container restarts. By default, this variable is set to False. Please note that this will start all STOPPED sessions, not just the sessions that were working before the restart. You can maintain the session list by using POST /api/session/stop with the logout: True parameter or by calling POST /api/session/logout to remove STOPPED sessions. You can see all sessions, including STOPPED sessions, in the GET /api/sessions/all=True response. WHATSAPP_START_SESSION now support more than one session! Separate session names by command, and it\u0026rsquo;ll start them ALWAYS after container restart WHATSAPP_START_SESSION=session1,session2 WHATSAPP_SWAGGER_CONFIG_ADVANCED=true enables advanced configuration options for Swagger documentation - you can customize host, port and base URL for the requests. Disabled by default. Added ?all=true parameter to GET /api/session?all=True endpoint - it\u0026rsquo;ll show you ALL session, included **STOPPED **, so you can know which one will be restarted if you set WHATSAPP_RESTART_ALL_SESSIONS=True environment variable. Added POST /api/sessions/logout that allow you to logout from session - remove saved credentials. Added logout boolean parameter to POST /api/sessions/stop request that allow you to stop the session AND logout at the same time. Added How to deploy page -\u0026gt; with docker-compose.yaml example Added engine field in webhook payload { \u0026quot;event\u0026quot;: \u0026quot;message\u0026quot;, \u0026quot;session\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;engine\u0026quot;: \u0026quot;WEBJS\u0026quot;, \u0026quot;payload\u0026quot;: {} } 2023.5 #May 2023
Added new NOWEB engine. NOWEB engine does not require a browser to work with WhatsApp Web, it does so directly using a WebSocket. Less CPU and RAM usage! Send Locations API works! Send Link Preview API works! ⚠ Read the article before using it How to avoid blocking -\u0026gt;. 2023.4 #March 2023
Add Groups API Use Chromium by default instead of Chrome 2023.1 #January 2023
Added Contacts API Get all contacts Get a contact Get contact \u0026ldquo;about\u0026rdquo; (status) Get contact profile picture Check number exists (is registered in WhatsApp) - works even if the number is not in the contact list Block and unblock contact 2022.12 #December 2023
Added GET /messages/ endpoint to get chat messages #31 Added WHATSAPP_SWAGGER_USERNAME and WHATSAPP_SWAGGER_PASSWORD to hide and protect swagger panel. 2022.11 #Please test changes in test environment before update production!!
Engine WAHA has changed its underlying engine from Venom to Whatsapp Web.JS. It might change the response and webhook\u0026rsquo;s payloads. Optimize CPU and memory consumption. Requests For all /api/session/ requests use name field instead of sessionName. For all \u0026ldquo;chatting\u0026rdquo; requests use session field instead of sessionName. Sessions Now you don\u0026rsquo;t have to scan QR code each time you run WAHA, WAHA saves it for you! Available only in Plus version.
Authentication Now you can authenticate all requests for WAHA - use WHATSAPP_API_KEY=secret environment variable to set \u0026ldquo;secret key\u0026rdquo;.
If WHATSAPP_API_KEY is set - requests must have X-Api-Key header with secret value, where secret - any random secret key.
Webhooks Instead of setting each webhook via environment variables - we use two environments variables:
WHATSAPP_HOOK_URL - to set a URL WHATSAPP_HOOK_EVENTS - to set events that are sent to the URL Previous Current WHATSAPP_HOOK_ONMESSAGE=https://httpbin.org/post WHATSAPP_HOOK_ONANYMESSAGE=https://httpbin.org/post WHATSAPP_HOOK_URL=https://httpbin.org/post WHATSAPP_HOOK_EVENTS=message,message.any ** Webhook payload**
The data for webhooks are wrapped inside a new WAWebhook object with event and payload fields to help you identify which handler you should call based on event.
{ \u0026quot;event\u0026quot;: \u0026quot;message.any\u0026quot;, \u0026quot;payload\u0026quot;: { } } `}),e.add({id:6,href:"/docs/how-to/",title:"How-to guides",description:"How-to guides",content:""}),e.add({id:7,href:"/docs/how-to/install/",title:"🔧 Install",description:"How to install and update WAHA",content:`On the page you\u0026rsquo;ll find answers on how to install WAHA.
If you wish to read a quick start guide which show you how to send you first message via HTTP API please go to Quick Start -\u0026gt;.
WAHA is distributed in two versions, that have a similar installation instructions.
WAHA Core - the basic version that meet almost 80% people\u0026rsquo;s needs. 100% free and open source -\u0026gt;. WAHA Plus - the version with advanced messages, security, and reliability features. Donations, no license expiration, quick updates, read more about Plus Version → Requirements #Only thing that you must have - installed docker. Please follow the original instruction how to install docker -\u0026gt;.
Why Docker?Docker makes it easy to ship all-in-one solution with the runtime and dependencies. You don\u0026rsquo;t have to worry about language-specific libraries or chrome installation.
Also, Docker makes installation and update processes so simple, just one command!
WAHA Core #Download the image:
docker pull devlikeapro/whatsapp-http-api Run the container:
docker run -it -p 3000:3000/tcp devlikeapro/whatsapp-http-api Open API documentation http://localhost:3000.
WAHA Plus #Before installing WAHA Plus version you need to get a key, {KEY} in below commands, in format dckr_pat_1111
We distribute the key via two platforms (Boosty and Patreon) and you\u0026rsquo;ll find the active key in the latest post. Keep in mind that we publish new key every month, so you must get the latest active key in order to download the latest image.
Read more about Plus Version →
👉 Subscribe as **PRO** level and get your personal key which won't expire every month while you're supporting the project Download the image:
docker login -u devlikeapro -p {KEY} docker pull devlikeapro/whatsapp-http-api-plus docker logout Run the container:
docker run -it -p 3000:3000/tcp devlikeapro/whatsapp-http-api-plus Open API documentation http://localhost:3000.
ARM #If you’re using ARM processor (like Apple Silicon, Apple M1, etc.) - add :arm tag at the end of the image name in the above commands.
WAHA Core - devlikeapro/whatsapp-http-api:arm WAHA Plus - devlikeapro/whatsapp-http-api-plus:arm You can also rename the image after you downloaded it with docker tag command, so you can use the same image names in commands:
# Rename WAHA Core ARM docker tag devlikeapro/whatsapp-http-api:arm devlikeapro/whatsapp-http-api # Rename WAHA Plus ARM docker tag devlikeapro/whatsapp-http-api-plus:arm devlikeapro/whatsapp-http-api-plus Update WAHA #💡 Please test all new versions in the development environment before updating production! The commands are the same as for downloading, expected you need to restart all working containers after you download new image.
WAHA Core - download new image
# Download the image docker pull devlikeapro/whatsapp-http-api # Restart all containers docker stop whatsapp-http-api docker rm whatsapp-http-api docker run -it --rm -p 3000:3000/tcp --name whatsapp-http-api devlikeapro/whatsapp-http-api WAHA Plus - download new image (please use the latest key from Boosty or Patreon)
# Download the image docker login -u devlikeapro -p {KEY} docker pull devlikeapro/whatsapp-http-api-plus docker logout docker stop whatsapp-http-api # Restart all containers docker stop whatsapp-http-api docker rm whatsapp-http-api docker run -it --rm -p 3000:3000/tcp --name whatsapp-http-api devlikeapro/whatsapp-http-api `}),e.add({id:8,href:"/docs/how-to/waha-dashboard/",title:"📊 Dashboard",description:"Dashboard",content:`Overview #Dashboard is a UI to manage your WhatsApp sessions!
Download the Dashboard Overview video . 👉 Dashboard is available in WAHA Plus version only.
You can access Dashboard by running the project and opening http://localhost:3000/dashboard (or similar, but with /dashboard at the end).
ℹ️ Default username and password: waha/waha
docker run -it -p 3000:3000/tcp devlikeapro/whatsapp-http-api-plus If you\u0026rsquo;re using API Key, remember to set up the key in the dashboard.
Configuration #When running WAHA you can set the following environment variables to configure the dashboard:
WAHA_DASHBOARD_ENABLED=true - enable or disable the dashboard, by default true. Set to false to disable the dashboard. WAHA_DASHBOARD_USERNAME=waha - username used to log in, by default waha. WAHA_DASHBOARD_PASSWORD=waha - password used to log in, by default waha. docker run -it -p 3000:3000/tcp -e WAHA_DASHBOARD_USERNAME=waha -e WAHA_DASHBOARD_PASSWORD=waha devlikeapro/whatsapp-http-api-plus Multiple servers #If you wish to connect, control and manage multiple servers in a single \u0026ldquo;dashboard\u0026rdquo;, consider using WAHA Hub - central management server to help you build reliable infrastructure!
Bug reports and feature requests #If you\u0026rsquo;re experiencing any issues or have a feature request, please create an issue in the WAHA GitHub
`}),e.add({id:9,href:"/docs/how-to/swagger/",title:"📚 Swagger (OpenAPI)",description:"Swagger (OpenAPI)",content:`Overview #The project provides HTTP API (REST), which is documented with OpenAPI specification and Swagger UI.
Download the Swagger Overview video . You can see all available endpoints, request/response examples, and even execute them directly from the Swagger UI.
Later version:
OpenAPI specification -\u0026gt; Swagger documentation -\u0026gt; You can find Swagger documentation on the following url after you install and started it:
Swagger: http://localhost:3000. OpenAPI: http://localhost:3000/-json. Configuration #WHATSAPP_SWAGGER_CONFIG_ADVANCED=true - enables advanced configuration options for Swagger documentation - you can customize host, port and base URL for the requests. Disabled by default. WHATSAPP_SWAGGER_ENABLED=false - disables Swagger documentation. Enabled by default. Available in WAHA Plus only. WHATSAPP_SWAGGER_USERNAME=admin and WHATSAPP_SWAGGER_PASSWORD=admin - these variables can be used to protect the Swagger panel with admin / admin credentials. This does not affect API access. Available in WAHA Plus only. Read more about security settings for Swagger and API on Security page -\u0026gt;.
White label #You can show your own brand in the Swagger documentation.
👉 Swagger White Label is available in WAHA Plus version only.
Use the following environment variables to customize the Swagger documentation:
WHATSAPP_SWAGGER_TITLE - the title of the Swagger documentation and some other places. WHATSAPP_SWAGGER_DESCRIPTION - Markdown formatted description of your API. WHATSAPP_SWAGGER_EXTERNAL_DOC_URL - URL to the external documentation. Example (consider using docker-compose or other methods to store these settings):
docker run -it -p 3000:3000 -e WHATSAPP_SWAGGER_TITLE=\u0026quot;AwesomeCRM\u0026quot; -e 'WHATSAPP_SWAGGER_DESCRIPTION=\u0026lt;p\u0026gt;FantasticFindz - Discover unique treasures from around the world at unbelievable prices!\u0026lt;br/\u0026gt; \u0026lt;a href='https://google.com'\u0026gt;Read more about us!\u0026lt;/a\u0026gt;\u0026lt;/p\u0026gt;' -e \u0026quot;WHATSAPP_SWAGGER_EXTERNAL_DOC_URL=https://google.com\u0026quot; devlikeapro/whatsapp-http-api-plus `}),e.add({id:10,href:"/docs/how-to/send-messages/",title:"📤 Send messages",description:"Send messages",content:`We consider that you\u0026rsquo;ve run docker container and authenticated the session with QR code.
If you haven\u0026rsquo;t yet - please follow the steps from Quick Start →.
Fields #There are common fields that you can find in almost all requests:
{ \u0026quot;session\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;chatId\u0026quot;: \u0026quot;12132132130@c.us\u0026quot;, \u0026quot;file\u0026quot;: \u0026quot;...\u0026quot; } session #session - a session name from which account you\u0026rsquo;re sending the message. We use default in the examples.
Core version supports only default session. Plus allows you to run multiple sessions inside one container to save your memory and CPU resources! Read more about multiple sessions →
chatId #chatId - it\u0026rsquo;s a phone number or Group identifier where you\u0026rsquo;re sending the message.
Phone numbers accounts use international phone number without + at the start and add @c.us at the end. For phone number 12132132131 the chatId is 12132132131@c.us. Groups use random number with @g.us at the end. To get the actual chatId for Brazilian phone number - use chatId field from Check phone number exists -\u0026gt; response.
file #When sending media (images, voice, files) you can either use:
file.data field with base64 encoded file file.url field with public available URL for that file Endpoints #See the list of engines that support the feature -\u0026gt;.
Send text #To send text message - use POST /api/sendText with example payload.
{ \u0026quot;session\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;chatId\u0026quot;: \u0026quot;12132132130@c.us\u0026quot;, \u0026quot;text\u0026quot;: \u0026quot;Hi there!\u0026quot; } Mention contact #If you send a message in a group and want to mention a participant in the message - use mentions field for that in POST /api/sendText request.
Please note that you MUST mention a number in the text as well in the format @2132132130 and also mention it in mentions in format 2132132130@c.us
{ \u0026quot;session\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;chatId\u0026quot;: \u0026quot;12132132130@c.us\u0026quot;, \u0026quot;text\u0026quot;: \u0026quot;Hi there! @2132132130\u0026quot;, \u0026quot;mentions\u0026quot;: [ \u0026quot;2132132130@c.us\u0026quot; ] } Reply on message #To reply on a message - use POST /api/reply with example payload.
{ \u0026quot;session\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;chatId\u0026quot;: \u0026quot;11111111111@c.us\u0026quot;, \u0026quot;reply_to\u0026quot;: \u0026quot;false_11111111111@c.us_AAAAAAAAAAAAAAAAAAAA\u0026quot;, \u0026quot;text\u0026quot;: \u0026quot;Reply text\u0026quot; } Reply files #WAHA does not support reply with files (images, voice, etc.). If you\u0026rsquo;re interested in it - please create an issue in GitHub.
Edit message #You can edit text messages or \u0026ldquo;caption\u0026rdquo; in media messages.
PUT /api/{session}/chats/{chatId}/messages/{messageId} 👉 Remember to escape @ in chatId and messageId with %40.
So if you want to edit true_123@c.us_AAA message in 123@c.us chat you need to send request to:
PUT /api/{session}/chats/123%40c.us/messages/true_123%40c.us_AAA Payload:
{ \u0026quot;text\u0026quot;: \u0026quot;Hello, world!\u0026quot; } Delete message #You can delete messages from the chat.
DELETE /api/{session}/chats/{chatId}/messages/{messageId} 👉 Remember to escape @ in chatId and messageId with %40.
So if you want to delete true_123@c.us_AAA message in 123@c.us chat you need to send request to:
DELETE /api/{session}/chats/123%40c.us/messages/true_123%40c.us_AAA Send poll #We have a dedicated page how to send polls and receive votes!
Add a reaction #Use PUT /api/reaction method to set reaction to a message.
👉 Reaction API uses PUT, not POST request! Please make sure you send right request. { \u0026quot;messageId\u0026quot;: \u0026quot;false_11111111111@c.us_AAAAAAAAAAAAAAAAAAAA\u0026quot;, \u0026quot;reaction\u0026quot;: \u0026quot;👍\u0026quot;, \u0026quot;session\u0026quot;: \u0026quot;default\u0026quot; } To remove reaction from a message - send empty string in the reaction request.
{ \u0026quot;messageId\u0026quot;: \u0026quot;false_11111111111@c.us_AAAAAAAAAAAAAAAAAAAA\u0026quot;, \u0026quot;reaction\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;session\u0026quot;: \u0026quot;default\u0026quot; } Star and unstar message #Use PUT /api/star method to star or unstar a message.
👉 Star API uses PUT, not POST request! Please make sure you send right request. Star:
{ \u0026quot;messageId\u0026quot;: \u0026quot;false_71111111111@c.us_AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u0026quot;, \u0026quot;chatId\u0026quot;: \u0026quot;71111111111@c.us\u0026quot;, \u0026quot;star\u0026quot;: true, \u0026quot;session\u0026quot;: \u0026quot;default\u0026quot; } Unstar:
{ \u0026quot;messageId\u0026quot;: \u0026quot;false_71111111111@c.us_AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u0026quot;, \u0026quot;chatId\u0026quot;: \u0026quot;71111111111@c.us\u0026quot;, \u0026quot;star\u0026quot;: false, \u0026quot;session\u0026quot;: \u0026quot;default\u0026quot; } Send contact (vcard) #Use POST /api/sendContactVcard to send contact (vcard).
You can use fields this way:
{ \u0026quot;session\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;chatId\u0026quot;: \u0026quot;79111111@c.us\u0026quot;, \u0026quot;contacts\u0026quot;: [ { \u0026quot;fullName\u0026quot;: \u0026quot;John Doe\u0026quot;, \u0026quot;organization\u0026quot;: \u0026quot;Company Name\u0026quot;, \u0026quot;phoneNumber\u0026quot;: \u0026quot;+91 11111 11111\u0026quot;, \u0026quot;whatsappId\u0026quot;: \u0026quot;911111111111\u0026quot; } ] } Or provide a vCard file content:
{ \u0026quot;session\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;chatId\u0026quot;: \u0026quot;79111111@c.us\u0026quot;, \u0026quot;contacts\u0026quot;: [ { \u0026quot;vcard\u0026quot;: \u0026quot;BEGIN:VCARD\\nVERSION:3.0\\nFN:Jane Doe\\nORG:Company Name;\\nTEL;type=CELL;type=VOICE;waid=911111111111:+91 11111 11111\\nEND:VCARD\u0026quot; } ] } Or even combine it:
{ \u0026quot;chatId\u0026quot;: \u0026quot;79111111@c.us\u0026quot;, \u0026quot;contacts\u0026quot;: [ { \u0026quot;vcard\u0026quot;: \u0026quot;BEGIN:VCARD\\nVERSION:3.0\\nFN:Jane Doe\\nORG:Company Name;\\nTEL;type=CELL;type=VOICE;waid=911111111111:+91 11111 11111\\nEND:VCARD\u0026quot; }, { \u0026quot;fullName\u0026quot;: \u0026quot;John Doe\u0026quot;, \u0026quot;organization\u0026quot;: \u0026quot;Company Name\u0026quot;, \u0026quot;phoneNumber\u0026quot;: \u0026quot;+91 11111 11111\u0026quot;, \u0026quot;whatsappId\u0026quot;: \u0026quot;911111111111\u0026quot; } ], \u0026quot;session\u0026quot;: \u0026quot;default\u0026quot; } Send image #Use POST /api/sendImage to send images.
You can send images in two ways:
Provide a URL for the image. Encode the whole file content into base64 and send it in the request body. URL #{ \u0026quot;session\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;chatId\u0026quot;: \u0026quot;11111111111@c.us\u0026quot;, \u0026quot;file\u0026quot;: { \u0026quot;mimetype\u0026quot;: \u0026quot;image/jpeg\u0026quot;, \u0026quot;url\u0026quot;: \u0026quot;https://github.com/devlikeapro/whatsapp-http-api/raw/core/examples/dev.likeapro.jpg\u0026quot;, \u0026quot;filename\u0026quot;: \u0026quot;filename.jpeg\u0026quot; }, \u0026quot;caption\u0026quot;: \u0026quot;string\u0026quot; } Base64 #{ \u0026quot;session\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;chatId\u0026quot;: \u0026quot;11111111111@c.us\u0026quot;, \u0026quot;file\u0026quot;: { \u0026quot;mimetype\u0026quot;: \u0026quot;image/jpeg\u0026quot;, \u0026quot;filename\u0026quot;: \u0026quot;filename.jpeg\u0026quot;, \u0026quot;data\u0026quot;: \u0026quot;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\u0026quot; }, \u0026quot;caption\u0026quot;: \u0026quot;string\u0026quot; } Send voice #Use POST /api/sendVoice to send voice messages.
You can send voice messages in two ways:
Provide a URL for the voice. Encode the whole file content into base64 and send it in the request body. Please make sure your file has OPUS encoding and packed in OGG container.
URL #{ \u0026quot;session\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;chatId\u0026quot;: \u0026quot;11111111111@c.us\u0026quot;, \u0026quot;file\u0026quot;: { \u0026quot;mimetype\u0026quot;: \u0026quot;audio/ogg; codecs=opus\u0026quot;, \u0026quot;url\u0026quot;: \u0026quot;https://github.com/devlikeapro/whatsapp-http-api/raw/core/examples/dev.likeapro.opus\u0026quot; }, \u0026quot;caption\u0026quot;: \u0026quot;string\u0026quot; } Base64 #{ \u0026quot;chatId\u0026quot;: \u0026quot;11111111111@c.us\u0026quot;, \u0026quot;file\u0026quot;: { \u0026quot;mimetype\u0026quot;: \u0026quot;audio/ogg; codecs=opus\u0026quot;, \u0026quot;filename\u0026quot;: \u0026quot;voice-message.mp3\u0026quot;, \u0026quot;data\u0026quot;: \u0026quot;\u0026quot; }, \u0026quot;session\u0026quot;: \u0026quot;default\u0026quot; } Send video #Use POST /api/sendVideo to send a message with a video attached.
⚠️ WEBJS (default) engine notes for sending videos ⚠️
👉 Use devlikeapro/whatsapp-http-api-plus:chrome docker image. Read more about Docker images and engines →. 💡 If you\u0026rsquo;re experiencing \u0026ldquo;forever loading\u0026rdquo; issue ( #321, #328 ) - set up WAHA_WEBJS_WEB_VERSION=2.2412.54-videofix environment variable: docker run -it -p 3000:3000/tcp -e WAHA_WEBJS_WEB_VERSION=2.2412.54-videofix devlikeapro/whatsapp-http-api-plus:chrome You can send voice messages in two ways:
Provide a URL for the file and the API will download it and send it in the request body. Provide the file as a base64 string in the request body. URL #{ \u0026quot;session\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;chatId\u0026quot;: \u0026quot;11111111111@c.us\u0026quot;, \u0026quot;caption\u0026quot;: \u0026quot;Watch this video!\u0026quot;, \u0026quot;file\u0026quot;: { \u0026quot;mimetype\u0026quot;: \u0026quot;video/mp4\u0026quot;, \u0026quot;filename\u0026quot;: \u0026quot;video.mp4\u0026quot;, \u0026quot;url\u0026quot;: \u0026quot;https://github.com/devlikeapro/whatsapp-http-api/raw/core/examples/video.mp4\u0026quot; } } Base64 #{ \u0026quot;chatId\u0026quot;: \u0026quot;11111111111@c.us\u0026quot;, \u0026quot;caption\u0026quot;: \u0026quot;Watch this video!\u0026quot;, \u0026quot;file\u0026quot;: { \u0026quot;mimetype\u0026quot;: \u0026quot;video/mp4\u0026quot;, \u0026quot;filename\u0026quot;: \u0026quot;video.mp4\u0026quot;, \u0026quot;data\u0026quot;: \u0026quot;\u0026quot; }, \u0026quot;session\u0026quot;: \u0026quot;default\u0026quot; } Send file #Use POST /api/sendFile to send a file as a document.
You can send files in two ways:
Provide a URL for the file. Encode the whole file content into base64 and send it in the request body. URL #{ \u0026quot;session\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;caption\u0026quot;: \u0026quot;Check this out!\u0026quot;, \u0026quot;chatId\u0026quot;: \u0026quot;11111111111@c.us\u0026quot;, \u0026quot;file\u0026quot;: { \u0026quot;mimetype\u0026quot;: \u0026quot;image/jpeg\u0026quot;, \u0026quot;filename\u0026quot;: \u0026quot;filename.jpeg\u0026quot;, \u0026quot;url\u0026quot;: \u0026quot;https://raw.githubusercontent.com/devlikeapro/whatsapp-http-api/core/examples/video.mp4\u0026quot; } } Base64 #{ \u0026quot;session\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;chatId\u0026quot;: \u0026quot;11111111111@c.us\u0026quot;, \u0026quot;file\u0026quot;: { \u0026quot;mimetype\u0026quot;: \u0026quot;image/jpeg\u0026quot;, \u0026quot;filename\u0026quot;: \u0026quot;filename.jpeg\u0026quot;, \u0026quot;data\u0026quot;: \u0026quot;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\u0026quot; }, \u0026quot;caption\u0026quot;: \u0026quot;string\u0026quot; } Send status (aka stories) #You can send statuses (aka stories)!
It is always necessary to inform the list of contacts that will have access to the posted status!
👉 You must include your own id in the contacts list, so it\u0026rsquo;ll be shown on the phone as well. You can get your id by using GET /api/sessions/{session}/me
Send text status #POST /api/{session}/status/text
{ \u0026quot;contacts\u0026quot;: [ \u0026quot;55xxxxxxxxxxx@c.us\u0026quot; ], \u0026quot;text\u0026quot;: \u0026quot;Have a look! https://waha.devlike.pro/\u0026quot;, \u0026quot;backgroundColor\u0026quot;: \u0026quot;#38b42f\u0026quot;, \u0026quot;font\u0026quot;: 1 } Send image status #POST /api/{session}/status/image
{ \u0026quot;contacts\u0026quot;: [ \u0026quot;55xxxxxxxxxxx@c.us\u0026quot; ], \u0026quot;file\u0026quot;: { \u0026quot;mimetype\u0026quot;: \u0026quot;image/jpeg\u0026quot;, \u0026quot;filename\u0026quot;: \u0026quot;filename.jpeg\u0026quot;, \u0026quot;data\u0026quot;: \u0026quot;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\u0026quot; }, \u0026quot;caption\u0026quot;: \u0026quot;string\u0026quot; } Send voice status #POST /api/{session}/status/voice
{ \u0026quot;contacts\u0026quot;: [ \u0026quot;55xxxxxxxxxxx@c.us\u0026quot; ], \u0026quot;file\u0026quot;: { \u0026quot;mimetype\u0026quot;: \u0026quot;audio/mp4\u0026quot;, \u0026quot;filename\u0026quot;: \u0026quot;voice-message.mp3\u0026quot;, \u0026quot;data\u0026quot;: \u0026quot;\u0026quot; }, \u0026quot;backgroundColor\u0026quot;: \u0026quot;#38b42f\u0026quot; } Send video status #POST /api/{session}/status/video
{ \u0026quot;contacts\u0026quot;: [ \u0026quot;55xxxxxxxxxxx@c.us\u0026quot; ], \u0026quot;file\u0026quot;: { \u0026quot;mimetype\u0026quot;: \u0026quot;audio/mp4\u0026quot;, \u0026quot;filename\u0026quot;: \u0026quot;video-message.mp3\u0026quot;, \u0026quot;data\u0026quot;: \u0026quot;\u0026quot; }, \u0026quot;backgroundColor\u0026quot;: \u0026quot;#38b42f\u0026quot; } `}),e.add({id:11,href:"/docs/how-to/receive-messages/",title:"📥 Receive messages",description:"Receive messages",content:`We consider that you\u0026rsquo;ve run docker container and authenticated the session with QR code.
If you haven\u0026rsquo;t yet - please follow the steps from Quick Start →.
You must use Webhooks to receive messages from WhatsApp to your application.
Start a new session with configured message event in webhooks - call POST /api/sessions/start with the payload:
{ \u0026quot;name\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;config\u0026quot;: { \u0026quot;webhooks\u0026quot;: [ { \u0026quot;url\u0026quot;: \u0026quot;https://httpbin.org/post\u0026quot;, \u0026quot;events\u0026quot;: [ \u0026quot;message\u0026quot; ] } ] } } After that WAHA\u0026rsquo;ll send events (see below) about new messages to an endpoint you provided.
Webhooks #See the list of engines that support the feature -\u0026gt;.
Here\u0026rsquo;s examples of message-related events. Read Webhooks -\u0026gt; to find how to set them up.
message #Incoming message (text/audio/files)
{ \u0026quot;event\u0026quot;: \u0026quot;message\u0026quot;, \u0026quot;session\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;payload\u0026quot;: { \u0026quot;id\u0026quot;: \u0026quot;true_11111111111@c.us_AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u0026quot;, \u0026quot;timestamp\u0026quot;: 1667561485, \u0026quot;from\u0026quot;: \u0026quot;11111111111@c.us\u0026quot;, \u0026quot;fromMe\u0026quot;: true, \u0026quot;to\u0026quot;: \u0026quot;11111111111@c.us\u0026quot;, \u0026quot;body\u0026quot;: \u0026quot;Hi there!\u0026quot;, \u0026quot;hasMedia\u0026quot;: false, \u0026quot;ack\u0026quot;: 1, \u0026quot;vCards\u0026quot;: [], \u0026quot;_data\u0026quot;: { \u0026quot;id\u0026quot;: { \u0026quot;fromMe\u0026quot;: true, \u0026quot;remote\u0026quot;: \u0026quot;11111111111@c.us\u0026quot;, \u0026quot;id\u0026quot;: \u0026quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u0026quot;, \u0026quot;_serialized\u0026quot;: \u0026quot;true_11111111111@c.us_AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u0026quot; }, \u0026quot;body\u0026quot;: \u0026quot;Hi there!\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;chat\u0026quot;, \u0026quot;t\u0026quot;: 1667561485, \u0026quot;notifyName\u0026quot;: \u0026quot;MyName\u0026quot;, \u0026quot;from\u0026quot;: \u0026quot;11111111111@c.us\u0026quot;, \u0026quot;to\u0026quot;: \u0026quot;11111111111@c.us\u0026quot;, \u0026quot;self\u0026quot;: \u0026quot;in\u0026quot;, \u0026quot;ack\u0026quot;: 1, \u0026quot;isNewMsg\u0026quot;: true, \u0026quot;star\u0026quot;: false, \u0026quot;kicNotified\u0026quot;: false, \u0026quot;recvFresh\u0026quot;: true, \u0026quot;isFromTemplate\u0026quot;: false, \u0026quot;pollInvalidated\u0026quot;: false, \u0026quot;latestEditMsgKey\u0026quot;: null, \u0026quot;latestEditSenderTimestampMs\u0026quot;: null, \u0026quot;broadcast\u0026quot;: false, \u0026quot;mentionedJidList\u0026quot;: [], \u0026quot;isVcardOverMmsDocument\u0026quot;: false, \u0026quot;isForwarded\u0026quot;: false, \u0026quot;hasReaction\u0026quot;: false, \u0026quot;ephemeralOutOfSync\u0026quot;: false, \u0026quot;productHeaderImageRejected\u0026quot;: false, \u0026quot;lastPlaybackProgress\u0026quot;: 0, \u0026quot;isDynamicReplyButtonsMsg\u0026quot;: false, \u0026quot;isMdHistoryMsg\u0026quot;: false, \u0026quot;stickerSentTs\u0026quot;: 0, \u0026quot;isAvatar\u0026quot;: false, \u0026quot;requiresDirectConnection\u0026quot;: false, \u0026quot;pttForwardedFeaturesEnabled\u0026quot;: true, \u0026quot;isEphemeral\u0026quot;: false, \u0026quot;isStatusV3\u0026quot;: false, \u0026quot;links\u0026quot;: [] } } } message.any #Fired on all message creations, including your own. The payload is the same as for message event.
{ \u0026quot;event\u0026quot;: \u0026quot;message.any\u0026quot;, \u0026quot;session\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;payload\u0026quot;: {} } message.reaction #Receive events when a message is reacted to by a user (or yourself reacting to a message).
payload.reaction.text - emoji that was used to react to the message. It\u0026rsquo;ll be an empty string if the reaction was removed. payload.reaction.messageId - id of the message that was reacted to. { \u0026quot;event\u0026quot;: \u0026quot;message.reaction\u0026quot;, \u0026quot;session\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;me\u0026quot;: { \u0026quot;id\u0026quot;: \u0026quot;79222222222@c.us\u0026quot;, \u0026quot;pushName\u0026quot;: \u0026quot;WAHA\u0026quot; }, \u0026quot;payload\u0026quot;: { \u0026quot;id\u0026quot;: \u0026quot;false_79111111@c.us_11111111111111111111111111111111\u0026quot;, \u0026quot;from\u0026quot;: \u0026quot;79111111@c.us\u0026quot;, \u0026quot;fromMe\u0026quot;: false, \u0026quot;participant\u0026quot;: \u0026quot;79111111@c.us\u0026quot;, \u0026quot;to\u0026quot;: \u0026quot;79111111@c.us\u0026quot;, \u0026quot;timestamp\u0026quot;: 1710481111.853, \u0026quot;reaction\u0026quot;: { \u0026quot;text\u0026quot;: \u0026quot;🙏\u0026quot;, \u0026quot;messageId\u0026quot;: \u0026quot;true_79111111@c.us_11111111111111111111111111111111\u0026quot; } }, \u0026quot;engine\u0026quot;: \u0026quot;WEBJS\u0026quot;, \u0026quot;environment\u0026quot;: { \u0026quot;version\u0026quot;: \u0026quot;2024.3.3\u0026quot;, \u0026quot;engine\u0026quot;: \u0026quot;WEBJS\u0026quot;, \u0026quot;tier\u0026quot;: \u0026quot;PLUS\u0026quot;, \u0026quot;browser\u0026quot;: \u0026quot;/usr/bin/google-chrome-stable\u0026quot; } } 👉 NOWEB engine note - reactions were sent in 'message' and 'message.any' events, not it's available only in 'message.reaction'! message.ack #Receive events when server or recipient gets the message, read or played it.
See details on Webhooks page -\u0026gt;.
{ \u0026quot;event\u0026quot;: \u0026quot;message.ack\u0026quot;, \u0026quot;session\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;payload\u0026quot;: {} } message.revoked #See details on Webhooks page -\u0026gt;.
{ \u0026quot;event\u0026quot;: \u0026quot;message.ack\u0026quot;, \u0026quot;session\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;payload\u0026quot;: { \u0026quot;before\u0026quot;: { \u0026quot;id\u0026quot;: \u0026quot;some-id-here\u0026quot;, \u0026quot;timestamp\u0026quot;: \u0026quot;some-timestamp-here\u0026quot;, \u0026quot;body\u0026quot;: \u0026quot;Hi there!\u0026quot; }, \u0026quot;after\u0026quot;: { \u0026quot;id\u0026quot;: \u0026quot;some-id-here\u0026quot;, \u0026quot;timestamp\u0026quot;: \u0026quot;some-timestamp-here\u0026quot;, \u0026quot;body\u0026quot;: \u0026quot;\u0026quot; } } } Files #When people send you media - images, voice messages, and documents - WAHA saves it in the file storage. In your application you must download it and use it as you want to. You can find the URL in media.url field.
For example, you can get the webhook like this with media value (we\u0026rsquo;ve skipped other fields):
{ \u0026quot;event\u0026quot;: \u0026quot;message\u0026quot;, \u0026quot;session\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;payload\u0026quot;: { \u0026quot;id\u0026quot;: \u0026quot;true_11111111111@c.us_AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u0026quot;, \u0026quot;timestamp\u0026quot;: 1667561485, \u0026quot;body\u0026quot;: \u0026quot;Check this out (caption for the media)!\u0026quot;, \u0026quot;from\u0026quot;: \u0026quot;11111111111@c.us\u0026quot;, \u0026quot;hasMedia\u0026quot;: true, \u0026quot;media\u0026quot;: { \u0026quot;url\u0026quot;: \u0026quot;http://localhost:3000/api/files/true_11111111111@c.us_AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA.jpg\u0026quot;, \u0026quot;mimetype\u0026quot;: \u0026quot;image/jpeg\u0026quot;, \u0026quot;filename\u0026quot;: null } } } Then you can use the link to download the file http://localhost:3000/api/files/true_11111111111@c.us_AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA.jpg.
For documents (file attachments) there\u0026rsquo;s also filename field with the original file name.
{ \u0026quot;event\u0026quot;: \u0026quot;message\u0026quot;, \u0026quot;session\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;payload\u0026quot;: { \u0026quot;id\u0026quot;: \u0026quot;true_11111111111@c.us_AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u0026quot;, \u0026quot;timestamp\u0026quot;: 1667561485, \u0026quot;from\u0026quot;: \u0026quot;11111111111@c.us\u0026quot;, \u0026quot;media\u0026quot;: { \u0026quot;url\u0026quot;: \u0026quot;http://localhost:3000/api/files/true_11111111111@c.us_AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA.pdf\u0026quot;, \u0026quot;filename\u0026quot;: \u0026quot;some-file.pdf\u0026quot;, \u0026quot;mimetype\u0026quot;: \u0026quot;application/pdf\u0026quot; } } } To configure the url you can use environment variables WHATSAPP_API_HOSTNAME and WHATSAPP_API_PORT.
By default, WAHA download all files that the account receive. If you want to limit files lifetime, specify file types for download or change directory for files - read more about file storage configuration and variables -\u0026gt;.
Endpoints #See the list of engines that support the feature -\u0026gt;.
Get messages #Read messages from the history - use GET /api/messages endpoint.
You also can get messages for chats by using Get messages from chat -\u0026gt; endpoint.
👉 We do not recommend using this method in production, consider using webhooks instead! curl -X 'GET' \\ 'http://localhost:3000/api/messages?chatId=11111111111%40c.us\u0026amp;limit=1000\u0026amp;session=default' \\ -H 'accept: application/json' Examples #Here\u0026rsquo;s few examples of how to receive messages in different languages:
Python guide -\u0026gt; Do you use another language?
Please create a short guide how to handle webhook and send message after you finish your setup! You can create a pull request with your favorite language in the GitHub, in examples folder -\u0026gt;.
`}),e.add({id:12,href:"/docs/how-to/webhooks/",title:"🔄 Webhooks",description:"Webhooks",content:`The project uses Webhooks to send the messages and events from WhatsApp to your application.
Webhooks are a way for two different applications to communicate with each other in real-time. When a certain event happens in one application, it sends a message to another application through a webhook URL. The receiving application can then take action based on the information received.
Setup webhooks #Session webhooks #You can define webhooks configuration per session when you start it with POST /api/sessions/start request data.
Here\u0026rsquo;s a simple example:
{ \u0026quot;name\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;config\u0026quot;: { \u0026quot;webhooks\u0026quot;: [ { \u0026quot;url\u0026quot;: \u0026quot;https://httpbin.org/post\u0026quot;, \u0026quot;events\u0026quot;: [ \u0026quot;message\u0026quot; ] } ] } } Here\u0026rsquo;s available configuration options for webhooks
{ \u0026quot;name\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;config\u0026quot;: { \u0026quot;webhooks\u0026quot;: [ { \u0026quot;url\u0026quot;: \u0026quot;https://httpbin.org/post\u0026quot;, \u0026quot;events\u0026quot;: [ \u0026quot;message\u0026quot; ], \u0026quot;hmac\u0026quot;: { \u0026quot;key\u0026quot;: \u0026quot;your-secret-key\u0026quot; }, \u0026quot;retries\u0026quot;: { \u0026quot;delaySeconds\u0026quot;: 2, \u0026quot;attempts\u0026quot;: 15 }, \u0026quot;customHeaders\u0026quot;: [ { \u0026quot;name\u0026quot;: \u0026quot;X-My-Custom-Header\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;Value\u0026quot; } ] } ] } } Global webhooks #There\u0026rsquo;s a way how you can configure webhooks for ALL sessions - by settings these environment variables:
WHATSAPP_HOOK_URL=https://httpbin.org/post - to set up a URL for the webhook WHATSAPP_HOOK_EVENTS=message,message.any,state.change - specify events. Do not specify all of them, it\u0026rsquo;s too heavy payload, choose the right for you. WHATSAPP_HOOK_EVENTS=* - subscribe to all events. It\u0026rsquo;s not recommended for production, but it\u0026rsquo;s fine for development. That webhook configuration does not appear in session.config field in GET /api/sessions/ request.
Webhook payload #On the URL that you set you\u0026rsquo;ll receive HTTP POST request with a JSON string with following format:
{ \u0026quot;event\u0026quot;: \u0026quot;message\u0026quot;, \u0026quot;session\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;engine\u0026quot;: \u0026quot;WEBJS\u0026quot;, \u0026quot;environment\u0026quot;: { \u0026quot;tier\u0026quot;: \u0026quot;PLUS\u0026quot;, \u0026quot;version\u0026quot;: \u0026quot;2023.10.12\u0026quot; }, \u0026quot;me\u0026quot;: { \u0026quot;id\u0026quot;: \u0026quot;71111111111@c.us\u0026quot;, \u0026quot;pushName\u0026quot;: \u0026quot;~\u0026quot; }, \u0026quot;payload\u0026quot;: { } } Where event value helps you identify the incoming event with payload for that events.
Below the list of all events that WhatsApp HTTP API sends to your.
👉 If you want to look at a webhook body - use the url https://httpbin.org/post Run the bellow command and see look at the logs - it prints body request for all events that happen in your WhatsApp!
docker run -it -e \u0026quot;WHATSAPP_HOOK_EVENTS=*\u0026quot; -e WHATSAPP_HOOK_URL=https://httpbin.org/post -p 3000:3000 devlikeapro/whatsapp-http-api Webhooks #See the list of engines that support the features -\u0026gt;.
session.status #The session.status event is triggered when the session status changes.
STOPPED - session is stopped STARTING - session is starting SCAN_QR_CODE - session is required to scan QR code or login via phone number When you receive the session.status event with SCAN_QR_CODE status, you can fetch updated QR -\u0026gt; The SCAN_QR_CODE is issued every time when QR updated (WhatsApp requirements) WORKING - session is working and ready to use FAILED - session is failed due to some error. It\u0026rsquo;s likely that authorization is required again or device has been disconnected from that account. Try to restart the session and if it doesn\u0026rsquo;t help - logout and start the session again. { \u0026quot;event\u0026quot;: \u0026quot;session.status\u0026quot;, \u0026quot;session\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;me\u0026quot;: { \u0026quot;id\u0026quot;: \u0026quot;7911111@c.us\u0026quot;, \u0026quot;pushName\u0026quot;: \u0026quot;~\u0026quot; }, \u0026quot;payload\u0026quot;: { \u0026quot;status\u0026quot;: \u0026quot;WORKING\u0026quot; }, \u0026quot;engine\u0026quot;: \u0026quot;WEBJS\u0026quot;, \u0026quot;environment\u0026quot;: { \u0026quot;version\u0026quot;: \u0026quot;2023.10.12\u0026quot;, \u0026quot;engine\u0026quot;: \u0026quot;WEBJS\u0026quot;, \u0026quot;tier\u0026quot;: \u0026quot;PLUS\u0026quot; } } message #Incoming message (text/audio/files)
{ \u0026quot;event\u0026quot;: \u0026quot;message\u0026quot;, \u0026quot;session\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;engine\u0026quot;: \u0026quot;WEBJS\u0026quot;, \u0026quot;payload\u0026quot;: { \u0026quot;id\u0026quot;: \u0026quot;true_11111111111@c.us_AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u0026quot;, \u0026quot;timestamp\u0026quot;: 1667561485, \u0026quot;from\u0026quot;: \u0026quot;11111111111@c.us\u0026quot;, \u0026quot;fromMe\u0026quot;: true, \u0026quot;to\u0026quot;: \u0026quot;11111111111@c.us\u0026quot;, \u0026quot;body\u0026quot;: \u0026quot;Hi there!\u0026quot;, \u0026quot;hasMedia\u0026quot;: false, \u0026quot;ack\u0026quot;: 1, \u0026quot;vCards\u0026quot;: [], \u0026quot;_data\u0026quot;: { \u0026quot;id\u0026quot;: { \u0026quot;fromMe\u0026quot;: true, \u0026quot;remote\u0026quot;: \u0026quot;11111111111@c.us\u0026quot;, \u0026quot;id\u0026quot;: \u0026quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u0026quot;, \u0026quot;_serialized\u0026quot;: \u0026quot;true_11111111111@c.us_AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\u0026quot; }, \u0026quot;body\u0026quot;: \u0026quot;Hi there!\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;chat\u0026quot;, \u0026quot;t\u0026quot;: 1667561485, \u0026quot;notifyName\u0026quot;: \u0026quot;MyName\u0026quot;, \u0026quot;from\u0026quot;: \u0026quot;11111111111@c.us\u0026quot;, \u0026quot;to\u0026quot;: \u0026quot;11111111111@c.us\u0026quot;, \u0026quot;self\u0026quot;: \u0026quot;in\u0026quot;, \u0026quot;ack\u0026quot;: 1, \u0026quot;isNewMsg\u0026quot;: true, \u0026quot;star\u0026quot;: false, \u0026quot;kicNotified\u0026quot;: false, \u0026quot;recvFresh\u0026quot;: true, \u0026quot;isFromTemplate\u0026quot;: false, \u0026quot;pollInvalidated\u0026quot;: false, \u0026quot;latestEditMsgKey\u0026quot;: null, \u0026quot;latestEditSenderTimestampMs\u0026quot;: null, \u0026quot;broadcast\u0026quot;: false, \u0026quot;mentionedJidList\u0026quot;: [], \u0026quot;isVcardOverMmsDocument\u0026quot;: false, \u0026quot;isForwarded\u0026quot;: false, \u0026quot;hasReaction\u0026quot;: false, \u0026quot;ephemeralOutOfSync\u0026quot;: false, \u0026quot;productHeaderImageRejected\u0026quot;: false, \u0026quot;lastPlaybackProgress\u0026quot;: 0, \u0026quot;isDynamicReplyButtonsMsg\u0026quot;: false, \u0026quot;isMdHistoryMsg\u0026quot;: false, \u0026quot;stickerSentTs\u0026quot;: 0, \u0026quot;isAvatar\u0026quot;: false, \u0026quot;requiresDirectConnection\u0026quot;: false, \u0026quot;pttForwardedFeaturesEnabled\u0026quot;: true, \u0026quot;isEphemeral\u0026quot;: false, \u0026quot;isStatusV3\u0026quot;: false, \u0026quot;links\u0026quot;: [] } } } message.any #Fired on all message creations, including your own. The payload is the same as for message event.
{ \u0026quot;event\u0026quot;: \u0026quot;message.any\u0026quot;, \u0026quot;session\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;engine\u0026quot;: \u0026quot;WEBJS\u0026quot;, \u0026quot;payload\u0026quot;: { ... } } message.reaction #Receive events when a message is reacted to by a user (or yourself reacting to a message).
payload.reaction.text - emoji that was used to react to the message. It\u0026rsquo;ll be an empty string if the reaction was removed. payload.reaction.messageId - id of the message that was reacted to. { \u0026quot;event\u0026quot;: \u0026quot;message.reaction\u0026quot;, \u0026quot;session\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;me\u0026quot;: { \u0026quot;id\u0026quot;: \u0026quot;79222222222@c.us\u0026quot;, \u0026quot;pushName\u0026quot;: \u0026quot;WAHA\u0026quot; }, \u0026quot;payload\u0026quot;: { \u0026quot;id\u0026quot;: \u0026quot;false_79111111@c.us_11111111111111111111111111111111\u0026quot;, \u0026quot;from\u0026quot;: \u0026quot;79111111@c.us\u0026quot;, \u0026quot;fromMe\u0026quot;: false, \u0026quot;participant\u0026quot;: \u0026quot;79111111@c.us\u0026quot;, \u0026quot;to\u0026quot;: \u0026quot;79111111@c.us\u0026quot;, \u0026quot;timestamp\u0026quot;: 1710481111.853, \u0026quot;reaction\u0026quot;: { \u0026quot;text\u0026quot;: \u0026quot;🙏\u0026quot;, \u0026quot;messageId\u0026quot;: \u0026quot;true_79111111@c.us_11111111111111111111111111111111\u0026quot; } }, \u0026quot;engine\u0026quot;: \u0026quot;WEBJS\u0026quot;, \u0026quot;environment\u0026quot;: { \u0026quot;version\u0026quot;: \u0026quot;2024.3.3\u0026quot;, \u0026quot;engine\u0026quot;: \u0026quot;WEBJS\u0026quot;, \u0026quot;tier\u0026quot;: \u0026quot;PLUS\u0026quot;, \u0026quot;browser\u0026quot;: \u0026quot;/usr/bin/google-chrome-stable\u0026quot; } } 👉 NOWEB engine note - reactions were sent in 'message' and 'message.any' events, not it's available only in 'message.reaction'! message.ack #Receive events when server or recipient gets the message, read or played it.
ackName field contains message status (ack has the same meaning, but show the value in int, but we keep it for backward compatability, they much to each other)
Possible message ack statuses:
ackName: ERROR, ack: -1 ackName: PENDING, ack: 0 ackName: SERVER, ack: 1 ackName: DEVICE, ack: 2 ackName: READ, ack: 3 ackName: PLAYED, ack: 4 The payload may have more fields, it depends on the engine you use, but here\u0026rsquo;s a minimum amount that all engines send:
{ \u0026quot;event\u0026quot;: \u0026quot;message.ack\u0026quot;, \u0026quot;session\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;engine\u0026quot;: \u0026quot;WEBJS\u0026quot;, \u0026quot;payload\u0026quot;: { \u0026quot;id\u0026quot;:\u0026quot;true_11111111111@c.us_4CC5EDD64BC22EBA6D639F2AF571346C\u0026quot;, \u0026quot;from\u0026quot;:\u0026quot;11111111111@c.us\u0026quot;, \u0026quot;participant\u0026quot;: null, \u0026quot;fromMe\u0026quot;:true, \u0026quot;ack\u0026quot;:3, \u0026quot;ackName\u0026quot;:\u0026quot;READ\u0026quot; } } message.revoked #The message.revoked event is triggered when a user, whether it be you or any other participant, revokes a previously sent message.
{ \u0026quot;event\u0026quot;: \u0026quot;message.revoked\u0026quot;, \u0026quot;session\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;payload\u0026quot;: { \u0026quot;before\u0026quot;: { \u0026quot;id\u0026quot;: \u0026quot;some-id-here\u0026quot;, \u0026quot;timestamp\u0026quot;: \u0026quot;some-timestamp-here\u0026quot;, \u0026quot;body\u0026quot;: \u0026quot;Hi there!\u0026quot; }, \u0026quot;after\u0026quot;: { \u0026quot;id\u0026quot;: \u0026quot;some-id-here\u0026quot;, \u0026quot;timestamp\u0026quot;: \u0026quot;some-timestamp-here\u0026quot;, \u0026quot;body\u0026quot;: \u0026quot;\u0026quot; } } } Important notes:
The above messages\u0026rsquo; ids don\u0026rsquo;t match any of the ids you\u0026rsquo;ll receive in the message event, it\u0026rsquo;s a different id. In order to find the message that was revoked, you\u0026rsquo;ll need to search for the message with the same timestamp and chat id as the one in the after object. before field can be null in some cases. state.change #It\u0026rsquo;s an internal engine\u0026rsquo;s state, not session status.
{ \u0026quot;event\u0026quot;: \u0026quot;state.change\u0026quot;, \u0026quot;session\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;engine\u0026quot;: \u0026quot;WEBJS\u0026quot;, \u0026quot;payload\u0026quot;: { ... } } group.join #{ \u0026quot;event\u0026quot;: \u0026quot;group.join\u0026quot;, \u0026quot;session\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;engine\u0026quot;: \u0026quot;WEBJS\u0026quot;, \u0026quot;payload\u0026quot;: { ... } } group.leave #{ \u0026quot;event\u0026quot;: \u0026quot;group.left\u0026quot;, \u0026quot;session\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;engine\u0026quot;: \u0026quot;WEBJS\u0026quot;, \u0026quot;payload\u0026quot;: { ... } } presence.update #payload.id indicates the chat - either direct chat with a contact or a group chat. payload.id.[].participant - certain participant presence status. For a direct chat there\u0026rsquo;s only one participant. { \u0026quot;event\u0026quot;: \u0026quot;presence.update\u0026quot;, \u0026quot;session\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;engine\u0026quot;: \u0026quot;NOWEB\u0026quot;, \u0026quot;payload\u0026quot;: { \u0026quot;id\u0026quot;: \u0026quot;111111111111111111@g.us\u0026quot;, \u0026quot;presences\u0026quot;: [ { \u0026quot;participant\u0026quot;: \u0026quot;11111111111@c.us\u0026quot;, \u0026quot;lastKnownPresence\u0026quot;: \u0026quot;typing\u0026quot;, \u0026quot;lastSeen\u0026quot;: null } ] } } poll.vote #We have a dedicated page how to send polls and receive votes!
{ \u0026quot;event\u0026quot;: \u0026quot;poll.vote\u0026quot;, \u0026quot;session\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;payload\u0026quot;: { \u0026quot;vote\u0026quot;: { \u0026quot;id\u0026quot;: \u0026quot;false_1111111111@c.us_83ACBE602A05C79B234B54415E95EE8A\u0026quot;, \u0026quot;to\u0026quot;: \u0026quot;me\u0026quot;, \u0026quot;from\u0026quot;: \u0026quot;1111111@c.us\u0026quot;, \u0026quot;fromMe\u0026quot;: false, \u0026quot;selectedOptions\u0026quot;: [\u0026quot;Awesome!\u0026quot;], \u0026quot;timestamp\u0026quot;: 1692861427 }, \u0026quot;poll\u0026quot;: { \u0026quot;id\u0026quot;: \u0026quot;true_1111111111@c.us_BAE5F2EF5C69001E\u0026quot;, \u0026quot;to\u0026quot;: \u0026quot;1111111111@c.us\u0026quot;, \u0026quot;from\u0026quot;: \u0026quot;me\u0026quot;, \u0026quot;fromMe\u0026quot;: true } }, \u0026quot;engine\u0026quot;: \u0026quot;NOWEB\u0026quot; } poll.vote.failed #We have a dedicated page how to send polls and receive votes!
{ \u0026quot;event\u0026quot;: \u0026quot;poll.vote.failed\u0026quot;, \u0026quot;session\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;payload\u0026quot;: { \u0026quot;vote\u0026quot;: { \u0026quot;id\u0026quot;: \u0026quot;false_11111111111@c.us_2E8C4CDA89EDE3BC0BC7F605364B8451\u0026quot;, \u0026quot;to\u0026quot;: \u0026quot;me\u0026quot;, \u0026quot;from\u0026quot;: \u0026quot;111111111@c.us\u0026quot;, \u0026quot;fromMe\u0026quot;: false, \u0026quot;selectedOptions\u0026quot;: [], \u0026quot;timestamp\u0026quot;: 1692956972 }, \u0026quot;poll\u0026quot;: { \u0026quot;id\u0026quot;: \u0026quot;true_1111111111@c.us_BAE595F4E0A2042C\u0026quot;, \u0026quot;to\u0026quot;: \u0026quot;111111111@c.us\u0026quot;, \u0026quot;from\u0026quot;: \u0026quot;me\u0026quot;, \u0026quot;fromMe\u0026quot;: true } }, \u0026quot;engine\u0026quot;: \u0026quot;NOWEB\u0026quot; } Webhooks Advanced #HMAC authentication #You can authenticate webhook sender by using HMAC Authentication.
Define you secret key in config.hmac.key field when you start session with POST /api/sessions/start: { \u0026quot;name\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;config\u0026quot;: { \u0026quot;webhooks\u0026quot;: [ { \u0026quot;url\u0026quot;: \u0026quot;https://httpbin.org/post\u0026quot;, \u0026quot;events\u0026quot;: [ \u0026quot;message\u0026quot; ], \u0026quot;hmac\u0026quot;: { \u0026quot;key\u0026quot;: \u0026quot;your-secret-key\u0026quot; } } ] } } After that you\u0026rsquo;ll receive all webhooks payload with two additional headers: X-Webhook-Hmac - message authentication code for the raw body in HTTP POST request that send to your endpoint. X-Webhook-Hmac-Algorithm - sha512 - algorithm that have been used to create X-Webhook-Hmac value. Implement the authentication algorithm by hashing body and using secret key and then verifying it with X-Webhook-Hmac value. Please check your implementation here -\u0026gt; Here\u0026rsquo;s example for
# Full body {\u0026quot;event\u0026quot;:\u0026quot;message\u0026quot;,\u0026quot;session\u0026quot;:\u0026quot;default\u0026quot;,\u0026quot;engine\u0026quot;:\u0026quot;WEBJS\u0026quot;} # Secret key my-secret-key # X-Webhook-Hmac-Algorithm sha512 # X-Webhook-Hmac 208f8a55dde9e05519e898b10b89bf0d0b3b0fdf11fdbf09b6b90476301b98d8097c462b2b17a6ce93b6b47a136cf2e78a33a63f6752c2c1631777076153fa89 Retries #WAHA retries to reach your webhook URL 15 times with 2 seconds delay between attempts by default in Plus Version →
You can configure those parameters by settings config.retries structure when POST /api/sessions/start:
{ \u0026quot;name\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;config\u0026quot;: { \u0026quot;webhooks\u0026quot;: [ { \u0026quot;url\u0026quot;: \u0026quot;https://httpbin.org/post\u0026quot;, \u0026quot;events\u0026quot;: [ \u0026quot;message\u0026quot; ], \u0026quot;retries\u0026quot;: { \u0026quot;delaySeconds\u0026quot;: 2, \u0026quot;attempts\u0026quot;: 15 } } ] } } Custom Headers #You can send any customer headers by defining config.webhooks.customHeaders fields this way:
{ \u0026quot;name\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;config\u0026quot;: { \u0026quot;webhooks\u0026quot;: [ { \u0026quot;url\u0026quot;: \u0026quot;https://httpbin.org/post\u0026quot;, \u0026quot;events\u0026quot;: [ \u0026quot;message\u0026quot; ], \u0026quot;customHeaders\u0026quot;: [ { \u0026quot;name\u0026quot;: \u0026quot;X-My-Custom-Header\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;Value\u0026quot; } ] } ] } } Examples #Here\u0026rsquo;s few examples of how to handle webhook in different languages:
Python guide Do you use another language?
Please create a short guide how to handle webhook and send message after you finish your setup! You can create a pull request with your favorite language in the GitHub, in examples folder -\u0026gt;.
`}),e.add({id:13,href:"/docs/how-to/sessions/",title:"🖥️ Sessions",description:"Sessions",content:`Endpoints #See the list of engines that support the features -\u0026gt;.
Start #In order to start a new session - call POST /api/sessions/start
{ \u0026quot;name\u0026quot;: \u0026quot;default\u0026quot; } Configure webhooks #You can configure webhooks for a session:
{ \u0026quot;name\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;config\u0026quot;: { \u0026quot;webhooks\u0026quot;: [ { \u0026quot;url\u0026quot;: \u0026quot;https://httpbin.org/post\u0026quot;, \u0026quot;events\u0026quot;: [ \u0026quot;message\u0026quot; ] } ] } } Read more about available options on Webhooks page -\u0026gt;
The configuration is saved and will be applied if the docker container restarts, and you set WHATSAPP_RESTART_ALL_SESSIONS environment variables. Read more about it in Autostart section.
Configure proxy #You can configure proxy for a session by setting config.proxy fields when you POST /api/sessions/start:
server - proxy server address, without http:// or https:// prefixes username and password - set this if the proxy requires authentication No authentication
{ \u0026quot;name\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;config\u0026quot;: { \u0026quot;proxy\u0026quot;: { \u0026quot;server\u0026quot;: \u0026quot;localhost:3128\u0026quot; } } } Proxy with authentication
{ \u0026quot;name\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;config\u0026quot;: { \u0026quot;proxy\u0026quot;: { \u0026quot;server\u0026quot;: \u0026quot;localhost:3128\u0026quot;, \u0026quot;username\u0026quot;: \u0026quot;username\u0026quot;, \u0026quot;password\u0026quot;: \u0026quot;P@ssw0rd\u0026quot; } } } The configuration is saved and will be applied if the docker container restarts, and you set WHATSAPP_RESTART_ALL_SESSIONS environment variables. Read more about it in Autostart section.
You can configure proxy when for all sessions by set up environment variables. Read more about it on Proxy page -\u0026gt; or Configuration page -\u0026gt;.
Enable debug #You can enable debug mode for a session by setting config.debug field to true. It\u0026rsquo;ll show you more logs in the console. Can be useful for debugging purposes when you\u0026rsquo;re experiencing some issues.
{ \u0026quot;name\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;config\u0026quot;: { \u0026quot;debug\u0026quot;: true } } List #To get session list - call GET /api/sessions.
The response:
[ { \u0026quot;name\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;status\u0026quot;: \u0026quot;WORKING\u0026quot;, \u0026quot;config\u0026quot;: { \u0026quot;proxy\u0026quot;: null, \u0026quot;webhooks\u0026quot;: [ { \u0026quot;url\u0026quot;: \u0026quot;https://httpbin.org/post\u0026quot;, \u0026quot;events\u0026quot;: [ \u0026quot;message\u0026quot;, \u0026quot;session.status\u0026quot; ], \u0026quot;hmac\u0026quot;: null, \u0026quot;retries\u0026quot;: null, \u0026quot;customHeaders\u0026quot;: null } ], \u0026quot;debug\u0026quot;: false }, \u0026quot;me\u0026quot;: { \u0026quot;id\u0026quot;: \u0026quot;79111111@c.us\u0026quot;, \u0026quot;pushName\u0026quot;: \u0026quot;WAHA\u0026quot; }, \u0026quot;engine\u0026quot;: { \u0026quot;engine\u0026quot;: \u0026quot;NOWEB\u0026quot; } } ] You can add ?all=true parameter to the request GET /api/session?all=True it\u0026rsquo;ll show you ALL session, including STOPPED, so you can know which one will be restarted if you set WHATSAPP_RESTART_ALL_SESSIONS=True environment variable.
Get session #To get information about a specific session - call GET /api/sessions/{session}.
{ \u0026quot;name\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;status\u0026quot;: \u0026quot;WORKING\u0026quot;, \u0026quot;config\u0026quot;: { \u0026quot;proxy\u0026quot;: null, \u0026quot;webhooks\u0026quot;: [ { \u0026quot;url\u0026quot;: \u0026quot;https://httpbin.org/post\u0026quot;, \u0026quot;events\u0026quot;: [ \u0026quot;message\u0026quot;, \u0026quot;session.status\u0026quot; ], \u0026quot;hmac\u0026quot;: null, \u0026quot;retries\u0026quot;: null, \u0026quot;customHeaders\u0026quot;: null } ], \u0026quot;debug\u0026quot;: false }, \u0026quot;me\u0026quot;: { \u0026quot;id\u0026quot;: \u0026quot;79111111@c.us\u0026quot;, \u0026quot;pushName\u0026quot;: \u0026quot;WAHA\u0026quot; }, \u0026quot;engine\u0026quot;: { \u0026quot;engine\u0026quot;: \u0026quot;NOWEB\u0026quot; } } Stop #In order to stop a new session - call POST /api/sessions/stop
👉 The stop request does not log out the account by default. Set 'logout' field to 'true'. { \u0026quot;name\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;logout\u0026quot;: true } Logout #In order to log out the session - call POST /api/sessions/logout
👉 You must stop session first. { \u0026quot;name\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;logout\u0026quot;: true } Get screenshot #Get screenshot of the session\u0026rsquo;s screen.
GET /api/screenshot?session=default Get screenshot in Base64 #You can get screenshot in base64 format by adding Accept: application/json header to the request.
GET /api/screenshot?session=default Accept: application/json { \u0026quot;mimetype\u0026quot;: \u0026quot;image/png\u0026quot;, \u0026quot;data\u0026quot;: \u0026quot;base64-encoded-data\u0026quot; } You can change it in Swagger by clicking on Media Type dropdown and selecting application/json:
Get me #Get information about the associated account for that session (if any).
GET /api/sessions/{session}/me Authenticated and working session\u0026rsquo;s response:
{ \u0026quot;id\u0026quot;: \u0026quot;11111111111@c.us\u0026quot;, \u0026quot;pushName\u0026quot;: \u0026quot;string\u0026quot; } Stopped or not authenticated session returns null:
null Get QR #See the list of engines that support the features -\u0026gt;.
The simplest way to authenticate a new session - get QR code and scan it on your device.
GET /api/{session}/auth/qr You\u0026rsquo;ll get QR image that you can scan and get authenticated
QR formats #You can get QR in different formats:
binary image - GET /api/{session}/auth/qr base64 image - GET /api/{session}/auth/qr and set Accept: application/json header raw - GET /api/{session}/auth/qr?format=raw Here\u0026rsquo;s detailed information about each format:
binary image, binary image - default format, you\u0026rsquo;ll get image in response # Get image - binary GET /api/{session}/auth/qr # OR GET /api/{session}/auth/qr?format=image # OR specify Accept header as well GET /api/{session}/auth/qr?format=image Accept: image/png base64 image - you\u0026rsquo;ll get image in base64 format in response if you set Accept: application/json header. GET /api/{session}/auth/qr?format=image Accept: application/json { \u0026quot;mimetype\u0026quot;: \u0026quot;image/png\u0026quot;, \u0026quot;data\u0026quot;: \u0026quot;base64-encoded-data\u0026quot; } You can change it in Swagger by clicking on Media Type dropdown and selecting application/json:
raw - you\u0026rsquo;ll get raw data in response, you can use it to generate QR code on your side GET /api/{session}/auth/qr?format=raw { \u0026quot;value\u0026quot;: \u0026quot;value-that-you-need-to-use-to-generate-qr-code\u0026quot; } Get pairing code #See the list of engines that support the features -\u0026gt;.
You can link a session with phone number - make a request to the endpoint.
POST /api/{session}/auth/request-code Body example:
{ \u0026quot;phoneNumber\u0026quot;: \u0026quot;12132132130\u0026quot; } You\u0026rsquo;ll get code in the response that you can use on your WhatsApp app to connect the session:
{ \u0026quot;code\u0026quot;: \u0026quot;ABCD-ABCD\u0026quot; } Webhooks #See the list of engines that support the feature -\u0026gt;.
session.status #The session.status event is triggered when the session status changes.
STOPPED - session is stopped STARTING - session is starting SCAN_QR_CODE - session is required to scan QR code or login via phone number. When you receive the session.status event with SCAN_QR_CODE status, you can fetch updated QR -\u0026gt; The SCAN_QR_CODE is issued every time when QR updated (WhatsApp requirements) WORKING - session is working and ready to use FAILED - session is failed due to some error. It\u0026rsquo;s likely that authorization is required again or device has been disconnected from that account. Try to restart the session and if it doesn\u0026rsquo;t help - logout and start the session again. { \u0026quot;event\u0026quot;: \u0026quot;session.status\u0026quot;, \u0026quot;session\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;me\u0026quot;: { \u0026quot;id\u0026quot;: \u0026quot;7911111@c.us\u0026quot;, \u0026quot;pushName\u0026quot;: \u0026quot;~\u0026quot; }, \u0026quot;payload\u0026quot;: { \u0026quot;status\u0026quot;: \u0026quot;WORKING\u0026quot; }, \u0026quot;engine\u0026quot;: \u0026quot;WEBJS\u0026quot;, \u0026quot;environment\u0026quot;: { \u0026quot;version\u0026quot;: \u0026quot;2023.10.12\u0026quot;, \u0026quot;engine\u0026quot;: \u0026quot;WEBJS\u0026quot;, \u0026quot;tier\u0026quot;: \u0026quot;PLUS\u0026quot; } } Advanced sessions #With WAHA Plus version you can save session state to avoid scanning QR code everytime, configure autostart options so when the docker container restarts - it restores all previously run sessions!
Session persistent #If you want to save your session and do not scan QR code everytime when you launch WAHA - connect the session storage to the container -\u0026gt;
Autostart #If you don\u0026rsquo;t want to call POST /api/sessions/start for every session each time when the container restart - you can use set of these environment variables to start sessions for you:
WHATSAPP_RESTART_ALL_SESSIONS=True: Set this variable to True to start all STOPPED sessions after container restarts. By default, this variable is set to False. Please note that this will start all STOPPED sessions, not just the sessions that were working before the restart. You can maintain the session list by using POST /api/session/stop with the logout: True parameter or by calling POST /api/session/logout to remove STOPPED sessions. You can see all sessions, including STOPPED sessions, in the GET /api/sessions/all=True response. WHATSAPP_START_SESSION=session1,session2: This variable can be used to start sessions with the specified names right after launching the API. Separate session names with a comma. Multiple sessions #If you want to save server\u0026rsquo;s CPU and Memory - run multiple sessions inside one docker container! Plus version supports multiple sessions in one container.
`}),e.add({id:14,href:"/docs/how-to/proxy/",title:"🌐 Proxy",description:"Proxy",content:`Overview #If you\u0026rsquo;re experiencing issues scanning QR codes in WhatsApp, especially with Indian 🇮🇳 phone numbers, using a proxy located close to the phone number\u0026rsquo;s location may help resolve the problem.
It affects both WEBJS and NOWEB engines.
Symptoms #You start a new session in WhatsApp. Scan the QR code. Experience a long loading time. Face login failures or instant logout. Encounter a new QR code or enter a FAILED state immediately. Configuration #There are two ways to set up proxies:
Global Setting (for all sessions per container) Per Session Configuration (you can define a proxy for each session when you start it) Global Proxy Configuration #To use a proxy, you can set the following environment variables:
WHATSAPP_PROXY_SERVER=localhost:3128: Set the proxy server in the format host:port, without HTTP or HTTPS. WHATSAPP_PROXY_SERVER_USERNAME=username and WHATSAPP_PROXY_SERVER_PASSWORD=password: Configure credentials for the proxy. WHATSAPP_PROXY_SERVER_LIST=host1.example.com:3138,host2.example.com:3138: Specify a comma-separated list of addresses to use, utilizing a round-robin algorithm for server selection. WHATSAPP_PROXY_SERVER_INDEX_PREFIX=proxy-: Define a session name prefix to choose the appropriate proxy from the list. Read more about it on Configuration page -\u0026gt;.
Session Proxy Configuration #You can configure proxy for a session by setting config.proxy fields when you POST /api/sessions/start:
server - proxy server address, without http:// or https:// prefixes username and password - set this if the proxy requires authentication No authentication
{ \u0026quot;name\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;config\u0026quot;: { \u0026quot;proxy\u0026quot;: { \u0026quot;server\u0026quot;: \u0026quot;localhost:3128\u0026quot; } } } Proxy with authentication
{ \u0026quot;name\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;config\u0026quot;: { \u0026quot;proxy\u0026quot;: { \u0026quot;server\u0026quot;: \u0026quot;localhost:3128\u0026quot;, \u0026quot;username\u0026quot;: \u0026quot;username\u0026quot;, \u0026quot;password\u0026quot;: \u0026quot;P@ssw0rd\u0026quot; } } } The configuration is saved and will be applied if the docker container restarts, and you set WHATSAPP_RESTART_ALL_SESSIONS environment variables. Read more about it in Autostart section.
Read more about it on Sessions page -\u0026gt;.
Recommended Proxies #Proxy6 #We recommend using Proxy6 where you can get a DEDICATED proxy (only you\u0026rsquo;ll use it) for \$1.77 per month.
Apply the promocode get a 5% discount on your purchase.
9W9oVxx3UX Geonode #Another option is Geonode.
`}),e.add({id:15,href:"/docs/how-to/polls/",title:"📶 Polls",description:"How to send polls and receive votes",content:`Waiting for WEBJS engine to support it, and we\u0026rsquo;ll add it ASAP!
Endpoints #See the list of engines that support the feature -\u0026gt;.
Send poll #Use the endpoint to send a poll!
POST /api/sendPoll The request body is pretty simple:
{ \u0026quot;session\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;chatId\u0026quot;: \u0026quot;123123123@c.us\u0026quot;, \u0026quot;poll\u0026quot;: { \u0026quot;name\u0026quot;: \u0026quot;How are you?\u0026quot;, \u0026quot;options\u0026quot;: [ \u0026quot;Awesome!\u0026quot;, \u0026quot;Good!\u0026quot;, \u0026quot;Not bad!\u0026quot; ], \u0026quot;multipleAnswers\u0026quot;: false } } The response you get back:
{ \u0026quot;id\u0026quot;: \u0026quot;true_321321321@c.us_83ACBAAAAAAAAAAAAAAAAAAAA\u0026quot;, \u0026quot;other-fields-here\u0026quot;: \u0026quot;value\u0026quot; } You must save the id field from the response in your database so that you can identify the poll for which you receive a vote (see webhook events below).
Webhooks #See the list of engines that support the feature -\u0026gt;.
poll.vote #With this event, you receive new votes for the poll sent.
Vote from a user in direct messages. #{ \u0026quot;event\u0026quot;: \u0026quot;poll.vote\u0026quot;, \u0026quot;session\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;payload\u0026quot;: { \u0026quot;vote\u0026quot;: { \u0026quot;id\u0026quot;: \u0026quot;false_1111111111@c.us_83ACBE602A05C79B234B54415E95EE8A\u0026quot;, \u0026quot;to\u0026quot;: \u0026quot;me\u0026quot;, \u0026quot;from\u0026quot;: \u0026quot;1111111@c.us\u0026quot;, \u0026quot;fromMe\u0026quot;: false, \u0026quot;selectedOptions\u0026quot;: [ \u0026quot;Awesome!\u0026quot; ], \u0026quot;timestamp\u0026quot;: 1692861427 }, \u0026quot;poll\u0026quot;: { \u0026quot;id\u0026quot;: \u0026quot;true_1111111111@c.us_BAE5F2EF5C69001E\u0026quot;, \u0026quot;to\u0026quot;: \u0026quot;1111111111@c.us\u0026quot;, \u0026quot;from\u0026quot;: \u0026quot;me\u0026quot;, \u0026quot;fromMe\u0026quot;: true } }, \u0026quot;engine\u0026quot;: \u0026quot;NOWEB\u0026quot; } Do I receive votes only for my polls? #No, you receive all votes. Keep in mind that you\u0026rsquo;ll get all votes with this event, even from other polls. To identify that it\u0026rsquo;s your poll, look at the poll.fromMe field.
How to handle multiple-answer votes #For multipleAnswers: true, you receive the selectedOptions with all the selected values at a certain moment. So if a user has chosen 3 options from the poll, you will receive 3 poll.vote events:
selectedOptions: [\u0026quot;First\u0026quot;] selectedOptions: [\u0026quot;First\u0026quot;, \u0026quot;Second\u0026quot;] selectedOptions: [\u0026quot;First\u0026quot;, \u0026quot;Second\u0026quot;, \u0026quot;Third\u0026quot;] Timestamp #If a user clicks on the poll multiple times, you will receive multiple poll.vote events. This is true for both multipleAnswers: false (when a user changes their mind about answers) and multipleAnswers: true (when a user selects two or more options) events.
There is a little chance that you may receive votes in the wrong order (due to the nature of HTTP and Webhooks), like 1-3-2 instead of 1-2-3. To determine the right order, look at the timestamp field. The event with a higher timestamp value is more recent.
👉 It\u0026rsquo;s important to save the timestamp for each vote in your database and compare them as numbers, without converting to internal datetime. Right now, the timestamp shows the timestamp in seconds, but it may be changed to milliseconds in the future.
Vote from a user in a group #{ \u0026quot;event\u0026quot;: \u0026quot;poll.vote\u0026quot;, \u0026quot;session\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;payload\u0026quot;: { \u0026quot;vote\u0026quot;: { \u0026quot;id\u0026quot;: \u0026quot;false_3333333333333@g.us_1C18A7EAADD2A8D0324755D241C4238A\u0026quot;, \u0026quot;to\u0026quot;: \u0026quot;3333333333333@g.us\u0026quot;, \u0026quot;from\u0026quot;: \u0026quot;1111111111@c.us\u0026quot;, \u0026quot;fromMe\u0026quot;: false, \u0026quot;selectedOptions\u0026quot;: [ \u0026quot;Awesome!\u0026quot; ], \u0026quot;timestamp\u0026quot;: 1692861427 }, \u0026quot;poll\u0026quot;: { \u0026quot;id\u0026quot;: \u0026quot;true_3333333333333@g.us_BAE5304BA1ECF704\u0026quot;, \u0026quot;to\u0026quot;: \u0026quot;33333333333333@g.us\u0026quot;, \u0026quot;from\u0026quot;: \u0026quot;222222222@c.us\u0026quot;, \u0026quot;fromMe\u0026quot;: true } }, \u0026quot;engine\u0026quot;: \u0026quot;NOWEB\u0026quot; } poll.vote.failed #There may be cases when WAHA fails to decrypt a vote from the user. In such cases, you will receive a poll.vote.failed event on your webhook.
The payload for poll.vote.failed is the same as for poll.vote, but with an empty list in selectedOptions.
{ \u0026quot;event\u0026quot;: \u0026quot;poll.vote.failed\u0026quot;, \u0026quot;session\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;payload\u0026quot;: { \u0026quot;vote\u0026quot;: { \u0026quot;id\u0026quot;: \u0026quot;false_11111111111@c.us_2E8C4CDA89EDE3BC0BC7F605364B8451\u0026quot;, \u0026quot;to\u0026quot;: \u0026quot;me\u0026quot;, \u0026quot;from\u0026quot;: \u0026quot;111111111@c.us\u0026quot;, \u0026quot;fromMe\u0026quot;: false, \u0026quot;selectedOptions\u0026quot;: [], \u0026quot;timestamp\u0026quot;: 1692956972 }, \u0026quot;poll\u0026quot;: { \u0026quot;id\u0026quot;: \u0026quot;true_1111111111@c.us_BAE595F4E0A2042C\u0026quot;, \u0026quot;to\u0026quot;: \u0026quot;111111111@c.us\u0026quot;, \u0026quot;from\u0026quot;: \u0026quot;me\u0026quot;, \u0026quot;fromMe\u0026quot;: true } }, \u0026quot;engine\u0026quot;: \u0026quot;NOWEB\u0026quot; } How should I handle poll.vote.failed events? #When you send a poll, save the poll configuration (question and options) in your database with the id field from the response you received from POST /api/sendPoll.
Later, when you receive a poll.vote.failed event, find the id for the poll in the database and repeat the same question to the user, apologizing for the inconvenience. For example, you can say:
Sorry, we don\u0026rsquo;t understand your choice 😞
Please click one more time on the message below 👇
After the user clicks on the poll again, you will receive a poll.vote event with their choice.
How to test poll.vote.failed events? #To receive poll.vote.failed events, follow these steps:
Start a session and authorize it with a QR code. Send a poll to a chat. Stop the session (logout is not required). Start the session again. Vote on the poll. You will receive a poll.vote.failed event. Why does the poll.vote.failed event occur and when will it be fixed? #The issue occurs because WAHA does not have a proper storage system, but polls require proper storage in order to decrypt votes later.
There will be two fixes for this:
In the short term, a local file storage will be used to save poll keys. In the long term, work is being done on remote storages. Even after these fixes are implemented, it\u0026rsquo;s better to handle poll.vote.failed events anyway, so your application is prepared for such cases!
`}),e.add({id:16,href:"/docs/how-to/chats/",title:"💬 Chats",description:"Chats",content:`Chats methods.
Parameters in path that you can find in below endpoints:
{session} - use the session name for Whatsapp instance that you created with POST /api/session/start endpoint {chatId} - chat id in format 123123123123@[c.us|g.us], c.us for direct chats and g.us for groups. Endpoints #See the list of engines that support the feature -\u0026gt;.
Get all chats #Get all chats GET /api/{session}/chats
Get messages from chat #Get 100 messages from the chat
GET /api/{session}/chats/{chatId}/messages?limit=100
Get 100 messages from the chat, skip downloading media (images, files)
GET /api/{session}/chats/{chatId}/messages?limit=100\u0026amp;downloadMedia=false
Delete chat #Use the method to delete chat
DELETE /api/{session}/chats/{chatId}
Clear messages #Use the method to clear all messages from the chat
DELETE /api/{session}/chats/{chatId}/messages
`}),e.add({id:17,href:"/docs/how-to/contacts/",title:"👤 Contacts",description:"Contacts",content:`Methods for contacts.
👉 WhatsApp Web does not support adding contacts, so the API doesn't support it too. Endpoints #See the list of engines that support the feature -\u0026gt;.
Get all contacts #Get your contacts - GET /api/contacts/all
[ { \u0026quot;id\u0026quot;: \u0026quot;11231231231@c.us\u0026quot;, \u0026quot;number\u0026quot;: \u0026quot;11231231231\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;Contact Name\u0026quot;, \u0026quot;pushname\u0026quot;: \u0026quot;Pushname\u0026quot;, \u0026quot;shortName\u0026quot;: \u0026quot;Shortname\u0026quot;, \u0026quot;isMe\u0026quot;: true, \u0026quot;isGroup\u0026quot;: false, \u0026quot;isWAContact\u0026quot;: true, \u0026quot;isMyContact\u0026quot;: true, \u0026quot;isBlocked\u0026quot;: false } ] Get contact #Get contact
GET /api/contacts?contactId=11231231231\u0026amp;session=default GET /api/contacts?contactId=11231231231@c.us\u0026amp;session=default { \u0026quot;id\u0026quot;: \u0026quot;11231231231@c.us\u0026quot;, \u0026quot;number\u0026quot;: \u0026quot;11231231231\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;Contact Name\u0026quot;, \u0026quot;pushname\u0026quot;: \u0026quot;Pushname\u0026quot;, \u0026quot;shortName\u0026quot;: \u0026quot;Shortname\u0026quot;, \u0026quot;isMe\u0026quot;: true, \u0026quot;isGroup\u0026quot;: false, \u0026quot;isWAContact\u0026quot;: true, \u0026quot;isMyContact\u0026quot;: true, \u0026quot;isBlocked\u0026quot;: false } Check phone number exists #If you want to check if phone number is registered in WhatsApp (even if the number is not in your contact list) - use this endpoint for that.
GET /api/contacts/check-exists?phone=11231231231\u0026amp;session=default It returns numberExists field with true or false value and chatId field with chat ID of the number (if exists).
{ \u0026quot;numberExists\u0026quot;: true, \u0026quot;chatId\u0026quot;: \u0026quot;123123123@c.us\u0026quot; } Note for Brazilian Phone Numbers
You should use the GET /api/contacts/check-exists endpoint before sending a message to a new phone number to get the correct chatId because of the additional 9-digit number added after 2012.
Read more about error sending text to half of Brazilian numbers (every number registered before 2012) -\u0026gt;
It\u0026rsquo;s fine to send the response to chatId for incoming messages, though - the payload already has the correct chatId.
Get \u0026ldquo;about\u0026rdquo; contact #GET /api/contacts/about?contactId=11231231231\u0026amp;session=default { \u0026quot;about\u0026quot;: \u0026quot;Hi, I use WhatsApp!\u0026quot; } Get contact profile picture #GET /api/contacts/profile-picture?contactId=11231231231\u0026amp;session=default { \u0026quot;profilePictureURL\u0026quot;: \u0026quot;https://example.com/profile.jpg\u0026quot; } Block (unblock) contact #To block contact - POST /api/contacts/block To unblock contact - POST /api/contacts/unblock Request:
{ \u0026quot;contactId\u0026quot;: \u0026quot;11231231231\u0026quot;, \u0026quot;session\u0026quot;: \u0026quot;default\u0026quot; } `}),e.add({id:18,href:"/docs/how-to/groups/",title:"👥 Groups",description:"Groups",content:`Endpoints #See the list of engines that support the feature -\u0026gt;.
Endpoints for groups. Please look at swagger for details.
{session} - use the session name for Whatsapp instance that you created with POST /api/session/start endpoint {groupId} - group id in format 123123123123@g.us. You can get the id in a few ways: By handling incoming message webhook. By getting all groups (see below). By creating a new group and saving the id. Create a new group #POST /api/{session}/groups
Request:
{ \u0026quot;name\u0026quot;: \u0026quot;Group name\u0026quot;, \u0026quot;participants\u0026quot;: [ { \u0026quot;id\u0026quot;: \u0026quot;123123123123@c.us\u0026quot; } ] } Get all groups #GET /api/{session}/groups
Get the group #GET /api/{session}/groups/{groupId}
Delete the group #DELETE /api/{session}/groups/{groupId}
Leave the group #POST /api/{session}/groups/{groupId}/leave
Set group subject #Updates the group subject.
Returns true if the subject was properly updated. This can return false if the user does not have the necessary permissions.
PUT /api/{session}/groups/{groupId}/subject
Request:
{ \u0026quot;subject\u0026quot;: \u0026quot;Group name\u0026quot; } Set group description #Updates the group description.
Returns true if the subject was properly updated. This can return false if the user does not have the necessary permissions.
PUT /api/{session}/groups/{groupId}/description
Request:
{ \u0026quot;description\u0026quot;: \u0026quot;Group description\u0026quot; } Security - update group info #Updates the group settings to only allow admins to edit group info (title, description, photo). PUT /api/{session}/groups/{groupId}/settings/security/info-admin-only
{ \u0026quot;adminsOnly\u0026quot;: true } Get the group settings to only allow admins to edit group info (title, description, photo).
GET /api/{session}/groups/{groupId}/settings/security/info-admin-only
{ \u0026quot;adminsOnly\u0026quot;: true } Returns true if the setting was properly updated. This can return false if the user does not have the necessary permissions.
Security - who can send messages #Updates the group settings to only allow admins to send messages.
PUT /api/{session}/groups/{groupId}/settings/security/messages-admin-only
{ \u0026quot;adminsOnly\u0026quot;: true } Returns true if the setting was properly updated. This can return false if the user does not have the necessary permissions.
Get the group settings to only allow admins to send messages.
GET /api/{session}/groups/{groupId}/settings/security/messages-admin-only
{ \u0026quot;adminsOnly\u0026quot;: true } Participants #Get participants #GET /api/{session}/groups/{groupId}/participants
Add participants #POST /api/{session}/groups/{groupId}/participants/add
{ \u0026quot;participants\u0026quot;: [ { \u0026quot;id\u0026quot;: \u0026quot;123123123123@c.us\u0026quot; } ] } Remove participants #POST /api/{session}/groups/{groupId}/participants/remove
{ \u0026quot;participants\u0026quot;: [ { \u0026quot;id\u0026quot;: \u0026quot;123123123123@c.us\u0026quot; } ] } Admin #Promote to admin #Promote participants to admin users.
POST /api/{session}/groups/{groupId}/admin/promote
{ \u0026quot;participants\u0026quot;: [ { \u0026quot;id\u0026quot;: \u0026quot;123123123123@c.us\u0026quot; } ] } Demote to regular users #Demote participants by to regular users.
POST /api/{session}/groups/{groupId}/admin/demote
{ \u0026quot;participants\u0026quot;: [ { \u0026quot;id\u0026quot;: \u0026quot;123123123123@c.us\u0026quot; } ] } Invite code #Get invite code #GET /api/{session}/groups/{groupId}/invite-code
Then you can put it in the url https://chat.whatsapp.com/{inviteCode} and send it to contacts.
Revoke invite code #Invalidates the current group invite code and generates a new one.
POST /api/{session}/groups/{groupId}/invite-code/revoke
Webhooks #See the list of engines that support the feature -\u0026gt;.
group.join #{ \u0026quot;event\u0026quot;: \u0026quot;group.join\u0026quot;, \u0026quot;session\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;engine\u0026quot;: \u0026quot;WEBJS\u0026quot;, \u0026quot;payload\u0026quot;: { ... } } group.leave #{ \u0026quot;event\u0026quot;: \u0026quot;group.left\u0026quot;, \u0026quot;session\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;engine\u0026quot;: \u0026quot;WEBJS\u0026quot;, \u0026quot;payload\u0026quot;: { ... } } `}),e.add({id:19,href:"/docs/how-to/engines/",title:"🏭 Engines",description:"Engines",content:`Engines #Under the hood WAHA allows you to use different engines. You can control what you want to run by settings WHATSAPP_DEFAULT_ENGINE environment variables.
docker run -it -e \u0026quot;WHATSAPP_DEFAULT_ENGINE=WEBJS\u0026quot; devlikeapro/whatsapp-http-api If you have any problems with one engine - try another!
👉 API responses and webhook payloads may differ significantly, test everything before changing the engine All engines are available in both Core and Plus versions.
WEBJS #WHATSAPP_DEFAULT_ENGINE=WEBJS https://github.com/pedroslopez/whatsapp-web.js A WhatsApp API client that connects through the WhatsApp Web browser app. It uses Puppeteer to run a real instance of Whatsapp Web to avoid getting blocked.
WAHA uses WhatsApp WebJS engine by default.
NOWEB #WHATSAPP_DEFAULT_ENGINE=NOWEB https://github.com/WhiskeySockets/Baileys NOWEB engine does not require a browser to work with WhatsApp Web, it does so directly using a WebSocket. Not running Chromium saves you CPU and Memory, so you can run more instances on a single server!
️Working with the engine requires more attention, because it\u0026rsquo;s easy to be blocked with it!
⚠ Read the article before using NOWEB engine
Quotes from the users:
The server has 2 CPU and 8GB of memory. Today we have 85 sessions in this instance.
400 sessions with 4CPU and 32RAM. It\u0026rsquo;s working fine.
How to avoid blocking -\u0026gt;.
VENOM #WHATSAPP_DEFAULT_ENGINE=VENOM https://github.com/orkestral/venom It\u0026rsquo;s a high-performance system developed with JavaScript to create a bot for WhatsApp. It uses Puppeteer to run a real instance of Whatsapp Web to avoid getting blocked.
Docker images #WAHA provides few docker images with different setup.
Image CPU Browser WAHA Plus devlikeapro/whatsapp-http-api-plus:latest x86 Chromium devlikeapro/whatsapp-http-api-plus:chrome x86 Chrome (supports video) devlikeapro/whatsapp-http-api-plus:noweb x86 None devlikeapro/whatsapp-http-api-plus:arm ARM Chromium devlikeapro/whatsapp-http-api-plus:noweb-arm ARM None WAHA Core devlikeapro/whatsapp-http-api:latest x86 Chromium devlikeapro/whatsapp-http-api:chrome x86 Chrome devlikeapro/whatsapp-http-api:noweb x86 None devlikeapro/whatsapp-http-api:arm ARM Chromium devlikeapro/whatsapp-http-api:noweb-arm ARM None Browsers:
Chromium - is the default browser for WAHA. It\u0026rsquo;s a good choice for most cases. Chrome - is a good choice if you need to receive videos in Plus version. None - is a good choice if you want to use NOWEB engine. CPU:
x86 - is a good choice for most cases. ARM - is a good choice if you\u0026rsquo;re using ARM processors (like Apple Silicon, Apple M1, etc.) 💡 Chrome version is not available in ARM Features #Some engines may not support certain features. Here, you will find a list of supported endpoints and webhooks per engine.
Symbol Meaning ✔️ The engines supports the feature. ➖ The engine does not support this feature. Please search for the issue about the endpoint in the project\u0026rsquo;s issue and upvote it by using the \u0026ldquo;👍\u0026rdquo; reaction on the issue\u0026rsquo;s description. This will help us determine the level of interest in the feature. If you are unable to find the issue, please create a new one. The feature available in WAHA Plus. If you don\u0026rsquo;t specify WHATSAPP_DEFAULT_ENGINE environment variable - look at WEBJS engine, it\u0026rsquo;s the engine WAHA runs by default.
Protocols #WEBJS NOWEB VENOM Run a browser (chromium\\chrome) to communicate with WhatsApp ✔️ ➖ ✔️ Communicate with WhatsApp via websocket (no browser) ➖ ✔️ ➖ Endpoints #If you find any inconsistency with actual endpoints - please create an issue
WEBJS NOWEB VENOM Session POST /api/sessions/start ✔️ ✔️ ✔️ POST /api/sessions/stop ✔️ ✔️ ✔️ POST /api/sessions/logout ✔️ ✔️ ✔️ GET /api/sessions/ ✔️ ✔️ ✔️ GET /api/sessions/{session}/me ✔️ ✔️ ➖ Authentication POST /api/{session}/auth/qr ✔️ ✔️ ✔️ POST /api/{session}/auth/request-code ➖ ✔️ ➖ POST /api/{session}/auth/authorize-code ➖ ➖️
#113 ➖ Screenshot POST /api/screenshot ✔️ ➖ ✔️ Chatting WEBJS NOWEB VENOM GET /api/checkNumberStatus ✔️ ✔️ ✔️ GET /api/sendContactVcard ➖ ✔️ ➖ GET /api/sendText ✔️ ✔️ ✔️ POST /api/sendText ✔️ ✔️ ✔️ POST /api/reply ✔️ ✔️ ✔️ PUT /api/{session}/chats/{chatId}/messages/{messageId} ✔️ ✔️ ➖ DELETE /api/{session}/chats/{chatId}/messages/{messageId} ✔️ ✔️ ➖ POST /api/sendPoll ➖ ✔️ ➖ POST /api/sendLocation ✔️ ✔️ ✔️ POST /api/sendLinkPreview ➖ ✔️ ✔️ POST /api/sendImage ✔️ ✔️ ✔️ POST /api/sendFile ✔️ ✔️ ✔️ POST /api/sendVoice ✔️ ✔️ ✔️ POST /api/sendVideo ✔️ ✔️ ➖ POST /api/sendSeen ✔️ ✔️ ✔️ POST /api/startTyping ✔️ ✔️ ✔️ POST /api/stopTyping ✔️ ✔️ ➖ POST /api/reaction ✔️ ✔️ ➖ POST /api/star ✔️ ✔️ ➖ GET /api/messages ✔️ ➖ ✔️ WEBJS NOWEB VENOM Status POST /api/{session}/status/text ➖ ✔️ ➖ POST /api/{session}/status/image ➖ ✔️ ➖ POST /api/{session}/status/voice ➖ ✔️ ➖ POST /api/{session}/status/video ➖ ✔️ ➖ Chats GET /api/{session}/chats ✔️ ➖ ➖ DELETE /api/{session}/chats/{chatId} ✔️ ➖ ➖ GET /api/{session}/chats/{chatId}/messages ✔️ ➖ ✔️ DELETE /api/{session}/chats/{chatId}/messages ✔️ ➖ ➖ PUT /api/{session}/chats/{chatId}/messages/{messageId} ✔️ ✔️ ➖ DELETE /api/{session}/chats/{chatId}/messages/{messageId} ✔️ ✔️ ➖ Contacts GET /api/contacts ✔️ ➖ ➖ GET /api/contacts/all ✔️ ➖ ➖ GET /api/contacts/check-exists ✔️ ✔️ ✔️ GET /api/contacts/about ✔️ ➖ ➖ GET /api/contacts/profile-picture ✔️ ✔️ ➖ POST /api/contacts/block ✔️ ➖ ➖ POST /api/contacts/unblock ✔️ ➖ ➖ Groups WEBJS NOWEB VENOM POST /api/{session}/groups ✔️ ✔️ ➖ GET /api/{session}/groups ✔️ ✔️ ➖ GET /api/{session}/groups/{id} ✔️ ✔️ ➖ DELETE /api/{session}/groups/{id} ✔️ ➖ ➖ GET /api/{session}/groups/{id}/settings/security/info-admin-only ✔️ ➖ ➖ PUT /api/{session}/groups/{id}/settings/security/info-admin-only ✔️ ➖ ➖ GET /api/{session}/groups/{id}/settings/security/messages-admin-only ✔️ ➖ ➖ PUT /api/{session}/groups/{id}/settings/security/messages-admin-only ✔️ ➖ ➖ POST /api/{session}/groups/{id}/leave ✔️ ✔️ ➖ PUT /api/{session}/groups/{id}/description ✔️ ✔️ ➖ PUT /api/{session}/groups/{id}/subject ✔️ ✔️ ➖ GET /api/{session}/groups/{id}/invite-code ✔️ ✔️ ➖ POST /api/{session}/groups/{id}/invite-code/revoke ✔️ ✔️ ➖ GET /api/{session}/groups/{id}/participants ✔️ ✔️ ➖ POST /api/{session}/groups/{id}/participants/add ✔️ ✔️ ➖ POST /api/{session}/groups/{id}/participants/remove ✔️ ✔️ ➖ POST /api/{session}/groups/{id}/admin/promote ✔️ ✔️ ➖ POST /api/{session}/groups/{id}/admin/demote ✔️ ✔️ ➖ WEBJS NOWEB VENOM Presence POST /api/{session}/presence ✔️ ✔️ ➖ GET /api/{session}/presence ➖ ✔️ ➖ GET /api/{session}/presence/{chatId} ➖ ✔️ ➖ POST /api/{session}/presence/{chatId}/subscribe ➖ ✔️ ➖ Other GET /api/version ➖ ✔️ ➖ GET /health ✔️ ✔️ ✔️ Webhooks #Webhooks WEBJS NOWEB VENOM message ✔️ ✔️ ✔️ message with files ✔️ ✔️ ✔️ message.reaction ✔️ ✔️ ➖ message.any ✔️ ✔️ ✔️ message.ack ✔️ ✔️ ✔️ message.revoked ✔️ ➖ ➖ state.change ✔️ ✔️ ✔️ group.join ✔️ ✔️ ✔️ group.leave ✔️ ➖ ➖ presence.update ➖ ✔️ ➖ poll.vote ➖ ✔️ ➖ poll.vote.failed ➖ ✔️ ➖ `}),e.add({id:20,href:"/docs/how-to/presence/",title:"✅ Presence",description:"Presence",content:`You can get presence information (online, offline with last seen, typing status) for a contact if they share their presence information.
Possible presence statuses that you can set or get for chats:
online offline typing recording paused resets the chat presence after you were typing Endpoints #See the list of engines that support the feature -\u0026gt;.
Set presence #You can set your global or chat-related presence with POST /api/{session}/presence endpoint
Start typing to a chat (you can use POST /startTyping instead)
POST /api/{session}/presence { \u0026quot;chatId\u0026quot;: \u0026quot;111111111@c.us\u0026quot;, \u0026quot;presence\u0026quot;: \u0026quot;typing\u0026quot; } Clear \u0026ldquo;typing\u0026rdquo; state (you can use POST /stopTyping instead)
POST /api/{session}/presence { \u0026quot;chatId\u0026quot;: \u0026quot;111111111@c.us\u0026quot;, \u0026quot;presence\u0026quot;: \u0026quot;paused\u0026quot; } Set global \u0026ldquo;online\u0026rdquo;, all contacts will see it
POST /api/{session}/presence { \u0026quot;presence\u0026quot;: \u0026quot;online\u0026quot; } 💡 In the multi-device version of WhatsApp - if a desktop client is active, WhatsApp doesn\u0026rsquo;t send push notifications to the device. If you would like to receive said notifications - you need to mark a session\u0026rsquo;s presence as offline.
POST /api/{session}/presence { \u0026quot;presence\u0026quot;: \u0026quot;offline\u0026quot; } Get all chats presence #Here\u0026rsquo;s few notes about fields:
chatId - either contact id (213213213@c.us) or group chat id (1111111111111@g.us). lastSeen - contains Unix timestamps indicating when a participant was last online lastKnownPresence - contains the last known presence status, which can be offline, online, typing, recording, or paused You can get all presence information available for a session by calling GET /api/{session}/presence/. It returns both groups\u0026rsquo; and personal chats\u0026rsquo; presence information.
[ { \u0026quot;id\u0026quot;: \u0026quot;2132132130@c.us\u0026quot;, \u0026quot;presences\u0026quot;: [ { \u0026quot;participant\u0026quot;: \u0026quot;2132132130@c.us\u0026quot;, \u0026quot;lastKnownPresence\u0026quot;: \u0026quot;offline\u0026quot;, \u0026quot;lastSeen\u0026quot;: 1686719326 } ] }, { \u0026quot;id\u0026quot;: \u0026quot;11111111111111111111111@g.us\u0026quot;, \u0026quot;presences\u0026quot;: [ { \u0026quot;participant\u0026quot;: \u0026quot;11111111111111111111111@g.us\u0026quot;, \u0026quot;lastKnownPresence\u0026quot;: \u0026quot;online\u0026quot;, \u0026quot;lastSeen\u0026quot;: null }, { \u0026quot;participant\u0026quot;: \u0026quot;2132132130@c.us\u0026quot;, \u0026quot;lastKnownPresence\u0026quot;: \u0026quot;offline\u0026quot;, \u0026quot;lastSeen\u0026quot;: 1686719326 } ] } ] Get chat presence #To get presence information for a single chat - call GET /api/{session}/presence/{chatId}. For a group, you\u0026rsquo;ll get participants\u0026rsquo; statuses.
{ \u0026quot;id\u0026quot;: \u0026quot;2132132130@c.us\u0026quot;, \u0026quot;presences\u0026quot;: [ { \u0026quot;participant\u0026quot;: \u0026quot;2132132130@c.us\u0026quot;, \u0026quot;lastKnownPresence\u0026quot;: \u0026quot;online\u0026quot;, \u0026quot;lastSeen\u0026quot;: null } ] } Subscribe to presence #You can subscribe to presence information by calling POST /api/{session}/presence/{chatId}/subscribe request (no body required). You can get later presence information for the chat with above GET endpoints or by listening to presence.update webhook.
Webhooks #See the list of engines that support the feature -\u0026gt;.
presence.update #You can subscribe to presence.update webhook event to get the most recent presence information.
{ \u0026quot;event\u0026quot;: \u0026quot;presence.update\u0026quot;, \u0026quot;session\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;payload\u0026quot;: { \u0026quot;id\u0026quot;: \u0026quot;111111111111111111@g.us\u0026quot;, \u0026quot;presences\u0026quot;: [ { \u0026quot;participant\u0026quot;: \u0026quot;11111111111@c.us\u0026quot;, \u0026quot;lastKnownPresence\u0026quot;: \u0026quot;typing\u0026quot;, \u0026quot;lastSeen\u0026quot;: null } ] }, \u0026quot;engine\u0026quot;: \u0026quot;NOWEB\u0026quot; } `}),e.add({id:21,href:"/docs/how-to/config/",title:"⚙️ Configuration",description:"Configuration",content:`You can configure WhatsApp HTTP API behaviour via environment variables, by adding -e WHATSAPP_VARNAME=value at the begging of the command line or by using other options
docker run -it -e \u0026quot;WHATSAPP_HOOK_EVENTS=*\u0026quot; -e WHATSAPP_HOOK_URL=https://httpbin.org/post devlikeapro/whatsapp-http-api It\u0026rsquo;s not necessary to always run such a long command - you can save all data in docker-compose.yaml file as described on How to deploy page -\u0026gt;.
Environment variables #The following environment variables can be used to configure the WAHA.
Common #DEBUG=1: Set this variable to any value to enable debug and verbose logs. You can also do it for a specific session by setting config.debug field to true when starting a session. WHATSAPP_API_PORT=3000: The port number that the HTTP server will listen on. The default value is 3000. WHATSAPP_API_HOSTNAME=localhost: The hostname for the HTTP server. The default value is localhost. Sessions #WHATSAPP_RESTART_ALL_SESSIONS=True: Set this variable to True to start all STOPPED sessions after container restarts. By default, this variable is set to False. Please note that this will start all STOPPED sessions, not just the sessions that were working before the restart. You can maintain the session list by using POST /api/session/stop with the logout: True parameter or by calling POST /api/session/logout to remove STOPPED sessions. You can see all sessions, including STOPPED sessions, in the GET /api/sessions/all=True response. WHATSAPP_START_SESSION=session1,session2: This variable can be used to start sessions with the specified names right after launching the API. Separate session names with a comma. Also read more about Sessions -\u0026gt; Also read more about Session Storages on the dedicated page -\u0026gt; Swagger #WHATSAPP_SWAGGER_CONFIG_ADVANCED=true - enables advanced configuration options for Swagger documentation - you can customize host, port and base URL for the requests. Disabled by default. WHATSAPP_SWAGGER_ENABLED=false - disables Swagger documentation. Enabled by default. Available in WAHA Plus only. WHATSAPP_SWAGGER_USERNAME=admin and WHATSAPP_SWAGGER_PASSWORD=admin - these variables can be used to protect the Swagger panel with admin / admin credentials. This does not affect API access. Available in WAHA Plus only. Read more about Swagger configuration on Swagger page -\u0026gt;.
Proxy #Global proxy configuration #If you need to use a proxy, you can set the following environment variables:
WHATSAPP_PROXY_SERVER=localhost:3128: Use this variable to set the proxy server in the format host:port, without http or https. WHATSAPP_PROXY_SERVER_USERNAME=username and WHATSAPP_PROXY_SERVER_PASSWORD=password: Use these variables to set up credentials for the proxy. WHATSAPP_PROXY_SERVER_LIST=host1.example.com:3138,host2.example.com:3138: Use this variable to set a comma-separated list of addresses to use, using a round-robin algorithm to choose the server for the session. WHATSAPP_PROXY_SERVER_INDEX_PREFIX=proxy-: Use this variable to parse the session name for the prefix and find the appropriate session. For example, if you have set WHATSAPP_PROXY_SERVER_LIST=host-first:80,host-second:80,host-third:80 and WHATSAPP_PROXY_SERVER_INDEX_PREFIX=proxy- and you run proxy-3 session, the host-third:80 proxy will be chosen for that session. This is a way to select a proxy from while you start session. Session proxy configuration #You can configure proxy when you start session by setting config.proxy fields. Read more about it on Session page -\u0026gt;.
Keep in mind that session\u0026rsquo;s proxy configuration takes precedence over proxy configuration set by environment variables!
Security #Security is available in WAHA Plus only.
WHATSAPP_API_KEY=mysecret: If you set this variable, you must include the X-Api-Key: mysecret header in all requests to the API. This will protect the API with a secret code. WHATSAPP_SWAGGER_USERNAME=admin and WHATSAPP_SWAGGER_PASSWORD=admin: These variables can be used to protect the Swagger panel with admin / admin credentials. This does not affect API access. Read more about security settings for Swagger and API on Security page -\u0026gt;.
Files #Files configuration is available in WAHA Plus only.
The following environment variables can be used to configure the file storage options for the WAHA:
WHATSAPP_FILES_MIMETYPES: This variable can be used to download only specific mimetypes from messages. By default, all files are downloaded. The mimetypes must be separated by a comma, without spaces. For example: audio,image/png,image/gif. To choose a specific type, use a prefix (like audio,image). See usage below. WHATSAPP_DOWNLOAD_MEDIA=true - this variable can be used to completely disable downloading media files. By default, all files are downloaded. Set this variable to WHATSAPP_DOWNLOAD_MEDIA=false to disable downloading media files. Under the hood, it sets WHATSAPP_FILES_MIMETYPES=mimetype/ignore-all-media to ignore all media files. WHATSAPP_FILES_LIFETIME: This variable can be used to set the time (in seconds) after which files will be removed to free up space. The default value is 180. Set this variable to 0 to disable the file lifetime. WHATSAPP_FILES_FOLDER: This variable can be used to set the folder where files from chats (images, voice messages) will be stored. The default value is /tmp/whatsapp-files. The folder must be mounted to the host machine to keep the files between container restarts. Read more about how to persist files -\u0026gt; Also read more about Media Storages on the dedicated page -\u0026gt; 💡 Even if WAHA doesn\u0026rsquo;t process the message media because of WHATSAPP_FILES_MIMETYPES or WHATSAPP_DOWNLOAD_MEDIA you\u0026rsquo;ll get a webhook event with hasMedia: True field, but with no media.url.
{ \u0026quot;event\u0026quot;: \u0026quot;message\u0026quot;, \u0026quot;session\u0026quot;: \u0026quot;default\u0026quot;, \u0026quot;payload\u0026quot;: { \u0026quot;hasMedia\u0026quot;: true, \u0026quot;media\u0026quot;: { \u0026quot;url\u0026quot;: null, \u0026quot;mimetype\u0026quot;: \u0026quot;video/mp4\u0026quot;, \u0026quot;filename\u0026quot;: null } } } Health Check #Health check is available in WAHA Plus only.
The following environment variables can be used to configure the Health Check -\u0026gt;:
WHATSAPP_HEALTH_MEDIA_FILES_THRESHOLD_MB - the threshold in MB for the media files storage. The default value is 100. WHATSAPP_HEALTH_SESSIONS_FILES_THRESHOLD_MB - the threshold in MB for the sessions files storage. The default value is 100. WHATSAPP_HEALTH_MONGODB_TIMEOUT - the timeout in milliseconds for the MongoDB health check. The default value is 5000. Examples #Debug Mode #To enable debug mode, set the DEBUG environment variable to any value:
DEBUG=1 Protecting the API with a Secret Code #To protect the API with a secret code, set the WHATSAPP_API_KEY environment variable to your secret code:
WHATSAPP_API_KEY=mysecret You must include the X-Api-Key: mysecret header in all requests to the API.
Starting Sessions Automatically #To start sessions automatically when the API is launched, set the WHATSAPP_START_SESSION environment variable to a comma-separated list of session names:
WHATSAPP_START_SESSION=session1,session2 Restarting All Sessions #To start all STOPPED sessions after container restarts, set the WHATSAPP_RESTART_ALL_SESSIONS environment variable to True:
WHATSAPP_RESTART_ALL_SESSIONS=True Protecting the Swagger Panel #To protect the Swagger panel with admin / admin credentials, set the WHATSAPP_SWAGGER_USERNAME and WHATSAPP_SWAGGER_PASSWORD environment variables:
WHATSAPP_SWAGGER_USERNAME=admin WHATSAPP_SWAGGER_PASSWORD=admin Downloading Specific Mimetypes #To download only specific mimetypes from messages, set the WHATSAPP_FILES_MIMETYPES environment variable to a comma-separated list of mimetypes:
WHATSAPP_FILES_MIMETYPES=audio,image/png,image/gif Disable Downloading Media Files #To disable downloading media files, set the WHATSAPP_DOWNLOAD_MEDIA environment variable to false:
WHATSAPP_DOWNLOAD_MEDIA=false Setting the File Lifetime #To set the time (in seconds) after which files will be removed to free up space, set the WHATSAPP_FILES_LIFETIME environment variable:
WHATSAPP_FILES_LIFETIME=300 Setting the File Storage Folder #To set the folder where files from chats (images, voice messages) will be stored, set the WHATSAPP_FILES_FOLDER environment variable:
WHATSAPP_FILES_FOLDER=/home/user/whatsapp-files `}),e.add({id:22,href:"/docs/how-to/other/",title:"🛸 Other",description:"Other features and API",content:`This page provides useful information about other features and API that are not covered in the other sections.
Health Check #Health check is available in WAHA Plus only.
The health check endpoint is used to determine the health of the service.
GET /health It returns a 200 OK status code if the service is healthy.
The response format:
{ \u0026quot;status\u0026quot;: \u0026quot;ok\u0026quot;, \u0026quot;info\u0026quot;: { \u0026quot;metric1\u0026quot;: { \u0026quot;field\u0026quot;: \u0026quot;value\u0026quot; }, \u0026quot;metric2\u0026quot;: { \u0026quot;field\u0026quot;: \u0026quot;value\u0026quot; } }, \u0026quot;error\u0026quot;: {}, \u0026quot;details\u0026quot;: {} } Where:
status: 'error' | 'ok' | 'shutting_down' - If any health indicator failed the status will be 'error'. If the app is shutting down but still accepting HTTP requests, the health check will have the 'shutting_down' status. info: Object containing information of each health indicator which is of status 'up', or in other words \u0026ldquo;healthy\u0026rdquo;. error: Object containing information of each health indicator which is of status 'down', or in other words \u0026ldquo;unhealthy\u0026rdquo;. details: Object containing detailed information of each health indicator. Health Check Indicators #Few things we check in the health check:
Media files storage space - mediaFiles.space Sessions files storage space - sessionsFiles.space MongoDB connection - mongodb Configuration #The following environment variables can be used to configure the health check:
WHATSAPP_HEALTH_MEDIA_FILES_THRESHOLD_MB - the threshold in MB for the media files storage. The default value is 100. WHATSAPP_HEALTH_SESSIONS_FILES_THRESHOLD_MB - the threshold in MB for the sessions files storage. The default value is 100. WHATSAPP_HEALTH_MONGODB_TIMEOUT - the timeout in milliseconds for the MongoDB health check. The default value is 5000. Examples #Healthy response when you use Local Storage for session authentication:
200 OK
{ \u0026quot;status\u0026quot;: \u0026quot;ok\u0026quot;, \u0026quot;info\u0026quot;: { \u0026quot;mediaFiles.space\u0026quot;: { \u0026quot;status\u0026quot;: \u0026quot;up\u0026quot;, \u0026quot;path\u0026quot;: \u0026quot;/tmp/whatsapp-files\u0026quot;, \u0026quot;diskPath\u0026quot;: \u0026quot;/\u0026quot;, \u0026quot;free\u0026quot;: 132979355648, \u0026quot;threshold\u0026quot;: 104857600 }, \u0026quot;sessionsFiles.space\u0026quot;: { \u0026quot;status\u0026quot;: \u0026quot;up\u0026quot;, \u0026quot;path\u0026quot;: \u0026quot;/app/.sessions\u0026quot;, \u0026quot;diskPath\u0026quot;: \u0026quot;/\u0026quot;, \u0026quot;free\u0026quot;: 132979355648, \u0026quot;threshold\u0026quot;: 104857600 } }, \u0026quot;error\u0026quot;: {}, \u0026quot;details\u0026quot;: { \u0026quot;mediaFiles.space\u0026quot;: { \u0026quot;status\u0026quot;: \u0026quot;up\u0026quot;, \u0026quot;path\u0026quot;: \u0026quot;/tmp/whatsapp-files\u0026quot;, \u0026quot;diskPath\u0026quot;: \u0026quot;/\u0026quot;, \u0026quot;free\u0026quot;: 132979355648, \u0026quot;threshold\u0026quot;: 104857600 }, \u0026quot;sessionsFiles.space\u0026quot;: { \u0026quot;status\u0026quot;: \u0026quot;up\u0026quot;, \u0026quot;path\u0026quot;: \u0026quot;/app/.sessions\u0026quot;, \u0026quot;diskPath\u0026quot;: \u0026quot;/\u0026quot;, \u0026quot;free\u0026quot;: 132979355648, \u0026quot;threshold\u0026quot;: 104857600 } } } Healthy response when you use MongoDB Storage for session authentication:
200 OK
{ \u0026quot;status\u0026quot;: \u0026quot;ok\u0026quot;, \u0026quot;info\u0026quot;: { \u0026quot;mediaFiles.space\u0026quot;: { \u0026quot;status\u0026quot;: \u0026quot;up\u0026quot;, \u0026quot;path\u0026quot;: \u0026quot;/tmp/whatsapp-files\u0026quot;, \u0026quot;diskPath\u0026quot;: \u0026quot;/\u0026quot;, \u0026quot;free\u0026quot;: 132977496064, \u0026quot;threshold\u0026quot;: 104857600 }, \u0026quot;mongodb\u0026quot;: { \u0026quot;status\u0026quot;: \u0026quot;up\u0026quot;, \u0026quot;message\u0026quot;: \u0026quot;Up and running\u0026quot; } }, \u0026quot;error\u0026quot;: {}, \u0026quot;details\u0026quot;: { \u0026quot;mediaFiles.space\u0026quot;: { \u0026quot;status\u0026quot;: \u0026quot;up\u0026quot;, \u0026quot;path\u0026quot;: \u0026quot;/tmp/whatsapp-files\u0026quot;, \u0026quot;diskPath\u0026quot;: \u0026quot;/\u0026quot;, \u0026quot;free\u0026quot;: 132977496064, \u0026quot;threshold\u0026quot;: 104857600 }, \u0026quot;mongodb\u0026quot;: { \u0026quot;status\u0026quot;: \u0026quot;up\u0026quot;, \u0026quot;message\u0026quot;: \u0026quot;Up and running\u0026quot; } } } Unhealthy response example
503 Service Unavailable
{ \u0026quot;status\u0026quot;: \u0026quot;error\u0026quot;, \u0026quot;info\u0026quot;: { \u0026quot;mediaFiles.space\u0026quot;: { \u0026quot;status\u0026quot;: \u0026quot;up\u0026quot;, \u0026quot;path\u0026quot;: \u0026quot;/tmp/whatsapp-files\u0026quot;, \u0026quot;diskPath\u0026quot;: \u0026quot;/\u0026quot;, \u0026quot;free\u0026quot;: 132976623616, \u0026quot;threshold\u0026quot;: 104857600 } }, \u0026quot;error\u0026quot;: { \u0026quot;mongodb\u0026quot;: { \u0026quot;status\u0026quot;: \u0026quot;down\u0026quot;, \u0026quot;error\u0026quot;: \u0026quot;Timeout\u0026quot; } }, \u0026quot;details\u0026quot;: { \u0026quot;mediaFiles.space\u0026quot;: { \u0026quot;status\u0026quot;: \u0026quot;up\u0026quot;, \u0026quot;path\u0026quot;: \u0026quot;/tmp/whatsapp-files\u0026quot;, \u0026quot;diskPath\u0026quot;: \u0026quot;/\u0026quot;, \u0026quot;free\u0026quot;: 132976623616, \u0026quot;threshold\u0026quot;: 104857600 }, \u0026quot;mongodb\u0026quot;: { \u0026quot;status\u0026quot;: \u0026quot;down\u0026quot;, \u0026quot;error\u0026quot;: \u0026quot;Timeout\u0026quot; } } } Get version #Returns the version of the installed docker image.
GET /api/version { \u0026quot;version\u0026quot;: \u0026quot;2024.2.3\u0026quot;, \u0026quot;engine\u0026quot;: \u0026quot;NOWEB\u0026quot;, \u0026quot;tier\u0026quot;: \u0026quot;PLUS\u0026quot;, \u0026quot;browser\u0026quot;: \u0026quot;/usr/bin/google-chrome-stable\u0026quot; } `}),e.add({id:23,href:"/docs/how-to/deploy/",title:"🚀 Deploy",description:"How to deploy WAHA",content:`This page provides useful information to assist you in deploying the project. It includes tips on how to avoid running long command lines, how to view logs, and other helpful advice.
How to Use Docker Compose #Docker Compose is a tool that allows you to define and run multi-container Docker applications. It simplifies the process of managing multiple containers and their dependencies. In this topic, we will walk you through how to use Docker Compose with the WhatsApp HTTP API.
Prerequisites #Before you start, you need to have Docker and Docker Compose installed on your machine. You can download Docker from the official website here. Docker Compose is included with Docker Desktop for Windows and macOS, but for Linux, you need to install it separately. You can find the installation instructions here.
Getting Started #To get started, you need to clone the docker-compose.yaml file to your local machine. Open your terminal and run the following command:
wget https://raw.githubusercontent.com/devlikeapro/whatsapp-http-api/core/docker-compose.yaml Running the WhatsApp HTTP API Service #To start the whatsapp-http-api service, run the following command:
docker-compose up -d whatsapp-http-api This will start the container in detached mode and map port 3000 to 3000 on the host machine.
To stop the service, run the command:
docker-compose down This will stop and remove the container.
To restart the service, run the command:
docker-compose restart whtasapp-http-api This will restart the container.
Viewing the Logs #To view the logs for the whatsapp-http-api service, run the command:
docker-compose logs -f whatsapp-http-api This will show the logs in real-time. To view the logs for the whatsapp-http-api-plus service, replace whatsapp-http-api with whatsapp-http-api-plus.
To view the logs for a specific period, run the command:
docker-compose logs --since \u0026lt;time\u0026gt; Replace \u0026lt;time\u0026gt; with the time period you want to view the logs for. For example, docker-compose logs --since 1h will show the logs for the past hour.
Using the WhatsApp HTTP API Services #There are two services provided in the docker-compose.yml file - whatsapp-http-api and whatsapp-http-api-plus. It is important to note that these services must not be run at the same time. By default, the whatsapp-http-api service will be used.
To use the whatsapp-http-api-plus service, you need to specify it in the command.
`}),e.add({id:24,href:"/docs/waha-hub/",title:"WAHA Hub",description:"WAHA Hub",content:""}),e.add({id:25,href:"/docs/waha-hub/introduction/",title:"WAHA Hub",description:"WAHA Hub",content:` ⚠️
WAHA Hub in DEVELOPMENT yet\u0026hellip;
Consider using Dashboard for managing your sessions.
Subscribe to WAHA PRO to speed up the development!
⚠️
Overview #WAHA Hub - central management solution to help your build reliable infrastructure with multiple WAHA servers!
While Dashboard is a UI to manage your WhatsApp sessions on single server, WAHA Hub is a central management server to control and manage multiple servers in a single place.
👉 WAHA Hub is available in WAHA PRO version only.
See full size image Features #Control and manage multiple servers in a single Hub. Monitor the status of your servers And more! `}),e.add({id:26,href:"/docs/how-to/security/",title:"🔒 Security",description:"Security",content:`💡 Do not expose WhatsApp HTTP API on public networks! We do not recommend exposing the API on any public networks!
Either protect the API with Api Key or deny access by using firewalls.
👉 Security options are available in WAHA Plus version only.
Swagger Security #Username and password #If you want to hide the project Swagger panel under the password - run the following command to hide under admin/admin login and password.
docker run -it -e WHATSAPP_SWAGGER_USERNAME=admin -eWHATSAPP_SWAGGER_PASSWORD=admin devlikeapro/whatsapp-http-api-plus Open http://localhost:3000/ and enter admin / admin in the inputs:
👉 Protecting Swagger under the password does not protect your API from other request! Use both techniques to protect your API and Swagger! Disable Swagger #You also can hide swagger completely by setting WHATSAPP_SWAGGER_ENABLED=false environment variable.
👉 Disabling Swagger does not protect the API, please use API security as well Dashboard Security #When running WAHA you can set the following environment variables to configure the dashboard:
WAHA_DASHBOARD_ENABLED=true - enable or disable the dashboard, by default true. Set to false to disable the dashboard. WAHA_DASHBOARD_USERNAME=waha - username used to log in, by default waha. WAHA_DASHBOARD_PASSWORD=waha - password used to log in, by default waha. Read more about Dashboard -\u0026gt;
API security #You can protect the API by requiring Api Key in a request\u0026rsquo;s headers.
👉 Api Key does not hide your Swagger documentation. Please have a look at the previous section to find how to hide Swagger under the password. Set Api Key #Set WHATSAPP_API_KEY=yoursecretkey environment variable for that:
docker run -it -e WHATSAPP_API_KEY=yoursecretkey devlikeapro/whatsapp-http-api-plus Use Api-Key in Swagger #After you set api key - to authorize on swagger use Authorize button at the top: Add X-Api-Key header #To authorize requests - set X-Api-Key header to yoursecretkey for all requests that go to WAHA.
Python #Example for Python requests library:
import requests headers = { 'Content-type': 'application/json', 'X-Api-Key': 'yoursecretkey', } requests.get(\u0026quot;http://localhost:3000/api/sessions\u0026quot;, headers=headers) Webhook security #To make sure that you get a webhook from your WAHA instance - you can use HMAC authentication. Read more about it on Webhooks page -\u0026gt;
`}),e.add({id:27,href:"/docs/how-to/storages/",title:"🗄️ Storages",description:"Storages",content:`There are several storages that are used by the WAHA, below you can find the list of them and the way to configure them.
Sessions - used to store the session data, such as authentication information, configuration, and other data that is required to keep the session alive and connected to WhatsApp. Media - used to store the media files, such as images, videos, and other files that are received from the WhatsApp instance. Storages are available in WAHA Plus only.
Sessions #The \u0026ldquo;Sessions\u0026rdquo; storage is used to store the session data, such as authentication information, configuration, and other data that is required to keep the session alive and connected to WhatsApp.
If you want to save your session and do not scan QR code everytime when you launch WAHA - connect the session storage to the container.
For the session storage, you can use the following options:
Local (files) - the default option, stores the session data in the local storage using files. MongoDB - stores the session data in the MongoDB database. The following table shows the compatibility of the session storage with the engines:
WEBJS NOWEB VENOM Local (files) ✔️ ✔️ ✔️ MongoDB ✔️ ✔️ ➖ Sessions - Local (files) #By default, the WAHA uses the local storage (files) to store the session data.
💡 It's well tested solution even for production In order to use the local storage and save the session data between the container restarts, you need to mount the volume to the /app/.sessions directory using the -v option in docker run command:
-v /path/to/on/host/.sessions:/app/.sessions The full command to run the WAHA with the local storage and save the session data in the current directory and .sessions directory:
docker run -v \`pwd\`/.sessions:/app/.sessions -p 3000:3000/tcp devlikeapro/whatsapp-http-api-plus This is the only action you need to do to use the local storage - all session data will be available between the container restarts.
How it works #In the host machine, the session data will be stored in the current directory in the .sessions directory.
Under the hood, the WAHA stores the session data in the following directory structure:
.sessions/{engine}/{sessionName}/... when you \u0026ldquo;logout\u0026rdquo; the session using POST /api/sessions/logout or providing logout: True in POST /api/sessions/stop it removes the directory with the session data.
Health Check #The WAHA Plus provides the health check endpoint that checks the local storage.
Sessions - MongoDB #If you want to use the MongoDB to store the session data, you need to:
Start the MongoDB server (using docker or any other way). You can either start your own MongoDB server or use the one of cloud providers, like MongoDB Atlas. Set WHATSAPP_SESSIONS_MONGO_URL=mongodb://user:password@host:port/ environment variable to connect to the MongoDB server. We recommend using your own MongoDB server as close as possible to WAHA server for the best performance and security reasons.
💡 For WEBJS engine it can take up to 1 minute to save credentials in Mongo Database Example #First, you need to start MongoDB server:
docker run -d -p 27017:27017 --name mongodb mongo Then, you need to run the WAHA with the WHATSAPP_SESSIONS_MONGO_URL environment variable (please note using --network host option as well)
docker run -e WHATSAPP_SESSIONS_MONGO_URL=mongodb://localhost:27017/ --network host devlikeapro/whatsapp-http-api-plus This is the only action you need to do to use the MongoDB storage - all session authentication data will be stored in the MongoDB database.
How it works #When you start a session, it stores the session data in the MongoDB database in two databases:
waha_{engine} - it saves the session configuration in sessions collection with name: {sessionName} field. waha_{engine}_{sessionName} - it saves the WhatsApp authentication data and other session data. Each engine saves different data in this database. When you \u0026ldquo;logout\u0026rdquo; the session using POST /api/sessions/logout or providing logout: True in POST /api/sessions/stop it removes those databases or elements from them.
For dealing and troubleshooting with the MongoDB, we recommend using MongoDB Compass.
MongoDB Atlas #If you use the MongoDB Atlas you must grant Atlas Admin role in Security =\u0026gt; Database Access before you connect to the database.
For production please consider running the MongoDB server close to the WAHA server for the best performance and security reasons.
Health Check #The WAHA Plus provides the health check endpoint that checks the MongoDB connection.
Media #When your WhatsApp instance receives media files, it stores them in the media storage.
You can use the following options to store the media files:
Local - the default option, stores the media files in the local storage using files. S3 - stores the media files in the S3 storage. Read more about available configuration options -\u0026gt;.
The following table shows the compatibility of the storage with the engines:
WEBJS NOWEB VENOM Local ✔️ ✔️ ✔️ S3 🕒 🕒 ➖ Media - Local #By default, the WAHA uses the local file storage to store the media files and those files has a short lifetime (180 seconds). So it\u0026rsquo;s your app responsibility to download and store them in a safe persistent place during this time.
Save media files between the container restarts #If you want to use the local storage and save the media files between the container restarts for a long time - you need to:
Specify a dedicated folder to store the media files using WHATSAPP_FILES_FOLDER=/app/.media environment variable Disable automatic media files cleanup using WHATSAPP_FILES_LIFETIME=0 environment variable Connect the volume to the specified folder using the -v /path/to/files/on/host:/app/.media option in docker run command to the folder specified in WHATSAPP_FILES_FOLDER environment variable. Read more about available configuration options -\u0026gt;.
Here\u0026rsquo;s all the steps in one command:
docker run -v /path/to/on/host/.media:/app/.media -e WHATSAPP_FILES_FOLDER=/app/.media -e WHATSAPP_FILES_LIFETIME=0 -p 3000:3000/tcp devlikeapro/whatsapp-http-api-plus Health Check #The WAHA Plus provides the health check endpoint that checks the local storage.
Media - S3 #If you\u0026rsquo;re interested in using the S3 storage or any other cloud storage (like self-hosted S3 - Minio), please create an issue or vote for the S3 issue in the GitHub repository.
`}),e.add({id:28,href:"/docs/examples/",title:"🧩 Examples",description:"Examples for different languages.",content:""}),e.add({id:29,href:"/docs/how-to/plus-version/",title:"➕ WAHA Plus",description:"WAHA Plus",content:`Overview #WAHA is distributed in two versions:
Core the basic version that meet almost 80% people’s needs. 100% free and open source. Plus the version with advanced messages, security, and reliability features. Tiers #You support the project and get WAHA Plus by donating to the project on one of the platforms.
See tiers and available platforms on Pricing page -\u0026gt;
Patron Portal #After subscribing on Patreon or Boosty, you will get access to the WAHA Patron Portal -\u0026gt; where you will get the password to download the Plus image and manage your perks!
Read more about Patron Portal in Patreon -\u0026gt; or Boosty -\u0026gt; posts.
Install Plus #After you get the password, get your login to Docker Hub in Patron Portal -\u0026gt; and run the commands:
docker login -u devlikeapro -p {KEY} docker pull devlikeapro/whatsapp-http-api-plus docker logout Then in all commands use Plus image devlikeapro/whatsapp-http-api-plus instead of Core devlikeapro/whatsapp-http-api.
`}),e.add({id:30,href:"/docs/examples/python/",title:"Python",description:"WhatsApp HTTP API + Python examples.",content:`
We\u0026rsquo;ve created a few examples on how to interact with WAHA WhatsApp HTTP API with Python.
You can find the examples in examples folder on GitHub with detailed instructions in README.md -\u0026gt;
Installation #We assume that you have installed software:
Python 3 Docker Download and start image #First of all, you must run WhatsApp HTTP API locally (which under the hood it runs real WhatsApp Web instance and expose HTTP API for interaction).
Here are the steps from Quick Start:
Download and start WhatsApp HTTP API docker container
# Download the image docker pull devlikeapro/whatsapp-http-api # Run the docker container docker run -it --rm --network=host -e WHATSAPP_HOOK_URL=http://localhost:5000/bot -e \u0026quot;WHATSAPP_HOOK_EVENTS=*\u0026quot; --name whatsapp-http-api devlikeapro/whatsapp-http-api # It prints logs and the last line must be # WhatsApp HTTP API is running on: http://[::1]:3000 Download image - ARM #If you\u0026rsquo;re using ARM (like Apple Silicon, Apple M1, etc.) - use following commands to download the image
For Core version the command is
# Download the image docker pull devlikeapro/whatsapp-http-api:arm # Rename it, so you can use devlikeapro/whatsapp-http-api image in other place docker tag devlikeapro/whatsapp-http-api:arm devlikeapro/whatsapp-http-api # Run the docker container docker run -it --rm --network=host -e WHATSAPP_HOOK_URL=http://localhost:5000/bot -e \u0026quot;WHATSAPP_HOOK_EVENTS=*\u0026quot; --name whatsapp-http-api devlikeapro/whatsapp-http-api # It prints logs and the last line must be # WhatsApp HTTP API is running on: http://[::1]:3000 Start session and scan QR #Open Swagger API in the browser http://localhost:3000/ Start session and scan QR code in swagger Find POST /api/session/start request press Try it out and Execute it with default session name Find GET /api/screenshot and execute it - it must show QR code Scan QR code on your mobile WhatsApp application (that installed on your phone) Execute GET /api/screenshot once again - it must show the screenshot from WhatsApp Web. Send test text message - find POST /api/sendText and execute it with payload (change 12132132130 in the chatId to phone number that is registered in WhatsApp). { \u0026quot;chatId\u0026quot;: \u0026quot;12132132130@c.us\u0026quot;, \u0026quot;text\u0026quot;: \u0026quot;Hi there!\u0026quot;, \u0026quot;session\u0026quot;: \u0026quot;default\u0026quot; } If you see Hi there! message then you\u0026rsquo;re ready to run bots!
WhatsApp Echo Bot #The WhatsApp Echo Bot is a sample flask webhook server application that echoes back to you whatever you send it. It can serve as a basic reference for how to set up webhooks and reply to incoming messages.
# Clone the git repository with example git clone https://github.com/devlikeapro/whatsapp-http-api.git # Open python example folder cd whatsapp-http-api/examples/python # Install requirements python -mpip install -r requirements.txt # Run the bot FLASK_APP=whatsapp_echo_bot.py flask run Open http://127.0.0.1:5000/bot - if you see WhatsApp Echo Bot is ready! then the bot is ready to receive message!
Send message to the WhatsApp (that you used to scan QR code) and it\u0026rsquo;ll echo text back to you!
WhatsApp Download Files Bot #The WhatsApp Download Image Bot downloads all files people send to your WhatsApp and log the path for the file.
The bot works only with WAHA Plus version available with donations. Visit read more about difference between Core and Plus versions.
Download WAHA Plus version:
# Download the image docker pull devlikeapro/whatsapp-http-api-plus # Run the docker container docker run -it --rm --network=host -e WHATSAPP_HOOK_URL=http://localhost:5000/bot -e \u0026quot;WHATSAPP_HOOK_EVENTS=*\u0026quot; --name whatsapp-http-api devlikeapro/whatsapp-http-api-plus Run the WhatsApp Download Files bot:
# Clone the git repository with example git clone https://github.com/devlikeapro/whatsapp-http-api.git # Open python example folder cd whatsapp-http-api/examples/python # Install requirements python -mpip install -r requirements.txt # Run the bot FLASK_APP=whatsapp_download_files_bot.py flask run Open http://127.0.0.1:5000/bot - if you see WhatsApp Download Files Bot! then the bot is ready to receive message with files!
`}),e.add({id:31,href:"/docs/examples/kotlin/",title:"Kotlin",description:"WhatsApp HTTP API + Kotlin examples.",content:`
We\u0026rsquo;ve created a few examples on how to interact with WAHA WhatsApp HTTP API with Kotlin (ktor).
You can find the examples in examples folder on GitHub with detailed instructions in README.md -\u0026gt;
Installation #We assume that you have installed software:
Kotlin + JVM Docker Download and start image #First of all, you must run WhatsApp HTTP API locally (which under the hood it runs real WhatsApp Web instance and expose HTTP API for interaction).
Here are the steps from Quick Start:
Download and start WhatsApp HTTP API docker container
# Download the image docker pull devlikeapro/whatsapp-http-api # Run the docker container docker run -it --rm --network=host -e WHATSAPP_HOOK_URL=http://localhost:5000/bot -e \u0026quot;WHATSAPP_HOOK_EVENTS=*\u0026quot; --name whatsapp-http-api devlikeapro/whatsapp-http-api # It prints logs and the last line must be # WhatsApp HTTP API is running on: http://[::1]:3000 Download image - ARM #If you\u0026rsquo;re using ARM (like Apple Silicon, Apple M1, etc.) - use following commands to download the image
For Core version the command is
# Download the image docker pull devlikeapro/whatsapp-http-api:arm # Rename it, so you can use devlikeapro/whatsapp-http-api image in other place docker tag devlikeapro/whatsapp-http-api:arm devlikeapro/whatsapp-http-api # Run the docker container docker run -it --rm --network=host -e WHATSAPP_HOOK_URL=http://localhost:5000/bot -e \u0026quot;WHATSAPP_HOOK_EVENTS=*\u0026quot; --name whatsapp-http-api devlikeapro/whatsapp-http-api # It prints logs and the last line must be # WhatsApp HTTP API is running on: http://[::1]:3000 Start session and scan QR #Open Swagger API in the browser http://localhost:3000/ Start session and scan QR code in swagger Find POST /api/session/start request press Try it out and Execute it with default session name Find GET /api/screenshot and execute it - it must show QR code Scan QR code on your mobile WhatsApp application (that installed on your phone) Execute GET /api/screenshot once again - it must show the screenshot from WhatsApp Web. Send test text message - find POST /api/sendText and execute it with payload (change 12132132130 in the chatId to phone number that is registered in WhatsApp). { \u0026quot;chatId\u0026quot;: \u0026quot;12132132130@c.us\u0026quot;, \u0026quot;text\u0026quot;: \u0026quot;Hi there!\u0026quot;, \u0026quot;session\u0026quot;: \u0026quot;default\u0026quot; } If you see Hi there! message then you\u0026rsquo;re ready to run bots!
WhatsApp Echo Bot #The WhatsApp Echo Bot is a sample ktor webhook server application that echoes back to you whatever you send it. It can serve as a basic reference for how to set up webhooks and reply to incoming messages.
# Clone the git repository with example git clone https://github.com/devlikeapro/waha-kotlin.git # Build and run the app ./gradlew build ./gradlew run Open http://127.0.0.1:5000/bot - if you see WhatsApp Echo Bot is ready! then the bot is ready to receive message!
Send message to the WhatsApp (that you used to scan QR code) and it\u0026rsquo;ll echo text back to you!
`}),e.add({id:32,href:"/docs/examples/live-helper-chat/",title:"Live Helper Chat",description:"WhatsApp HTTP API + Live Helper Chat integration.",content:` Open source Live Helper Chat -\u0026gt; system with mobile app, Bot, AI, Voice \u0026amp; Video \u0026amp; ScreenShare.
👉 Please checkout WhatsApp WAHA integration on Live Helper Chat -\u0026gt; documentation for more details how to integrate WhatsApp with Live Helper Chat.
`}),e.add({id:33,href:"/docs/",title:"Docs",description:"Docs Doks.",content:""}),search.addEventListener("input",t,!0);function t(){const s=5;var n=this.value,o=e.search(n,{limit:s,enrich:!0});const t=new Map;for(const e of o.flatMap(e=>e.result)){if(t.has(e.doc.href))continue;t.set(e.doc.href,e.doc)}if(suggestions.innerHTML="",suggestions.classList.remove("d-none"),t.size===0&&n){const e=document.createElement("div");e.innerHTML=`No results for "<strong>${n}</strong>"`,e.classList.add("suggestion__no-results"),suggestions.appendChild(e);return}for(const[r,a]of t){const n=document.createElement("div");suggestions.appendChild(n);const e=document.createElement("a");e.href=r,n.appendChild(e);const o=document.createElement("span");o.textContent=a.title,o.classList.add("suggestion__title"),e.appendChild(o);const i=document.createElement("span");if(i.textContent=a.description,i.classList.add("suggestion__description"),e.appendChild(i),suggestions.appendChild(n),suggestions.childElementCount==s)break}}})()