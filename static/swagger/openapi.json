{
  "openapi": "3.1.0",
  "paths": {
    "/api/{session}/auth/qr": {
      "get": {
        "operationId": "AuthController_getQR",
        "summary": "Get QR code for pairing WhatsApp API.",
        "parameters": [
          {
            "name": "session",
            "required": true,
            "in": "path",
            "schema": {
              "default": "default"
            },
            "description": "Session name"
          },
          {
            "name": "format",
            "required": true,
            "in": "query",
            "schema": {
              "default": "image",
              "enum": [
                "image",
                "raw"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "image/png": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Base64File"
                    },
                    {
                      "$ref": "#/components/schemas/QRCodeValue"
                    }
                  ]
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "üîë Auth"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/{session}/auth/request-code": {
      "post": {
        "operationId": "AuthController_requestCode",
        "summary": "Request authentication code.",
        "parameters": [
          {
            "name": "session",
            "required": true,
            "in": "path",
            "schema": {
              "default": "default"
            },
            "description": "Session name"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestCodeRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "üîë Auth"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/sessions": {
      "get": {
        "operationId": "SessionsController_list",
        "summary": "List all sessions",
        "parameters": [
          {
            "name": "all",
            "required": false,
            "in": "query",
            "example": false,
            "description": "Return all sessions, including those that are in the STOPPED state.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SessionInfo"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "üñ•Ô∏è Sessions"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "post": {
        "operationId": "SessionsController_create",
        "summary": "Create a session",
        "description": "Create session a new session (and start it at the same time if required).",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SessionCreateRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionDTO"
                }
              }
            }
          }
        },
        "tags": [
          "üñ•Ô∏è Sessions"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/sessions/{session}": {
      "get": {
        "operationId": "SessionsController_get",
        "summary": "Get session information",
        "parameters": [
          {
            "name": "session",
            "required": true,
            "in": "path",
            "schema": {
              "default": "default"
            },
            "description": "Session name"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionInfo"
                }
              }
            }
          }
        },
        "tags": [
          "üñ•Ô∏è Sessions"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "put": {
        "operationId": "SessionsController_update",
        "summary": "Update a session",
        "description": "",
        "parameters": [
          {
            "name": "session",
            "required": true,
            "in": "path",
            "schema": {
              "default": "default"
            },
            "description": "Session name"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SessionUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionDTO"
                }
              }
            }
          }
        },
        "tags": [
          "üñ•Ô∏è Sessions"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "delete": {
        "operationId": "SessionsController_delete",
        "summary": "Delete the session",
        "description": "Delete the session with the given name. Stop and logout as well. Idempotent operation.",
        "parameters": [
          {
            "name": "session",
            "required": true,
            "in": "path",
            "schema": {
              "default": "default"
            },
            "description": "Session name"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "üñ•Ô∏è Sessions"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/sessions/{session}/me": {
      "get": {
        "operationId": "SessionsController_getMe",
        "summary": "Get information about the authenticated account",
        "parameters": [
          {
            "name": "session",
            "required": true,
            "in": "path",
            "schema": {
              "default": "default"
            },
            "description": "Session name"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MeInfo"
                }
              }
            }
          }
        },
        "tags": [
          "üñ•Ô∏è Sessions"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/sessions/{session}/start": {
      "post": {
        "operationId": "SessionsController_start",
        "summary": "Start the session",
        "description": "Start the session with the given name. The session must exist. Idempotent operation.",
        "parameters": [
          {
            "name": "session",
            "required": true,
            "in": "path",
            "schema": {
              "default": "default"
            },
            "description": "Session name"
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionDTO"
                }
              }
            }
          }
        },
        "tags": [
          "üñ•Ô∏è Sessions"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/sessions/{session}/stop": {
      "post": {
        "operationId": "SessionsController_stop",
        "summary": "Stop the session",
        "description": "Stop the session with the given name. Idempotent operation.",
        "parameters": [
          {
            "name": "session",
            "required": true,
            "in": "path",
            "schema": {
              "default": "default"
            },
            "description": "Session name"
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionDTO"
                }
              }
            }
          }
        },
        "tags": [
          "üñ•Ô∏è Sessions"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/sessions/{session}/logout": {
      "post": {
        "operationId": "SessionsController_logout",
        "summary": "Logout from the session",
        "description": "Logout the session, restart a session if it was not STOPPED",
        "parameters": [
          {
            "name": "session",
            "required": true,
            "in": "path",
            "schema": {
              "default": "default"
            },
            "description": "Session name"
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionDTO"
                }
              }
            }
          }
        },
        "tags": [
          "üñ•Ô∏è Sessions"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/sessions/{session}/restart": {
      "post": {
        "operationId": "SessionsController_restart",
        "summary": "Restart the session",
        "description": "Restart the session with the given name.",
        "parameters": [
          {
            "name": "session",
            "required": true,
            "in": "path",
            "schema": {
              "default": "default"
            },
            "description": "Session name"
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionDTO"
                }
              }
            }
          }
        },
        "tags": [
          "üñ•Ô∏è Sessions"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/sessions/start": {
      "post": {
        "operationId": "SessionsController_DEPRACATED_start",
        "summary": "Upsert and Start session",
        "description": "Create session (if not exists) or update a config (if exists) and start it.",
        "deprecated": true,
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SessionStartDeprecatedRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionDTO"
                }
              }
            }
          }
        },
        "tags": [
          "üñ•Ô∏è Sessions"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/sessions/stop": {
      "post": {
        "operationId": "SessionsController_DEPRECATED_stop",
        "summary": "Stop (and Logout if asked) session",
        "description": "Stop session and Logout by default.",
        "deprecated": true,
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SessionStopDeprecatedRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "üñ•Ô∏è Sessions"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/sessions/logout": {
      "post": {
        "operationId": "SessionsController_DEPRECATED_logout",
        "summary": "Logout and Delete session.",
        "description": "Stop, Logout and Delete session.",
        "deprecated": true,
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SessionLogoutDeprecatedRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "üñ•Ô∏è Sessions"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/{session}/profile": {
      "get": {
        "operationId": "ProfileController_getMyProfile",
        "summary": "Get my profile",
        "parameters": [
          {
            "name": "session",
            "required": true,
            "in": "path",
            "schema": {
              "default": "default"
            },
            "description": "Session name"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MyProfile"
                }
              }
            }
          }
        },
        "tags": [
          "üÜî Profile"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/{session}/profile/name": {
      "put": {
        "operationId": "ProfileController_setProfileName",
        "summary": "Set my profile name",
        "parameters": [
          {
            "name": "session",
            "required": true,
            "in": "path",
            "schema": {
              "default": "default"
            },
            "description": "Session name"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProfileNameRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        },
        "tags": [
          "üÜî Profile"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/{session}/profile/status": {
      "put": {
        "operationId": "ProfileController_setProfileStatus",
        "summary": "Set profile status (About)",
        "parameters": [
          {
            "name": "session",
            "required": true,
            "in": "path",
            "schema": {
              "default": "default"
            },
            "description": "Session name"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProfileStatusRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        },
        "tags": [
          "üÜî Profile"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/{session}/profile/picture": {
      "put": {
        "operationId": "ProfileController_setProfilePicture",
        "summary": "Set profile picture",
        "parameters": [
          {
            "name": "session",
            "required": true,
            "in": "path",
            "schema": {
              "default": "default"
            },
            "description": "Session name"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProfilePictureRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        },
        "tags": [
          "üÜî Profile"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "delete": {
        "operationId": "ProfileController_deleteProfilePicture",
        "summary": "Delete profile picture",
        "parameters": [
          {
            "name": "session",
            "required": true,
            "in": "path",
            "schema": {
              "default": "default"
            },
            "description": "Session name"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        },
        "tags": [
          "üÜî Profile"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/sendText": {
      "post": {
        "operationId": "ChattingController_sendText",
        "summary": "Send a text message",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MessageTextRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WAMessage"
                }
              }
            }
          }
        },
        "tags": [
          "üì§ Chatting"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "get": {
        "operationId": "ChattingController_sendTextGet",
        "summary": "Send a text message",
        "deprecated": true,
        "parameters": [
          {
            "name": "phone",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "text",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "session",
            "required": true,
            "in": "query",
            "schema": {
              "default": "default",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "tags": [
          "üì§ Chatting"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/sendImage": {
      "post": {
        "operationId": "ChattingController_sendImage",
        "summary": "Send an image",
        "description": "Either from an URL or base64 data - look at the request schemas for details.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MessageImageRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "tags": [
          "üì§ Chatting"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/sendFile": {
      "post": {
        "operationId": "ChattingController_sendFile",
        "summary": "Send a file",
        "description": "Either from an URL or base64 data - look at the request schemas for details.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MessageFileRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "tags": [
          "üì§ Chatting"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/sendVoice": {
      "post": {
        "operationId": "ChattingController_sendVoice",
        "summary": "Send an voice message",
        "description": "Either from an URL or base64 data - look at the request schemas for details.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MessageVoiceRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "tags": [
          "üì§ Chatting"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/sendVideo": {
      "post": {
        "operationId": "ChattingController_sendVideo",
        "summary": "Send a video",
        "description": "Either from an URL or base64 data - look at the request schemas for details.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MessageVideoRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "üì§ Chatting"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/send/link-custom-preview": {
      "post": {
        "operationId": "ChattingController_sendLinkCustomPreview",
        "summary": "Send a text message with a CUSTOM link preview.",
        "description": "You can use regular /api/sendText if you wanna send auto-generated link preview.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MessageLinkCustomPreviewRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "tags": [
          "üì§ Chatting"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/sendButtons": {
      "post": {
        "operationId": "ChattingController_sendButtons",
        "summary": "Send buttons (interactive message)",
        "description": "Send Buttons",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendButtonsRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "üì§ Chatting"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/forwardMessage": {
      "post": {
        "operationId": "ChattingController_forwardMessage",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MessageForwardRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WAMessage"
                }
              }
            }
          }
        },
        "tags": [
          "üì§ Chatting"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/sendSeen": {
      "post": {
        "operationId": "ChattingController_sendSeen",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendSeenRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "tags": [
          "üì§ Chatting"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/startTyping": {
      "post": {
        "operationId": "ChattingController_startTyping",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "üì§ Chatting"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/stopTyping": {
      "post": {
        "operationId": "ChattingController_stopTyping",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "üì§ Chatting"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/reaction": {
      "put": {
        "operationId": "ChattingController_setReaction",
        "summary": "React to a message with an emoji",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MessageReactionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "tags": [
          "üì§ Chatting"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/star": {
      "put": {
        "operationId": "ChattingController_setStar",
        "summary": "Star or unstar a message",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MessageStarRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "üì§ Chatting"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/sendPoll": {
      "post": {
        "operationId": "ChattingController_sendPoll",
        "summary": "Send a poll with options",
        "description": "You can use it as buttons or list replacement",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MessagePollRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "üì§ Chatting"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/sendLocation": {
      "post": {
        "operationId": "ChattingController_sendLocation",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MessageLocationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "tags": [
          "üì§ Chatting"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/sendContactVcard": {
      "post": {
        "operationId": "ChattingController_sendContactVcard",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MessageContactVcardRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "üì§ Chatting"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/send/buttons/reply": {
      "post": {
        "operationId": "ChattingController_sendButtonsReply",
        "summary": "Reply on a button message",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MessageButtonReply"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "üì§ Chatting"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/messages": {
      "get": {
        "operationId": "ChattingController_getMessages",
        "summary": "Get messages in a chat",
        "description": "DEPRECATED. Use \"GET /api/chats/{id}/messages\" instead",
        "deprecated": true,
        "parameters": [
          {
            "name": "downloadMedia",
            "required": false,
            "in": "query",
            "example": false,
            "description": "Download media for messages",
            "schema": {
              "default": true,
              "type": "boolean"
            }
          },
          {
            "name": "chatId",
            "required": true,
            "in": "query",
            "example": "11111111111@c.us",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "session",
            "required": true,
            "in": "query",
            "schema": {
              "default": "default",
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": true,
            "in": "query",
            "schema": {
              "default": 10,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "filter.timestamp.lte",
            "required": false,
            "in": "query",
            "description": "Filter messages before this timestamp (inclusive)",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "filter.timestamp.gte",
            "required": false,
            "in": "query",
            "description": "Filter messages after this timestamp (inclusive)",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "filter.fromMe",
            "required": false,
            "in": "query",
            "description": "From me filter (by default shows all messages)",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.ack",
            "required": false,
            "in": "query",
            "description": "Filter messages by acknowledgment status",
            "schema": {
              "enum": [
                "ERROR",
                "PENDING",
                "SERVER",
                "DEVICE",
                "READ",
                "PLAYED"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WAMessage"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "üì§ Chatting"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/checkNumberStatus": {
      "get": {
        "operationId": "ChattingController_DEPRECATED_checkNumberStatus",
        "summary": "Check number status",
        "description": "DEPRECATED. Use \"POST /contacts/check-exists\" instead",
        "deprecated": true,
        "parameters": [
          {
            "name": "phone",
            "required": true,
            "in": "query",
            "description": "The phone number to check",
            "example": "1213213213",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "session",
            "required": true,
            "in": "query",
            "schema": {
              "default": "default",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WANumberExistResult"
                }
              }
            }
          }
        },
        "tags": [
          "üì§ Chatting"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/reply": {
      "post": {
        "operationId": "ChattingController_reply",
        "summary": "DEPRECATED - you can set \"reply_to\" field when sending text, image, etc",
        "deprecated": true,
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MessageReplyRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "tags": [
          "üì§ Chatting"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/sendLinkPreview": {
      "post": {
        "operationId": "ChattingController_sendLinkPreview_DEPRECATED",
        "summary": "",
        "deprecated": true,
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MessageLinkPreviewRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "üì§ Chatting"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/{session}/chats": {
      "get": {
        "operationId": "ChatsController_getChats",
        "summary": "Get chats",
        "parameters": [
          {
            "name": "session",
            "required": true,
            "in": "path",
            "schema": {
              "default": "default"
            },
            "description": "Session name"
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Sort by field",
            "schema": {
              "enum": [
                "conversationTimestamp",
                "id",
                "name"
              ],
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order - <b>desc</b>ending (Z => A, New first) or <b>asc</b>ending (A => Z, Old first)",
            "schema": {
              "enum": [
                "desc",
                "asc"
              ],
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "üí¨ Chats"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/{session}/chats/overview": {
      "get": {
        "operationId": "ChatsController_getChatsOverview",
        "summary": "Get chats overview. Includes all necessary things to build UI \"your chats overview\" page - chat id, name, picture, last message. Sorting by last message timestamp",
        "parameters": [
          {
            "name": "session",
            "required": true,
            "in": "path",
            "schema": {
              "default": "default"
            },
            "description": "Session name"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "default": 20,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChatSummary"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "üí¨ Chats"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/{session}/chats/{chatId}": {
      "delete": {
        "operationId": "ChatsController_deleteChat",
        "summary": "Deletes the chat",
        "parameters": [
          {
            "name": "session",
            "required": true,
            "in": "path",
            "schema": {
              "default": "default"
            },
            "description": "Session name"
          },
          {
            "name": "chatId",
            "required": true,
            "in": "path",
            "description": "Chat ID",
            "example": "123456789@c.us",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "üí¨ Chats"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/{session}/chats/{chatId}/picture": {
      "get": {
        "operationId": "ChatsController_getChatPicture",
        "summary": "Gets chat picture",
        "parameters": [
          {
            "name": "session",
            "required": true,
            "in": "path",
            "schema": {
              "default": "default"
            },
            "description": "Session name"
          },
          {
            "name": "chatId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "refresh",
            "required": false,
            "in": "query",
            "example": false,
            "description": "Refresh the picture from the server (24h cache by default). Do not refresh if not needed, you can get rate limit error",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatPictureResponse"
                }
              }
            }
          }
        },
        "tags": [
          "üí¨ Chats"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/{session}/chats/{chatId}/messages": {
      "get": {
        "operationId": "ChatsController_getChatMessages",
        "summary": "Gets messages in the chat",
        "parameters": [
          {
            "name": "downloadMedia",
            "required": false,
            "in": "query",
            "example": false,
            "description": "Download media for messages",
            "schema": {
              "default": true,
              "type": "boolean"
            }
          },
          {
            "name": "limit",
            "required": true,
            "in": "query",
            "schema": {
              "default": 10,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "filter.timestamp.lte",
            "required": false,
            "in": "query",
            "description": "Filter messages before this timestamp (inclusive)",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "filter.timestamp.gte",
            "required": false,
            "in": "query",
            "description": "Filter messages after this timestamp (inclusive)",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "filter.fromMe",
            "required": false,
            "in": "query",
            "description": "From me filter (by default shows all messages)",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.ack",
            "required": false,
            "in": "query",
            "description": "Filter messages by acknowledgment status",
            "schema": {
              "enum": [
                "ERROR",
                "PENDING",
                "SERVER",
                "DEVICE",
                "READ",
                "PLAYED"
              ],
              "type": "string"
            }
          },
          {
            "name": "session",
            "required": true,
            "in": "path",
            "schema": {
              "default": "default"
            },
            "description": "Session name"
          },
          {
            "name": "chatId",
            "required": true,
            "in": "path",
            "description": "Chat ID",
            "example": "123456789@c.us",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WAMessage"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "üí¨ Chats"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "delete": {
        "operationId": "ChatsController_clearMessages",
        "summary": "Clears all messages from the chat",
        "parameters": [
          {
            "name": "session",
            "required": true,
            "in": "path",
            "schema": {
              "default": "default"
            },
            "description": "Session name"
          },
          {
            "name": "chatId",
            "required": true,
            "in": "path",
            "description": "Chat ID",
            "example": "123456789@c.us",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "üí¨ Chats"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/{session}/chats/{chatId}/messages/read": {
      "post": {
        "operationId": "ChatsController_readChatMessages",
        "summary": "Read unread messages in the chat",
        "parameters": [
          {
            "name": "messages",
            "required": false,
            "in": "query",
            "example": 30,
            "description": "How much messages to read (latest first)",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "days",
            "required": false,
            "in": "query",
            "description": "How much days to read (latest first)",
            "schema": {
              "default": 7,
              "type": "number"
            }
          },
          {
            "name": "session",
            "required": true,
            "in": "path",
            "schema": {
              "default": "default"
            },
            "description": "Session name"
          },
          {
            "name": "chatId",
            "required": true,
            "in": "path",
            "description": "Chat ID",
            "example": "123456789@c.us",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReadChatMessagesResponse"
                }
              }
            }
          }
        },
        "tags": [
          "üí¨ Chats"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/{session}/chats/{chatId}/messages/{messageId}": {
      "get": {
        "operationId": "ChatsController_getChatMessage",
        "summary": "Gets message by id",
        "parameters": [
          {
            "name": "downloadMedia",
            "required": false,
            "in": "query",
            "example": true,
            "description": "Download media for messages",
            "schema": {
              "default": true,
              "type": "boolean"
            }
          },
          {
            "name": "session",
            "required": true,
            "in": "path",
            "schema": {
              "default": "default"
            },
            "description": "Session name"
          },
          {
            "name": "chatId",
            "required": true,
            "in": "path",
            "description": "Chat ID",
            "example": "123456789@c.us",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "messageId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WAMessage"
                }
              }
            }
          }
        },
        "tags": [
          "üí¨ Chats"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "delete": {
        "operationId": "ChatsController_deleteMessage",
        "summary": "Deletes a message from the chat",
        "parameters": [
          {
            "name": "session",
            "required": true,
            "in": "path",
            "schema": {
              "default": "default"
            },
            "description": "Session name"
          },
          {
            "name": "chatId",
            "required": true,
            "in": "path",
            "description": "Chat ID",
            "example": "123456789@c.us",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "messageId",
            "required": true,
            "in": "path",
            "description": "Message ID in format <code>{fromMe}_{chat}_{message_id}[_{participant}]</code>",
            "example": "true_123456789@c.us_BAE6A33293978B16",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "üí¨ Chats"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "put": {
        "operationId": "ChatsController_editMessage",
        "summary": "Edits a message in the chat",
        "parameters": [
          {
            "name": "session",
            "required": true,
            "in": "path",
            "schema": {
              "default": "default"
            },
            "description": "Session name"
          },
          {
            "name": "chatId",
            "required": true,
            "in": "path",
            "description": "Chat ID",
            "example": "123456789@c.us",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "messageId",
            "required": true,
            "in": "path",
            "description": "Message ID in format <code>{fromMe}_{chat}_{message_id}[_{participant}]</code>",
            "example": "true_123456789@c.us_BAE6A33293978B16",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditMessageRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "üí¨ Chats"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/{session}/chats/{chatId}/messages/{messageId}/pin": {
      "post": {
        "operationId": "ChatsController_pinMessage",
        "summary": "Pins a message in the chat",
        "parameters": [
          {
            "name": "session",
            "required": true,
            "in": "path",
            "schema": {
              "default": "default"
            },
            "description": "Session name"
          },
          {
            "name": "chatId",
            "required": true,
            "in": "path",
            "description": "Chat ID",
            "example": "123456789@c.us",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "messageId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PinMessageRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "üí¨ Chats"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/{session}/chats/{chatId}/messages/{messageId}/unpin": {
      "post": {
        "operationId": "ChatsController_unpinMessage",
        "summary": "Unpins a message in the chat",
        "parameters": [
          {
            "name": "session",
            "required": true,
            "in": "path",
            "schema": {
              "default": "default"
            },
            "description": "Session name"
          },
          {
            "name": "chatId",
            "required": true,
            "in": "path",
            "description": "Chat ID",
            "example": "123456789@c.us",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "messageId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "üí¨ Chats"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/{session}/chats/{chatId}/archive": {
      "post": {
        "operationId": "ChatsController_archiveChat",
        "summary": "Archive the chat",
        "parameters": [
          {
            "name": "session",
            "required": true,
            "in": "path",
            "schema": {
              "default": "default"
            },
            "description": "Session name"
          },
          {
            "name": "chatId",
            "required": true,
            "in": "path",
            "description": "Chat ID",
            "example": "123456789@c.us",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "tags": [
          "üí¨ Chats"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/{session}/chats/{chatId}/unarchive": {
      "post": {
        "operationId": "ChatsController_unarchiveChat",
        "summary": "Unarchive the chat",
        "parameters": [
          {
            "name": "session",
            "required": true,
            "in": "path",
            "schema": {
              "default": "default"
            },
            "description": "Session name"
          },
          {
            "name": "chatId",
            "required": true,
            "in": "path",
            "description": "Chat ID",
            "example": "123456789@c.us",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "tags": [
          "üí¨ Chats"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/{session}/chats/{chatId}/unread": {
      "post": {
        "operationId": "ChatsController_unreadChat",
        "summary": "Unread the chat",
        "parameters": [
          {
            "name": "session",
            "required": true,
            "in": "path",
            "schema": {
              "default": "default"
            },
            "description": "Session name"
          },
          {
            "name": "chatId",
            "required": true,
            "in": "path",
            "description": "Chat ID",
            "example": "123456789@c.us",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "tags": [
          "üí¨ Chats"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/{session}/channels": {
      "get": {
        "operationId": "ChannelsController_list",
        "summary": "Get list of know channels",
        "parameters": [
          {
            "name": "session",
            "required": true,
            "in": "path",
            "schema": {
              "default": "default"
            },
            "description": "Session name"
          },
          {
            "name": "role",
            "required": false,
            "in": "query",
            "schema": {
              "enum": [
                "OWNER",
                "ADMIN",
                "SUBSCRIBER"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Channel"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "üì¢ Channels"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "post": {
        "operationId": "ChannelsController_create",
        "summary": "Create a new channel.",
        "parameters": [
          {
            "name": "session",
            "required": true,
            "in": "path",
            "schema": {
              "default": "default"
            },
            "description": "Session name"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateChannelRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Channel"
                }
              }
            }
          }
        },
        "tags": [
          "üì¢ Channels"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/{session}/channels/{id}": {
      "delete": {
        "operationId": "ChannelsController_delete",
        "summary": "Delete the channel.",
        "parameters": [
          {
            "name": "session",
            "required": true,
            "in": "path",
            "schema": {
              "default": "default"
            },
            "description": "Session name"
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "default": "123123123@newsletter"
            },
            "description": "WhatsApp Channel ID"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "üì¢ Channels"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "get": {
        "operationId": "ChannelsController_get",
        "summary": "Get the channel info",
        "description": "You can use either id (123@newsletter) OR invite code (https://www.whatsapp.com/channel/123)",
        "parameters": [
          {
            "name": "session",
            "required": true,
            "in": "path",
            "schema": {
              "default": "default"
            },
            "description": "Session name"
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "default": "123123123@newsletter"
            },
            "description": "WhatsApp Channel ID or invite code from invite link https://www.whatsapp.com/channel/11111"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Channel"
                }
              }
            }
          }
        },
        "tags": [
          "üì¢ Channels"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/{session}/channels/{id}/messages/preview": {
      "get": {
        "operationId": "ChannelsController_previewChannelMessages",
        "summary": "Preview channel messages",
        "description": "You can use either invite code (https://www.whatsapp.com/channel/123) or (123)ORChannel ID (123@newsletter).",
        "parameters": [
          {
            "name": "session",
            "required": true,
            "in": "path",
            "schema": {
              "default": "default"
            },
            "description": "Session name"
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Channel id or invite code",
            "schema": {
              "default": "0029Va4K0PZ5a245NkngBA2M"
            }
          },
          {
            "name": "downloadMedia",
            "required": true,
            "in": "query",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "name": "limit",
            "required": true,
            "in": "query",
            "schema": {
              "default": 10,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChannelMessage"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "üì¢ Channels"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/{session}/channels/{id}/follow": {
      "post": {
        "operationId": "ChannelsController_follow",
        "summary": "Follow the channel.",
        "parameters": [
          {
            "name": "session",
            "required": true,
            "in": "path",
            "schema": {
              "default": "default"
            },
            "description": "Session name"
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "default": "123123123@newsletter"
            },
            "description": "WhatsApp Channel ID"
          }
        ],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "üì¢ Channels"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/{session}/channels/{id}/unfollow": {
      "post": {
        "operationId": "ChannelsController_unfollow",
        "summary": "Unfollow the channel.",
        "parameters": [
          {
            "name": "session",
            "required": true,
            "in": "path",
            "schema": {
              "default": "default"
            },
            "description": "Session name"
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "default": "123123123@newsletter"
            },
            "description": "WhatsApp Channel ID"
          }
        ],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "üì¢ Channels"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/{session}/channels/{id}/mute": {
      "post": {
        "operationId": "ChannelsController_mute",
        "summary": "Mute the channel.",
        "parameters": [
          {
            "name": "session",
            "required": true,
            "in": "path",
            "schema": {
              "default": "default"
            },
            "description": "Session name"
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "default": "123123123@newsletter"
            },
            "description": "WhatsApp Channel ID"
          }
        ],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "üì¢ Channels"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/{session}/channels/{id}/unmute": {
      "post": {
        "operationId": "ChannelsController_unmute",
        "summary": "Unmute the channel.",
        "parameters": [
          {
            "name": "session",
            "required": true,
            "in": "path",
            "schema": {
              "default": "default"
            },
            "description": "Session name"
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "default": "123123123@newsletter"
            },
            "description": "WhatsApp Channel ID"
          }
        ],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "üì¢ Channels"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/{session}/channels/search/by-view": {
      "post": {
        "operationId": "ChannelsController_searchByView",
        "summary": "Search for channels (by view)",
        "parameters": [
          {
            "name": "session",
            "required": true,
            "in": "path",
            "schema": {
              "default": "default"
            },
            "description": "Session name"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChannelSearchByView"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelListResult"
                }
              }
            }
          }
        },
        "tags": [
          "üì¢ Channels"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/{session}/channels/search/by-text": {
      "post": {
        "operationId": "ChannelsController_searchByText",
        "summary": "Search for channels (by text)",
        "parameters": [
          {
            "name": "session",
            "required": true,
            "in": "path",
            "schema": {
              "default": "default"
            },
            "description": "Session name"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChannelSearchByText"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelListResult"
                }
              }
            }
          }
        },
        "tags": [
          "üì¢ Channels"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/{session}/channels/search/views": {
      "get": {
        "operationId": "ChannelsController_getSearchViews",
        "summary": "Get list of views for channel search",
        "parameters": [
          {
            "name": "session",
            "required": true,
            "in": "path",
            "schema": {
              "default": "default"
            },
            "description": "Session name"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChannelView"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "üì¢ Channels"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/{session}/channels/search/countries": {
      "get": {
        "operationId": "ChannelsController_getSearchCountries",
        "summary": "Get list of countries for channel search",
        "parameters": [
          {
            "name": "session",
            "required": true,
            "in": "path",
            "schema": {
              "default": "default"
            },
            "description": "Session name"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChannelCountry"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "üì¢ Channels"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/{session}/channels/search/categories": {
      "get": {
        "operationId": "ChannelsController_getSearchCategories",
        "summary": "Get list of categories for channel search",
        "parameters": [
          {
            "name": "session",
            "required": true,
            "in": "path",
            "schema": {
              "default": "default"
            },
            "description": "Session name"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChannelCategory"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "üì¢ Channels"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/{session}/status/text": {
      "post": {
        "operationId": "StatusController_sendTextStatus",
        "summary": "Send text status",
        "parameters": [
          {
            "name": "session",
            "required": true,
            "in": "path",
            "schema": {
              "default": "default"
            },
            "description": "Session name"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TextStatus"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "üü¢ Status"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/{session}/status/image": {
      "post": {
        "operationId": "StatusController_sendImageStatus",
        "summary": "Send image status",
        "parameters": [
          {
            "name": "session",
            "required": true,
            "in": "path",
            "schema": {
              "default": "default"
            },
            "description": "Session name"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImageStatus"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "üü¢ Status"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/{session}/status/voice": {
      "post": {
        "operationId": "StatusController_sendVoiceStatus",
        "summary": "Send voice status",
        "parameters": [
          {
            "name": "session",
            "required": true,
            "in": "path",
            "schema": {
              "default": "default"
            },
            "description": "Session name"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VoiceStatus"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "üü¢ Status"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/{session}/status/video": {
      "post": {
        "operationId": "StatusController_sendVideoStatus",
        "summary": "Send video status",
        "parameters": [
          {
            "name": "session",
            "required": true,
            "in": "path",
            "schema": {
              "default": "default"
            },
            "description": "Session name"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VideoStatus"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "üü¢ Status"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/{session}/status/delete": {
      "post": {
        "operationId": "StatusController_deleteStatus",
        "summary": "DELETE sent status",
        "parameters": [
          {
            "name": "session",
            "required": true,
            "in": "path",
            "schema": {
              "default": "default"
            },
            "description": "Session name"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteStatusRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "üü¢ Status"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/{session}/status/new-message-id": {
      "get": {
        "operationId": "StatusController_getNewMessageId",
        "summary": "Generate message ID you can use to batch contacts",
        "parameters": [
          {
            "name": "session",
            "required": true,
            "in": "path",
            "schema": {
              "default": "default"
            },
            "description": "Session name"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewMessageIDResponse"
                }
              }
            }
          }
        },
        "tags": [
          "üü¢ Status"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/{session}/labels": {
      "get": {
        "operationId": "LabelsController_getAll",
        "summary": "Get all labels",
        "parameters": [
          {
            "name": "session",
            "required": true,
            "in": "path",
            "schema": {
              "default": "default"
            },
            "description": "Session name"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Label"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "üè∑Ô∏è Labels"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "post": {
        "operationId": "LabelsController_create",
        "summary": "Create a new label",
        "parameters": [
          {
            "name": "session",
            "required": true,
            "in": "path",
            "schema": {
              "default": "default"
            },
            "description": "Session name"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LabelBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Label"
                }
              }
            }
          }
        },
        "tags": [
          "üè∑Ô∏è Labels"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/{session}/labels/{labelId}": {
      "put": {
        "operationId": "LabelsController_update",
        "summary": "Update a label",
        "parameters": [
          {
            "name": "session",
            "required": true,
            "in": "path",
            "schema": {
              "default": "default"
            },
            "description": "Session name"
          },
          {
            "name": "labelId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LabelBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Label"
                }
              }
            }
          }
        },
        "tags": [
          "üè∑Ô∏è Labels"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "delete": {
        "operationId": "LabelsController_delete",
        "summary": "Delete a label",
        "parameters": [
          {
            "name": "session",
            "required": true,
            "in": "path",
            "schema": {
              "default": "default"
            },
            "description": "Session name"
          },
          {
            "name": "labelId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "tags": [
          "üè∑Ô∏è Labels"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/{session}/labels/chats/{chatId}": {
      "get": {
        "operationId": "LabelsController_getChatLabels",
        "summary": "Get labels for the chat",
        "parameters": [
          {
            "name": "session",
            "required": true,
            "in": "path",
            "schema": {
              "default": "default"
            },
            "description": "Session name"
          },
          {
            "name": "chatId",
            "required": true,
            "in": "path",
            "description": "Chat ID",
            "example": "123456789@c.us",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Label"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "üè∑Ô∏è Labels"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "put": {
        "operationId": "LabelsController_putChatLabels",
        "summary": "Save labels for the chat",
        "parameters": [
          {
            "name": "session",
            "required": true,
            "in": "path",
            "schema": {
              "default": "default"
            },
            "description": "Session name"
          },
          {
            "name": "chatId",
            "required": true,
            "in": "path",
            "description": "Chat ID",
            "example": "123456789@c.us",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetLabelsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "üè∑Ô∏è Labels"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/{session}/labels/{labelId}/chats": {
      "get": {
        "operationId": "LabelsController_getChatsByLabel",
        "summary": "Get chats by label",
        "parameters": [
          {
            "name": "session",
            "required": true,
            "in": "path",
            "schema": {
              "default": "default"
            },
            "description": "Session name"
          },
          {
            "name": "labelId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "üè∑Ô∏è Labels"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/contacts/all": {
      "get": {
        "operationId": "ContactsController_getAll",
        "summary": "Get all contacts",
        "parameters": [
          {
            "name": "session",
            "required": true,
            "in": "query",
            "schema": {
              "default": "default",
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Sort by field",
            "schema": {
              "enum": [
                "id",
                "name"
              ],
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order - <b>desc</b>ending (Z => A, New first) or <b>asc</b>ending (A => Z, Old first)",
            "schema": {
              "enum": [
                "desc",
                "asc"
              ],
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "üë§ Contacts"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/contacts": {
      "get": {
        "operationId": "ContactsController_get",
        "summary": "Get contact basic info",
        "description": "The method always return result, even if the phone number is not registered in WhatsApp. For that - use /contacts/check-exists endpoint below.",
        "parameters": [
          {
            "name": "contactId",
            "required": true,
            "in": "query",
            "example": "11111111111@c.us",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "session",
            "required": true,
            "in": "query",
            "schema": {
              "default": "default",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "üë§ Contacts"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/contacts/check-exists": {
      "get": {
        "operationId": "ContactsController_checkExists",
        "summary": "Check phone number is registered in WhatsApp.",
        "parameters": [
          {
            "name": "phone",
            "required": true,
            "in": "query",
            "description": "The phone number to check",
            "example": "1213213213",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "session",
            "required": true,
            "in": "query",
            "schema": {
              "default": "default",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WANumberExistResult"
                }
              }
            }
          }
        },
        "tags": [
          "üë§ Contacts"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/contacts/about": {
      "get": {
        "operationId": "ContactsController_getAbout",
        "summary": "Gets the Contact's \"about\" info",
        "description": "Returns null if you do not have permission to read their status.",
        "parameters": [
          {
            "name": "contactId",
            "required": true,
            "in": "query",
            "example": "11111111111@c.us",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "session",
            "required": true,
            "in": "query",
            "schema": {
              "default": "default",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "üë§ Contacts"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/contacts/profile-picture": {
      "get": {
        "operationId": "ContactsController_getProfilePicture",
        "summary": "Get contact's profile picture URL",
        "description": "If privacy settings do not allow to get the picture, the method will return null.",
        "parameters": [
          {
            "name": "contactId",
            "required": true,
            "in": "query",
            "example": "11111111111@c.us",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "refresh",
            "required": false,
            "in": "query",
            "example": false,
            "description": "Refresh the picture from the server (24h cache by default). Do not refresh if not needed, you can get rate limit error",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "name": "session",
            "required": true,
            "in": "query",
            "schema": {
              "default": "default",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "üë§ Contacts"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/contacts/block": {
      "post": {
        "operationId": "ContactsController_block",
        "summary": "Block contact",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "üë§ Contacts"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/contacts/unblock": {
      "post": {
        "operationId": "ContactsController_unblock",
        "summary": "Unblock contact",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "üë§ Contacts"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/{session}/groups": {
      "post": {
        "operationId": "GroupsController_createGroup",
        "summary": "Create a new group.",
        "parameters": [
          {
            "name": "session",
            "required": true,
            "in": "path",
            "schema": {
              "default": "default"
            },
            "description": "Session name"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateGroupRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "üë• Groups"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "get": {
        "operationId": "GroupsController_getGroups",
        "summary": "Get all groups.",
        "parameters": [
          {
            "name": "session",
            "required": true,
            "in": "path",
            "schema": {
              "default": "default"
            },
            "description": "Session name"
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Sort by field",
            "schema": {
              "enum": [
                "id",
                "subject"
              ],
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order - <b>desc</b>ending (Z => A, New first) or <b>asc</b>ending (A => Z, Old first)",
            "schema": {
              "enum": [
                "desc",
                "asc"
              ],
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "exclude",
            "required": false,
            "in": "query",
            "description": "Exclude fields",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "",
                  "participants"
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "tags": [
          "üë• Groups"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/{session}/groups/join-info": {
      "get": {
        "operationId": "GroupsController_joinInfoGroup",
        "summary": "Get info about the group before joining.",
        "parameters": [
          {
            "name": "session",
            "required": true,
            "in": "path",
            "schema": {
              "default": "default"
            },
            "description": "Session name"
          },
          {
            "name": "code",
            "required": true,
            "in": "query",
            "description": "Group code (123) or url (https://chat.whatsapp.com/123)",
            "example": "https://chat.whatsapp.com/1234567890abcdef",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "tags": [
          "üë• Groups"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/{session}/groups/join": {
      "post": {
        "operationId": "GroupsController_joinGroup",
        "summary": "Join group via code",
        "parameters": [
          {
            "name": "session",
            "required": true,
            "in": "path",
            "schema": {
              "default": "default"
            },
            "description": "Session name"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JoinGroupRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JoinGroupResponse"
                }
              }
            }
          }
        },
        "tags": [
          "üë• Groups"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/{session}/groups/count": {
      "get": {
        "operationId": "GroupsController_getGroupsCount",
        "summary": "Get the number of groups.",
        "parameters": [
          {
            "name": "session",
            "required": true,
            "in": "path",
            "schema": {
              "default": "default"
            },
            "description": "Session name"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CountResponse"
                }
              }
            }
          }
        },
        "tags": [
          "üë• Groups"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/{session}/groups/refresh": {
      "post": {
        "operationId": "GroupsController_refreshGroups",
        "summary": "Refresh groups from the server.",
        "parameters": [
          {
            "name": "session",
            "required": true,
            "in": "path",
            "schema": {
              "default": "default"
            },
            "description": "Session name"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "üë• Groups"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/{session}/groups/{id}": {
      "get": {
        "operationId": "GroupsController_getGroup",
        "summary": "Get the group.",
        "parameters": [
          {
            "name": "session",
            "required": true,
            "in": "path",
            "schema": {
              "default": "default"
            },
            "description": "Session name"
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Group ID",
            "example": "123123123@g.us",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "üë• Groups"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "delete": {
        "operationId": "GroupsController_deleteGroup",
        "summary": "Delete the group.",
        "parameters": [
          {
            "name": "session",
            "required": true,
            "in": "path",
            "schema": {
              "default": "default"
            },
            "description": "Session name"
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Group ID",
            "example": "123123123@g.us",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "üë• Groups"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/{session}/groups/{id}/leave": {
      "post": {
        "operationId": "GroupsController_leaveGroup",
        "summary": "Leave the group.",
        "parameters": [
          {
            "name": "session",
            "required": true,
            "in": "path",
            "schema": {
              "default": "default"
            },
            "description": "Session name"
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Group ID",
            "example": "123123123@g.us",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "üë• Groups"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/{session}/groups/{id}/picture": {
      "get": {
        "operationId": "GroupsController_getChatPicture",
        "summary": "Get group picture",
        "parameters": [
          {
            "name": "session",
            "required": true,
            "in": "path",
            "schema": {
              "default": "default"
            },
            "description": "Session name"
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Group ID",
            "example": "123123123@g.us",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "refresh",
            "required": false,
            "in": "query",
            "example": false,
            "description": "Refresh the picture from the server (24h cache by default). Do not refresh if not needed, you can get rate limit error",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatPictureResponse"
                }
              }
            }
          }
        },
        "tags": [
          "üë• Groups"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "put": {
        "operationId": "GroupsController_setPicture",
        "summary": "Set group picture",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Group ID",
            "example": "123123123@g.us",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "session",
            "required": true,
            "in": "path",
            "schema": {
              "default": "default"
            },
            "description": "Session name"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProfilePictureRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        },
        "tags": [
          "üë• Groups"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "delete": {
        "operationId": "GroupsController_deletePicture",
        "summary": "Delete group picture",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Group ID",
            "example": "123123123@g.us",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "session",
            "required": true,
            "in": "path",
            "schema": {
              "default": "default"
            },
            "description": "Session name"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Result"
                }
              }
            }
          }
        },
        "tags": [
          "üë• Groups"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/{session}/groups/{id}/description": {
      "put": {
        "operationId": "GroupsController_setDescription",
        "summary": "Updates the group description.",
        "description": "Returns \"true\" if the subject was properly updated. This can return \"false\" if the user does not have the necessary permissions.",
        "parameters": [
          {
            "name": "session",
            "required": true,
            "in": "path",
            "schema": {
              "default": "default"
            },
            "description": "Session name"
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Group ID",
            "example": "123123123@g.us",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DescriptionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "üë• Groups"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/{session}/groups/{id}/subject": {
      "put": {
        "operationId": "GroupsController_setSubject",
        "summary": "Updates the group subject",
        "description": "Returns \"true\" if the subject was properly updated. This can return \"false\" if the user does not have the necessary permissions.",
        "parameters": [
          {
            "name": "session",
            "required": true,
            "in": "path",
            "schema": {
              "default": "default"
            },
            "description": "Session name"
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Group ID",
            "example": "123123123@g.us",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubjectRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "üë• Groups"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/{session}/groups/{id}/settings/security/info-admin-only": {
      "put": {
        "operationId": "GroupsController_setInfoAdminOnly",
        "summary": "Updates the group \"info admin only\" settings.",
        "description": "You can allow only admins to edit group info (title, description, photo).",
        "parameters": [
          {
            "name": "session",
            "required": true,
            "in": "path",
            "schema": {
              "default": "default"
            },
            "description": "Session name"
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Group ID",
            "example": "123123123@g.us",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SettingsSecurityChangeInfo"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "üë• Groups"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "get": {
        "operationId": "GroupsController_getInfoAdminOnly",
        "summary": "Get the group's 'info admin only' settings.",
        "description": "You can allow only admins to edit group info (title, description, photo).",
        "parameters": [
          {
            "name": "session",
            "required": true,
            "in": "path",
            "schema": {
              "default": "default"
            },
            "description": "Session name"
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Group ID",
            "example": "123123123@g.us",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingsSecurityChangeInfo"
                }
              }
            }
          }
        },
        "tags": [
          "üë• Groups"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/{session}/groups/{id}/settings/security/messages-admin-only": {
      "put": {
        "operationId": "GroupsController_setMessagesAdminOnly",
        "summary": "Update settings - who can send messages",
        "description": "Updates the group settings to only allow admins to send messages.",
        "parameters": [
          {
            "name": "session",
            "required": true,
            "in": "path",
            "schema": {
              "default": "default"
            },
            "description": "Session name"
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Group ID",
            "example": "123123123@g.us",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SettingsSecurityChangeInfo"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "üë• Groups"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "get": {
        "operationId": "GroupsController_getMessagesAdminOnly",
        "summary": "Get settings - who can send messages",
        "description": "The group settings to only allow admins to send messages.",
        "parameters": [
          {
            "name": "session",
            "required": true,
            "in": "path",
            "schema": {
              "default": "default"
            },
            "description": "Session name"
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Group ID",
            "example": "123123123@g.us",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingsSecurityChangeInfo"
                }
              }
            }
          }
        },
        "tags": [
          "üë• Groups"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/{session}/groups/{id}/invite-code": {
      "get": {
        "operationId": "GroupsController_getInviteCode",
        "summary": "Gets the invite code for the group.",
        "parameters": [
          {
            "name": "session",
            "required": true,
            "in": "path",
            "schema": {
              "default": "default"
            },
            "description": "Session name"
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Group ID",
            "example": "123123123@g.us",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "tags": [
          "üë• Groups"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/{session}/groups/{id}/invite-code/revoke": {
      "post": {
        "operationId": "GroupsController_revokeInviteCode",
        "summary": "Invalidates the current group invite code and generates a new one.",
        "parameters": [
          {
            "name": "session",
            "required": true,
            "in": "path",
            "schema": {
              "default": "default"
            },
            "description": "Session name"
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Group ID",
            "example": "123123123@g.us",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "tags": [
          "üë• Groups"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/{session}/groups/{id}/participants": {
      "get": {
        "operationId": "GroupsController_getParticipants",
        "summary": "Get participants",
        "parameters": [
          {
            "name": "session",
            "required": true,
            "in": "path",
            "schema": {
              "default": "default"
            },
            "description": "Session name"
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Group ID",
            "example": "123123123@g.us",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "üë• Groups"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/{session}/groups/{id}/participants/add": {
      "post": {
        "operationId": "GroupsController_addParticipants",
        "summary": "Add participants",
        "parameters": [
          {
            "name": "session",
            "required": true,
            "in": "path",
            "schema": {
              "default": "default"
            },
            "description": "Session name"
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Group ID",
            "example": "123123123@g.us",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ParticipantsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "üë• Groups"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/{session}/groups/{id}/participants/remove": {
      "post": {
        "operationId": "GroupsController_removeParticipants",
        "summary": "Remove participants",
        "parameters": [
          {
            "name": "session",
            "required": true,
            "in": "path",
            "schema": {
              "default": "default"
            },
            "description": "Session name"
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Group ID",
            "example": "123123123@g.us",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ParticipantsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "üë• Groups"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/{session}/groups/{id}/admin/promote": {
      "post": {
        "operationId": "GroupsController_promoteToAdmin",
        "summary": "Promote participants to admin users.",
        "parameters": [
          {
            "name": "session",
            "required": true,
            "in": "path",
            "schema": {
              "default": "default"
            },
            "description": "Session name"
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Group ID",
            "example": "123123123@g.us",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ParticipantsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "üë• Groups"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/{session}/groups/{id}/admin/demote": {
      "post": {
        "operationId": "GroupsController_demoteToAdmin",
        "summary": "Demotes participants to regular users.",
        "parameters": [
          {
            "name": "session",
            "required": true,
            "in": "path",
            "schema": {
              "default": "default"
            },
            "description": "Session name"
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Group ID",
            "example": "123123123@g.us",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ParticipantsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "üë• Groups"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/{session}/presence": {
      "post": {
        "operationId": "PresenceController_setPresence",
        "summary": "Set session presence",
        "parameters": [
          {
            "name": "session",
            "required": true,
            "in": "path",
            "schema": {
              "default": "default"
            },
            "description": "Session name"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WAHASessionPresence"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "‚úÖ Presence"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "get": {
        "operationId": "PresenceController_getPresenceAll",
        "summary": "Get all subscribed presence information.",
        "parameters": [
          {
            "name": "session",
            "required": true,
            "in": "path",
            "schema": {
              "default": "default"
            },
            "description": "Session name"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WAHAChatPresences"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "‚úÖ Presence"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/{session}/presence/{chatId}": {
      "get": {
        "operationId": "PresenceController_getPresence",
        "summary": "Get the presence for the chat id. If it hasn't been subscribed - it also subscribes to it.",
        "parameters": [
          {
            "name": "session",
            "required": true,
            "in": "path",
            "schema": {
              "default": "default"
            },
            "description": "Session name"
          },
          {
            "name": "chatId",
            "required": true,
            "in": "path",
            "description": "Chat ID",
            "example": "123456789@c.us",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WAHAChatPresences"
                }
              }
            }
          }
        },
        "tags": [
          "‚úÖ Presence"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/{session}/presence/{chatId}/subscribe": {
      "post": {
        "operationId": "PresenceController_subscribe",
        "summary": "Subscribe to presence events for the chat.",
        "parameters": [
          {
            "name": "session",
            "required": true,
            "in": "path",
            "schema": {
              "default": "default"
            },
            "description": "Session name"
          },
          {
            "name": "chatId",
            "required": true,
            "in": "path",
            "description": "Chat ID",
            "example": "123456789@c.us",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "‚úÖ Presence"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/screenshot": {
      "get": {
        "operationId": "ScreenshotController_screenshot",
        "parameters": [
          {
            "name": "session",
            "required": true,
            "in": "query",
            "schema": {
              "default": "default",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "image/png": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Base64File"
                    }
                  ]
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "üñºÔ∏è Screenshot"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/ping": {
      "get": {
        "operationId": "PingController_ping",
        "summary": "Ping the server",
        "description": "Check if the server is alive and responding to requests.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PingResponse"
                }
              }
            }
          }
        },
        "tags": [
          "üîç Observability"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/health": {
      "get": {
        "operationId": "HealthController_check",
        "summary": "Check the health of the server",
        "description": "Perform all health checks and return the server's health status.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "The Health Check is successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "ok"
                    },
                    "info": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "required": [
                          "status"
                        ],
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": true
                      },
                      "nullable": true
                    },
                    "error": {
                      "type": "object",
                      "example": {},
                      "additionalProperties": {
                        "type": "object",
                        "required": [
                          "status"
                        ],
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": true
                      },
                      "nullable": true
                    },
                    "details": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "required": [
                          "status"
                        ],
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": true
                      }
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "The Health Check is not successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "info": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "required": [
                          "status"
                        ],
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": true
                      },
                      "nullable": true
                    },
                    "error": {
                      "type": "object",
                      "example": {
                        "redis": {
                          "status": "down",
                          "message": "Could not connect"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "required": [
                          "status"
                        ],
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": true
                      },
                      "nullable": true
                    },
                    "details": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        },
                        "redis": {
                          "status": "down",
                          "message": "Could not connect"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "required": [
                          "status"
                        ],
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": true
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "üîç Observability"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/server/version": {
      "get": {
        "operationId": "ServerController_get",
        "summary": "Get the version of the server",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WAHAEnvironment"
                }
              }
            }
          }
        },
        "tags": [
          "üîç Observability"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/server/environment": {
      "get": {
        "operationId": "ServerController_environment",
        "summary": "Get the server environment",
        "parameters": [
          {
            "name": "all",
            "required": false,
            "in": "query",
            "example": false,
            "description": "Include all environment variables",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "tags": [
          "üîç Observability"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/server/status": {
      "get": {
        "operationId": "ServerController_status",
        "summary": "Get the server status",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerStatusResponse"
                }
              }
            }
          }
        },
        "tags": [
          "üîç Observability"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/server/stop": {
      "post": {
        "operationId": "ServerController_stop",
        "summary": "Stop (and restart) the server",
        "description": "If you're using docker, after calling this endpoint Docker will start a new container, so you can use this endpoint to restart the server",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StopRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StopResponse"
                }
              }
            }
          }
        },
        "tags": [
          "üîç Observability"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/server/debug/heapsnapshot": {
      "get": {
        "operationId": "ServerDebugController_heapsnapshot",
        "summary": "Return a heapsnapshot",
        "description": "Return a heapsnapshot of the server's memory",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "üîç Observability"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/version": {
      "get": {
        "operationId": "VersionController_get",
        "summary": "Get the server version ",
        "deprecated": true,
        "description": "Use 'GET /api/server/version' instead ",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WAHAEnvironment"
                }
              }
            }
          }
        },
        "tags": [
          "üîç Observability"
        ],
        "security": [
          {
            "api_key": []
          }
        ]
      }
    }
  },
  "info": {
    "title": "WAHA - WhatsApp HTTP API",
    "description": "<b>WhatsApp HTTP API</b> that you can run in a click!<br/><a href=\"/dashboard\"><b>üìä Dashboard</b></a><br/><br/>Learn more:<ul><li><a href=\"https://waha.devlike.pro/\" target=\"_blank\">Documentation</a></li><li><a href=\"https://waha.devlike.pro/docs/how-to/engines/#features\" target=\"_blank\">Supported features in engines</a></li><li><a href=\"https://github.com/devlikeapro/waha\" target=\"_blank\">GitHub - WAHA Core</a></li><li><a href=\"https://github.com/devlikeapro/waha-plus\" target=\"_blank\">GitHub - WAHA Plus</a></li></ul><p>Support the project and get WAHA Plus version!</p><ul><li><a href=\"https://waha.devlike.pro/docs/how-to/plus-version/\" target=\"_blank\">WAHA Plus</a></li><li><a href=\"https://patreon.com/wa_http_api/\" target=\"_blank\">Patreon</a></li><li><a href=\"https://boosty.to/wa-http-api/\" target=\"_blank\">Boosty</a></li><li><a href=\"https://portal.devlike.pro/\" target=\"_blank\">Patron Portal</a></li></ul>",
    "version": "2025.4.2",
    "contact": {}
  },
  "tags": [
    {
      "name": "üñ•Ô∏è Sessions",
      "description": "Control WhatsApp sessions (accounts)"
    },
    {
      "name": "üîë Auth",
      "description": "Authentication"
    },
    {
      "name": "üÜî Profile",
      "description": "Your profile information"
    },
    {
      "name": "üñºÔ∏è Screenshot",
      "description": "Get screenshot of WhatsApp and show QR code"
    },
    {
      "name": "üì§ Chatting",
      "description": "Chatting methods"
    },
    {
      "name": "üì¢ Channels",
      "description": "Channels (newsletters) methods"
    },
    {
      "name": "üü¢ Status",
      "description": "Status (aka stories) methods"
    },
    {
      "name": "üí¨ Chats",
      "description": "Chats methods"
    },
    {
      "name": "üë§ Contacts",
      "description": "Contacts methods.<br>\n                Use phone number (without +) or phone number and `@c.us` at the end as `contactId`.<br>\n                'E.g: `12312312310` OR `12312312310@c.us`<br>"
    },
    {
      "name": "üë• Groups",
      "description": "Groups methods.<br>"
    },
    {
      "name": "‚úÖ Presence",
      "description": "Presence information"
    },
    {
      "name": "üè∑Ô∏è Labels",
      "description": "Labels - available only for WhatsApp Business accounts"
    },
    {
      "name": "üîç Observability",
      "description": "Other methods"
    },
    {
      "name": "üóÑÔ∏è Storage",
      "description": "Storage methods"
    }
  ],
  "servers": [
    {
      "url": "{protocol}://{host}:{port}/{baseUrl}",
      "description": "",
      "variables": {
        "protocol": {
          "default": "http",
          "enum": [
            "http",
            "https"
          ],
          "description": "The protocol used to access the server."
        },
        "host": {
          "default": "localhost",
          "description": "The hostname or IP address of the server."
        },
        "port": {
          "default": "3000",
          "description": "The port number on which the server is listening for requests"
        },
        "baseUrl": {
          "default": "",
          "description": "The base URL path for all API endpoints. This can be used to group related endpoints together under a common path."
        }
      }
    }
  ],
  "components": {
    "securitySchemes": {
      "api_key": {
        "type": "apiKey",
        "in": "header",
        "name": "X-Api-Key",
        "description": "Your secret api key"
      }
    },
    "schemas": {
      "Base64File": {
        "type": "object",
        "properties": {
          "mimetype": {
            "type": "string"
          },
          "data": {
            "type": "string"
          }
        },
        "required": [
          "mimetype",
          "data"
        ]
      },
      "QRCodeValue": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string"
          }
        },
        "required": [
          "value"
        ]
      },
      "RequestCodeRequest": {
        "type": "object",
        "properties": {
          "phoneNumber": {
            "type": "string",
            "description": "Mobile phone number in international format",
            "example": "12132132130"
          },
          "method": {
            "type": "string",
            "description": "How would you like to receive the one time code for registration? |sms|voice. Leave empty for Web pairing.",
            "example": null
          }
        },
        "required": [
          "phoneNumber"
        ]
      },
      "MeInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "11111111111@c.us"
          },
          "pushName": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "pushName"
        ]
      },
      "Map": {
        "type": "object",
        "properties": {}
      },
      "ProxyConfig": {
        "type": "object",
        "properties": {
          "server": {
            "type": "string",
            "example": "localhost:3128"
          },
          "username": {
            "type": "string",
            "example": null
          },
          "password": {
            "type": "string",
            "example": null
          }
        },
        "required": [
          "server"
        ]
      },
      "NowebStoreConfig": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "default": false,
            "description": "Enable or disable the store for contacts, chats, and messages.",
            "example": true
          },
          "fullSync": {
            "type": "boolean",
            "default": false,
            "description": "Enable full sync on session initialization (when scanning QR code).\nFull sync will download all contacts, chats, and messages from the phone.\nIf disabled, only messages early than 90 days will be downloaded and some contacts may be missing."
          }
        },
        "required": [
          "enabled",
          "fullSync"
        ]
      },
      "NowebConfig": {
        "type": "object",
        "properties": {
          "markOnline": {
            "type": "boolean",
            "default": true,
            "description": "Mark the session as online when it connects to the server."
          },
          "store": {
            "$ref": "#/components/schemas/NowebStoreConfig"
          }
        },
        "required": [
          "markOnline"
        ]
      },
      "HmacConfiguration": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "example": "your-secret-key"
          }
        }
      },
      "RetriesConfiguration": {
        "type": "object",
        "properties": {
          "delaySeconds": {
            "type": "number",
            "example": 2
          },
          "attempts": {
            "type": "number",
            "example": 15
          },
          "policy": {
            "enum": [
              "linear",
              "exponential",
              "constant"
            ],
            "type": "string",
            "example": "linear"
          }
        }
      },
      "CustomHeader": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "X-My-Custom-Header"
          },
          "value": {
            "type": "string",
            "example": "Value"
          }
        },
        "required": [
          "name",
          "value"
        ]
      },
      "WebhookConfig": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "example": "https://webhook.site/11111111-1111-1111-1111-11111111",
            "description": "You can use https://docs.webhook.site/ to test webhooks and see the payload"
          },
          "events": {
            "example": [
              "message",
              "session.status"
            ],
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "hmac": {
            "example": null,
            "allOf": [
              {
                "$ref": "#/components/schemas/HmacConfiguration"
              }
            ]
          },
          "retries": {
            "example": null,
            "allOf": [
              {
                "$ref": "#/components/schemas/RetriesConfiguration"
              }
            ]
          },
          "customHeaders": {
            "example": null,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomHeader"
            }
          }
        },
        "required": [
          "url",
          "events"
        ]
      },
      "SessionConfig": {
        "type": "object",
        "properties": {
          "metadata": {
            "example": {
              "user.id": "123",
              "user.email": "email@example.com"
            },
            "description": "Metadata for the session. You'll get 'metadata' in all webhooks.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Map"
              }
            ]
          },
          "proxy": {
            "example": null,
            "allOf": [
              {
                "$ref": "#/components/schemas/ProxyConfig"
              }
            ]
          },
          "debug": {
            "type": "boolean",
            "default": false
          },
          "noweb": {
            "example": {
              "store": {
                "enabled": true,
                "fullSync": false
              }
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/NowebConfig"
              }
            ]
          },
          "webhooks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WebhookConfig"
            }
          }
        }
      },
      "SessionInfo": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "default",
            "description": "Session name (id)"
          },
          "me": {
            "$ref": "#/components/schemas/MeInfo"
          },
          "assignedWorker": {
            "type": "string"
          },
          "status": {
            "enum": [
              "STOPPED",
              "STARTING",
              "SCAN_QR_CODE",
              "WORKING",
              "FAILED"
            ],
            "type": "string"
          },
          "config": {
            "$ref": "#/components/schemas/SessionConfig"
          }
        },
        "required": [
          "name",
          "status"
        ]
      },
      "SessionCreateRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 54,
            "example": "default",
            "description": "Session name (id)"
          },
          "start": {
            "type": "boolean",
            "description": "Start session after creation",
            "example": true,
            "default": true
          },
          "config": {
            "$ref": "#/components/schemas/SessionConfig"
          }
        }
      },
      "SessionDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "default",
            "description": "Session name (id)"
          },
          "status": {
            "enum": [
              "STOPPED",
              "STARTING",
              "SCAN_QR_CODE",
              "WORKING",
              "FAILED"
            ],
            "type": "string"
          },
          "config": {
            "$ref": "#/components/schemas/SessionConfig"
          }
        },
        "required": [
          "name",
          "status"
        ]
      },
      "SessionUpdateRequest": {
        "type": "object",
        "properties": {
          "config": {
            "$ref": "#/components/schemas/SessionConfig"
          }
        }
      },
      "SessionStartDeprecatedRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "default",
            "description": "Session name (id)"
          },
          "config": {
            "$ref": "#/components/schemas/SessionConfig"
          }
        },
        "required": [
          "name"
        ]
      },
      "SessionStopDeprecatedRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "default",
            "description": "Session name (id)"
          },
          "logout": {
            "type": "boolean",
            "default": false,
            "example": false,
            "description": "Stop and logout from the session."
          }
        },
        "required": [
          "name"
        ]
      },
      "SessionLogoutDeprecatedRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "default",
            "description": "Session name (id)"
          }
        },
        "required": [
          "name"
        ]
      },
      "MyProfile": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "11111111111@c.us"
          },
          "picture": {
            "type": "string",
            "nullable": true,
            "example": "https://example.com/picture.jpg"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "picture",
          "name"
        ]
      },
      "ProfileNameRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "My New Name"
          }
        },
        "required": [
          "name"
        ]
      },
      "Result": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "default": true
          }
        },
        "required": [
          "success"
        ]
      },
      "ProfileStatusRequest": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "üéâ Hey there! I am using WhatsApp üéâ"
          }
        },
        "required": [
          "status"
        ]
      },
      "RemoteFile": {
        "type": "object",
        "properties": {
          "mimetype": {
            "type": "string",
            "description": "MIME type of the attachment.",
            "example": "image/jpeg"
          },
          "filename": {
            "type": "string",
            "description": "Document file name. Value can be null",
            "example": "filename.jpg"
          },
          "url": {
            "type": "string",
            "example": "https://github.com/devlikeapro/waha/raw/core/examples/waha.jpg"
          }
        },
        "required": [
          "mimetype",
          "url"
        ]
      },
      "BinaryFile": {
        "type": "object",
        "properties": {
          "mimetype": {
            "type": "string",
            "description": "MIME type of the attachment.",
            "example": "image/jpeg"
          },
          "filename": {
            "type": "string",
            "description": "Document file name. Optional",
            "example": "filename.jpeg"
          },
          "data": {
            "type": "string",
            "description": "Base64-encoded data of the file",
            "example": ""
          }
        },
        "required": [
          "mimetype",
          "data"
        ]
      },
      "ProfilePictureRequest": {
        "type": "object",
        "properties": {
          "file": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/RemoteFile"
              },
              {
                "$ref": "#/components/schemas/BinaryFile"
              }
            ]
          }
        },
        "required": [
          "file"
        ]
      },
      "MessageTextRequest": {
        "type": "object",
        "properties": {
          "chatId": {
            "type": "string",
            "example": "11111111111@c.us"
          },
          "reply_to": {
            "type": "string",
            "description": "The ID of the message to reply to - false_11111111111@c.us_AAAAAAAAAAAAAAAAAAAA",
            "example": null
          },
          "text": {
            "type": "string",
            "default": "Hi there!"
          },
          "linkPreview": {
            "type": "boolean",
            "default": true
          },
          "linkPreviewHighQuality": {
            "type": "boolean",
            "default": false
          },
          "session": {
            "type": "string",
            "default": "default"
          }
        },
        "required": [
          "chatId",
          "text",
          "session"
        ]
      },
      "S3MediaData": {
        "type": "object",
        "properties": {
          "Bucket": {
            "type": "string",
            "description": "The name of the S3 bucket",
            "example": "my-bucket"
          },
          "Key": {
            "type": "string",
            "description": "The key of the object in the S3 bucket",
            "example": "default/false_11111111111@c.us_AAAAAAAAAAAAAAAAAAAA.oga"
          }
        },
        "required": [
          "Bucket",
          "Key"
        ]
      },
      "WAMedia": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "The URL for the media in the message if any",
            "example": "http://localhost:3000/api/files/false_11111111111@c.us_AAAAAAAAAAAAAAAAAAAA.oga"
          },
          "mimetype": {
            "type": "string",
            "description": "mimetype for the media in the message if any",
            "example": "audio/jpeg"
          },
          "filename": {
            "type": "string",
            "description": "The original filename in mediaUrl in the message if any",
            "example": "example.pdf"
          },
          "s3": {
            "description": "S3 attributes for the media in the message if you are using S3 media storage",
            "allOf": [
              {
                "$ref": "#/components/schemas/S3MediaData"
              }
            ]
          },
          "error": {
            "type": "object",
            "description": "Error message if there's an error downloading the media",
            "example": null
          }
        }
      },
      "WALocation": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "latitude": {
            "type": "string"
          },
          "longitude": {
            "type": "string"
          }
        },
        "required": [
          "latitude",
          "longitude"
        ]
      },
      "ReplyToMessage": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Message ID",
            "example": "AAAAAAAAAAAAAAAAAAAA"
          },
          "participant": {
            "type": "string",
            "example": "11111111111@c.us"
          },
          "body": {
            "type": "string",
            "example": "Hello!"
          },
          "_data": {
            "type": "object",
            "description": "Raw data from reply's message"
          }
        },
        "required": [
          "id"
        ]
      },
      "WAMessage": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Message ID",
            "example": "false_11111111111@c.us_AAAAAAAAAAAAAAAAAAAA"
          },
          "timestamp": {
            "type": "number",
            "description": "Unix timestamp for when the message was created",
            "example": 1666943582
          },
          "from": {
            "type": "string",
            "description": "ID for the Chat that this message was sent to, except if the message was sent by the current user ",
            "example": "11111111111@c.us"
          },
          "fromMe": {
            "type": "boolean",
            "description": "Indicates if the message was sent by the current user"
          },
          "source": {
            "enum": [
              "api",
              "app"
            ],
            "type": "string",
            "description": "The device that sent the message - either API or APP. Available in events (webhooks/websockets) only and only \"fromMe: true\" messages.",
            "example": "api"
          },
          "to": {
            "type": "string",
            "description": "\n* ID for who this message is for.\n* If the message is sent by the current user, it will be the Chat to which the message is being sent.\n* If the message is sent by another user, it will be the ID for the current user.\n",
            "example": "11111111111@c.us"
          },
          "participant": {
            "type": "string",
            "description": "For groups - participant who sent the message"
          },
          "body": {
            "type": "string",
            "description": "Message content"
          },
          "hasMedia": {
            "type": "boolean",
            "description": "Indicates if the message has media available for download"
          },
          "media": {
            "description": "Media object for the message if any and downloaded",
            "allOf": [
              {
                "$ref": "#/components/schemas/WAMedia"
              }
            ]
          },
          "mediaUrl": {
            "type": "string",
            "description": "Use `media.url` instead! The URL for the media in the message if any",
            "deprecated": true,
            "example": "http://localhost:3000/api/files/false_11111111111@c.us_AAAAAAAAAAAAAAAAAAAA.oga"
          },
          "ack": {
            "enum": [
              -1,
              0,
              1,
              2,
              3,
              4
            ],
            "type": "number",
            "description": "ACK status for the message"
          },
          "ackName": {
            "type": "string",
            "description": "ACK status name for the message"
          },
          "author": {
            "type": "string",
            "description": "If the message was sent to a group, this field will contain the user that sent the message."
          },
          "location": {
            "description": "Location information contained in the message, if the message is type \"location\"",
            "allOf": [
              {
                "$ref": "#/components/schemas/WALocation"
              }
            ]
          },
          "vCards": {
            "description": "List of vCards contained in the message.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_data": {
            "type": "object",
            "description": "Message in a raw format that we get from WhatsApp. May be changed anytime, use it with caution! It depends a lot on the underlying backend."
          },
          "replyTo": {
            "$ref": "#/components/schemas/ReplyToMessage"
          }
        },
        "required": [
          "id",
          "timestamp",
          "from",
          "fromMe",
          "source",
          "to",
          "participant",
          "body",
          "hasMedia",
          "mediaUrl",
          "ack",
          "ackName"
        ]
      },
      "MessageImageRequest": {
        "type": "object",
        "properties": {
          "chatId": {
            "type": "string",
            "example": "11111111111@c.us"
          },
          "file": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/RemoteFile"
              },
              {
                "$ref": "#/components/schemas/BinaryFile"
              }
            ]
          },
          "reply_to": {
            "type": "string",
            "description": "The ID of the message to reply to - false_11111111111@c.us_AAAAAAAAAAAAAAAAAAAA",
            "example": null
          },
          "caption": {
            "type": "string"
          },
          "session": {
            "type": "string",
            "default": "default"
          }
        },
        "required": [
          "chatId",
          "file",
          "session"
        ]
      },
      "MessageFileRequest": {
        "type": "object",
        "properties": {
          "chatId": {
            "type": "string",
            "example": "11111111111@c.us"
          },
          "file": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/RemoteFile"
              },
              {
                "$ref": "#/components/schemas/BinaryFile"
              }
            ]
          },
          "reply_to": {
            "type": "string",
            "description": "The ID of the message to reply to - false_11111111111@c.us_AAAAAAAAAAAAAAAAAAAA",
            "example": null
          },
          "caption": {
            "type": "string"
          },
          "session": {
            "type": "string",
            "default": "default"
          }
        },
        "required": [
          "chatId",
          "file",
          "session"
        ]
      },
      "VoiceBinaryFile": {
        "type": "object",
        "properties": {
          "mimetype": {
            "type": "object",
            "default": "audio/ogg; codecs=opus",
            "description": "MIME type of the attachment."
          },
          "filename": {
            "type": "object",
            "default": "voice-message.mp3",
            "description": "Document file name. Optional"
          },
          "data": {
            "type": "string",
            "description": "Base64-encoded data of the file",
            "example": ""
          }
        },
        "required": [
          "mimetype",
          "filename",
          "data"
        ]
      },
      "VoiceRemoteFile": {
        "type": "object",
        "properties": {
          "mimetype": {
            "type": "object",
            "default": "audio/ogg; codecs=opus",
            "description": "MIME type of the attachment."
          },
          "url": {
            "type": "string",
            "example": "https://github.com/devlikeapro/waha/raw/core/examples/dev.likeapro.opus"
          }
        },
        "required": [
          "mimetype",
          "url"
        ]
      },
      "MessageVoiceRequest": {
        "type": "object",
        "properties": {
          "chatId": {
            "type": "string",
            "example": "11111111111@c.us"
          },
          "file": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/VoiceRemoteFile"
              },
              {
                "$ref": "#/components/schemas/VoiceBinaryFile"
              }
            ]
          },
          "reply_to": {
            "type": "string",
            "description": "The ID of the message to reply to - false_11111111111@c.us_AAAAAAAAAAAAAAAAAAAA",
            "example": null
          },
          "session": {
            "type": "string",
            "default": "default"
          }
        },
        "required": [
          "chatId",
          "file",
          "session"
        ]
      },
      "VideoRemoteFile": {
        "type": "object",
        "properties": {
          "mimetype": {
            "type": "object",
            "default": "video/mp4",
            "description": "MIME type of the attachment."
          },
          "filename": {
            "type": "object",
            "default": "video.mp4",
            "description": "Document file name. Optional"
          },
          "url": {
            "type": "string",
            "example": "https://github.com/devlikeapro/waha/raw/core/examples/video.mp4"
          }
        },
        "required": [
          "mimetype",
          "filename",
          "url"
        ]
      },
      "VideoBinaryFile": {
        "type": "object",
        "properties": {
          "mimetype": {
            "type": "object",
            "default": "video/mp4",
            "description": "MIME type of the attachment."
          },
          "filename": {
            "type": "object",
            "default": "video.mp4",
            "description": "Document file name. Optional"
          },
          "data": {
            "type": "string",
            "description": "Base64-encoded data of the file",
            "example": ""
          }
        },
        "required": [
          "mimetype",
          "filename",
          "data"
        ]
      },
      "MessageVideoRequest": {
        "type": "object",
        "properties": {
          "chatId": {
            "type": "string",
            "example": "11111111111@c.us"
          },
          "file": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/VideoRemoteFile"
              },
              {
                "$ref": "#/components/schemas/VideoBinaryFile"
              }
            ]
          },
          "reply_to": {
            "type": "string",
            "description": "The ID of the message to reply to - false_11111111111@c.us_AAAAAAAAAAAAAAAAAAAA",
            "example": null
          },
          "asNote": {
            "type": "boolean",
            "description": "Send as video note (aka instant or round video).",
            "example": false
          },
          "caption": {
            "type": "string",
            "default": "Just watch at this!"
          },
          "session": {
            "type": "string",
            "default": "default"
          }
        },
        "required": [
          "chatId",
          "file",
          "session"
        ]
      },
      "FileURL": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "example": "https://github.com/devlikeapro/waha/raw/core/examples/waha.jpg"
          }
        }
      },
      "FileContent": {
        "type": "object",
        "properties": {
          "data": {
            "type": "string",
            "description": "Base64-encoded data of the file",
            "example": ""
          }
        }
      },
      "LinkPreviewData": {
        "type": "object",
        "properties": {
          "image": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/FileURL"
              },
              {
                "$ref": "#/components/schemas/FileContent"
              }
            ],
            "example": {
              "url": "https://github.com/devlikeapro/waha/raw/core/examples/waha.jpg"
            }
          },
          "url": {
            "type": "string",
            "default": "https://github.com/"
          },
          "title": {
            "type": "string",
            "default": "Your Title"
          },
          "description": {
            "type": "string",
            "default": "Check this out, amazing!"
          }
        },
        "required": [
          "url",
          "title",
          "description"
        ]
      },
      "MessageLinkCustomPreviewRequest": {
        "type": "object",
        "properties": {
          "chatId": {
            "type": "string",
            "example": "11111111111@c.us"
          },
          "text": {
            "type": "string",
            "default": "Check this out! https://github.com/",
            "description": "The text to send. MUST include the URL provided in preview.url"
          },
          "reply_to": {
            "type": "string",
            "description": "The ID of the message to reply to - false_11111111111@c.us_AAAAAAAAAAAAAAAAAAAA",
            "example": null
          },
          "linkPreviewHighQuality": {
            "type": "boolean",
            "default": true
          },
          "preview": {
            "$ref": "#/components/schemas/LinkPreviewData"
          },
          "session": {
            "type": "string",
            "default": "default"
          }
        },
        "required": [
          "chatId",
          "text",
          "preview",
          "session"
        ]
      },
      "Button": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string",
            "example": "Button Text"
          },
          "id": {
            "type": "string",
            "example": "321321"
          },
          "url": {
            "type": "string",
            "example": "https://example.com"
          },
          "phoneNumber": {
            "type": "string",
            "example": "+1234567890"
          },
          "copyCode": {
            "type": "string",
            "example": "4321"
          },
          "type": {
            "type": "string",
            "default": "reply",
            "enum": [
              "reply",
              "url",
              "call",
              "copy"
            ]
          }
        },
        "required": [
          "text",
          "type"
        ]
      },
      "SendButtonsRequest": {
        "type": "object",
        "properties": {
          "chatId": {
            "type": "string",
            "example": "11111111111@c.us"
          },
          "header": {
            "type": "string",
            "example": "How are you?"
          },
          "headerImage": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/RemoteFile"
              },
              {
                "$ref": "#/components/schemas/BinaryFile"
              }
            ]
          },
          "body": {
            "type": "string",
            "example": "Tell us how are you please üôè"
          },
          "footer": {
            "type": "string",
            "example": "If you have any questions, please send it in the chat"
          },
          "buttons": {
            "example": [
              {
                "type": "reply",
                "text": "I am good!"
              },
              {
                "type": "call",
                "text": "Call us",
                "phoneNumber": "+1234567890"
              },
              {
                "type": "copy",
                "text": "Copy code",
                "copyCode": "4321"
              },
              {
                "type": "url",
                "text": "How did you do that?",
                "url": "https://waha.devlike.pro"
              }
            ],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Button"
            }
          },
          "session": {
            "type": "string",
            "default": "default"
          }
        },
        "required": [
          "chatId",
          "header",
          "body",
          "footer",
          "buttons",
          "session"
        ]
      },
      "MessageForwardRequest": {
        "type": "object",
        "properties": {
          "chatId": {
            "type": "string",
            "example": "11111111111@c.us"
          },
          "messageId": {
            "type": "string",
            "example": "false_11111111111@c.us_AAAAAAAAAAAAAAAAAAAA"
          },
          "session": {
            "type": "string",
            "default": "default"
          }
        },
        "required": [
          "chatId",
          "messageId",
          "session"
        ]
      },
      "SendSeenRequest": {
        "type": "object",
        "properties": {
          "chatId": {
            "type": "string",
            "example": "11111111111@c.us"
          },
          "messageId": {
            "type": "string",
            "example": null,
            "deprecated": true
          },
          "messageIds": {
            "example": [
              "false_11111111111@c.us_AAAAAAAAAAAAAAAAAAAA"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "participant": {
            "type": "string",
            "example": "11111111111@c.us",
            "default": null,
            "description": "NOWEB engine only - the ID of the user that sent the message (undefined for individual chats)"
          },
          "session": {
            "type": "string",
            "default": "default"
          }
        },
        "required": [
          "chatId",
          "session"
        ]
      },
      "ChatRequest": {
        "type": "object",
        "properties": {
          "chatId": {
            "type": "string",
            "example": "11111111111@c.us"
          },
          "session": {
            "type": "string",
            "default": "default"
          }
        },
        "required": [
          "chatId",
          "session"
        ]
      },
      "MessageReactionRequest": {
        "type": "object",
        "properties": {
          "messageId": {
            "type": "string",
            "example": "false_11111111111@c.us_AAAAAAAAAAAAAAAAAAAA"
          },
          "reaction": {
            "type": "string",
            "description": "Emoji to react with. Send an empty string to remove the reaction",
            "example": "üëç"
          },
          "session": {
            "type": "string",
            "default": "default"
          }
        },
        "required": [
          "messageId",
          "reaction",
          "session"
        ]
      },
      "MessageStarRequest": {
        "type": "object",
        "properties": {
          "messageId": {
            "type": "string",
            "example": "false_11111111111@c.us_AAAAAAAAAAAAAAAAAAAA"
          },
          "chatId": {
            "type": "string",
            "example": "11111111111@c.us"
          },
          "star": {
            "type": "boolean"
          },
          "session": {
            "type": "string",
            "default": "default"
          }
        },
        "required": [
          "messageId",
          "chatId",
          "star",
          "session"
        ]
      },
      "MessagePoll": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "How are you?"
          },
          "options": {
            "example": [
              "Awesome!",
              "Good!",
              "Not bad!"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "multipleAnswers": {
            "type": "object",
            "default": false
          }
        },
        "required": [
          "name",
          "options",
          "multipleAnswers"
        ]
      },
      "MessagePollRequest": {
        "type": "object",
        "properties": {
          "chatId": {
            "type": "string",
            "example": "11111111111@c.us"
          },
          "reply_to": {
            "type": "string",
            "description": "The ID of the message to reply to - false_11111111111@c.us_AAAAAAAAAAAAAAAAAAAA",
            "example": null
          },
          "poll": {
            "$ref": "#/components/schemas/MessagePoll"
          },
          "session": {
            "type": "string",
            "default": "default"
          }
        },
        "required": [
          "chatId",
          "poll",
          "session"
        ]
      },
      "MessageLocationRequest": {
        "type": "object",
        "properties": {
          "chatId": {
            "type": "string",
            "example": "11111111111@c.us"
          },
          "latitude": {
            "type": "number",
            "example": 38.8937255
          },
          "longitude": {
            "type": "number",
            "example": -77.0969763
          },
          "title": {
            "type": "string",
            "example": "Our office"
          },
          "reply_to": {
            "type": "string",
            "description": "The ID of the message to reply to - false_11111111111@c.us_AAAAAAAAAAAAAAAAAAAA",
            "example": null
          },
          "session": {
            "type": "string",
            "default": "default"
          }
        },
        "required": [
          "chatId",
          "latitude",
          "longitude",
          "title",
          "session"
        ]
      },
      "Contact": {
        "type": "object",
        "properties": {
          "fullName": {
            "type": "string",
            "example": "John Doe",
            "description": "The full name of the contact"
          },
          "organization": {
            "type": "string",
            "example": "Company Name",
            "description": "The organization of the contact"
          },
          "phoneNumber": {
            "type": "string",
            "example": "+91 11111 11111",
            "description": "The phone number of the contact"
          },
          "whatsappId": {
            "type": "string",
            "example": "911111111111",
            "description": "The whatsapp id of the contact. DO NOT add + or @c.us"
          },
          "vcard": {
            "type": "string",
            "default": null
          }
        },
        "required": [
          "fullName",
          "phoneNumber",
          "vcard"
        ]
      },
      "VCardContact": {
        "type": "object",
        "properties": {
          "vcard": {
            "type": "string",
            "example": "BEGIN:VCARD\nVERSION:3.0\nFN:Jane Doe\nORG:Company Name;\nTEL;type=CELL;type=VOICE;waid=911111111111:+91 11111 11111\nEND:VCARD",
            "description": "The vcard string"
          }
        },
        "required": [
          "vcard"
        ]
      },
      "MessageContactVcardRequest": {
        "type": "object",
        "properties": {
          "chatId": {
            "type": "string",
            "example": "11111111111@c.us"
          },
          "contacts": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/VCardContact"
                },
                {
                  "$ref": "#/components/schemas/Contact"
                }
              ]
            }
          },
          "session": {
            "type": "string",
            "default": "default"
          }
        },
        "required": [
          "chatId",
          "contacts",
          "session"
        ]
      },
      "MessageButtonReply": {
        "type": "object",
        "properties": {
          "chatId": {
            "type": "string",
            "example": "11111111111@c.us"
          },
          "replyTo": {
            "type": "string",
            "description": "The ID of the message to reply to - false_11111111111@c.us_AAAAAAAAAAAAAAAAAAAA",
            "example": null
          },
          "selectedDisplayText": {
            "type": "string"
          },
          "selectedButtonID": {
            "type": "string"
          },
          "session": {
            "type": "string",
            "default": "default"
          }
        },
        "required": [
          "chatId",
          "selectedDisplayText",
          "selectedButtonID",
          "session"
        ]
      },
      "WANumberExistResult": {
        "type": "object",
        "properties": {
          "chatId": {
            "type": "string",
            "example": "Chat id for the phone number. Undefined if the number does not exist"
          },
          "numberExists": {
            "type": "boolean"
          }
        },
        "required": [
          "numberExists"
        ]
      },
      "MessageReplyRequest": {
        "type": "object",
        "properties": {
          "chatId": {
            "type": "string",
            "example": "11111111111@c.us"
          },
          "reply_to": {
            "type": "string",
            "description": "The ID of the message to reply to - false_11111111111@c.us_AAAAAAAAAAAAAAAAAAAA",
            "example": null
          },
          "text": {
            "type": "string",
            "default": "Hi there!"
          },
          "linkPreview": {
            "type": "boolean",
            "default": true
          },
          "linkPreviewHighQuality": {
            "type": "boolean",
            "default": false
          },
          "session": {
            "type": "string",
            "default": "default"
          }
        },
        "required": [
          "chatId",
          "text",
          "session"
        ]
      },
      "MessageLinkPreviewRequest": {
        "type": "object",
        "properties": {
          "chatId": {
            "type": "string",
            "example": "11111111111@c.us"
          },
          "session": {
            "type": "string",
            "default": "default"
          },
          "url": {
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        },
        "required": [
          "chatId",
          "session",
          "url",
          "title"
        ]
      },
      "ChatSummary": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "picture": {
            "type": "string",
            "nullable": true
          },
          "lastMessage": {
            "type": "object"
          },
          "_chat": {
            "type": "object"
          }
        },
        "required": [
          "id",
          "name",
          "picture",
          "lastMessage",
          "_chat"
        ]
      },
      "ChatPictureResponse": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          }
        },
        "required": [
          "url"
        ]
      },
      "ReadChatMessagesResponse": {
        "type": "object",
        "properties": {
          "ids": {
            "description": "Messages IDs that have been read",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PinMessageRequest": {
        "type": "object",
        "properties": {
          "duration": {
            "type": "number",
            "description": "Duration in seconds. 24 hours (86400), 7 days (604800), 30 days (2592000)",
            "example": 86400
          }
        },
        "required": [
          "duration"
        ]
      },
      "EditMessageRequest": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string",
            "default": "Hello, world!"
          },
          "linkPreview": {
            "type": "boolean",
            "default": true
          },
          "linkPreviewHighQuality": {
            "type": "boolean",
            "default": false
          }
        },
        "required": [
          "text"
        ]
      },
      "Channel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Newsletter id",
            "example": "123123123123@newsletter"
          },
          "name": {
            "type": "string",
            "description": "Channel name",
            "example": "Channel Name"
          },
          "invite": {
            "type": "string",
            "description": "Invite link",
            "example": "https://www.whatsapp.com/channel/111111111111111111111111"
          },
          "preview": {
            "type": "string",
            "description": "Preview for channel's picture",
            "example": "https://mmg.whatsapp.net/m1/v/t24/An&_nc_cat=10"
          },
          "picture": {
            "type": "string",
            "description": "Channel's picture",
            "example": "https://mmg.whatsapp.net/m1/v/t24/An&_nc_cat=10"
          },
          "role": {
            "enum": [
              "OWNER",
              "ADMIN",
              "SUBSCRIBER",
              "GUEST"
            ],
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "verified": {
            "type": "boolean"
          },
          "subscribersCount": {
            "type": "number"
          }
        },
        "required": [
          "id",
          "name",
          "invite",
          "role",
          "verified",
          "subscribersCount"
        ]
      },
      "CreateChannelRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Channel Name"
          },
          "description": {
            "type": "string",
            "example": "Channel Description"
          },
          "picture": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/RemoteFile"
              },
              {
                "$ref": "#/components/schemas/BinaryFile"
              }
            ]
          }
        },
        "required": [
          "name"
        ]
      },
      "ChannelMessage": {
        "type": "object",
        "properties": {
          "reactions": {
            "type": "object",
            "example": {
              "üëç": 10,
              "‚ù§Ô∏è": 5
            },
            "additionalProperties": {
              "type": "number"
            }
          },
          "message": {
            "$ref": "#/components/schemas/WAMessage"
          },
          "viewCount": {
            "type": "number"
          }
        },
        "required": [
          "reactions",
          "message",
          "viewCount"
        ]
      },
      "ChannelSearchByView": {
        "type": "object",
        "properties": {
          "view": {
            "type": "string",
            "default": "RECOMMENDED"
          },
          "countries": {
            "default": [
              "US"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "categories": {
            "default": [],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "limit": {
            "type": "number",
            "default": 50
          },
          "startCursor": {
            "type": "string",
            "default": ""
          }
        },
        "required": [
          "view",
          "countries",
          "categories",
          "limit",
          "startCursor"
        ]
      },
      "ChannelPagination": {
        "type": "object",
        "properties": {
          "startCursor": {
            "type": "string",
            "nullable": true
          },
          "endCursor": {
            "type": "string",
            "nullable": true
          },
          "hasNextPage": {
            "type": "boolean"
          },
          "hasPreviousPage": {
            "type": "boolean"
          }
        },
        "required": [
          "startCursor",
          "endCursor",
          "hasNextPage",
          "hasPreviousPage"
        ]
      },
      "ChannelPublicInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Newsletter id",
            "example": "123123123123@newsletter"
          },
          "name": {
            "type": "string",
            "description": "Channel name",
            "example": "Channel Name"
          },
          "invite": {
            "type": "string",
            "description": "Invite link",
            "example": "https://www.whatsapp.com/channel/111111111111111111111111"
          },
          "preview": {
            "type": "string",
            "description": "Preview for channel's picture",
            "example": "https://mmg.whatsapp.net/m1/v/t24/An&_nc_cat=10"
          },
          "picture": {
            "type": "string",
            "description": "Channel's picture",
            "example": "https://mmg.whatsapp.net/m1/v/t24/An&_nc_cat=10"
          },
          "description": {
            "type": "string"
          },
          "verified": {
            "type": "boolean"
          },
          "subscribersCount": {
            "type": "number"
          }
        },
        "required": [
          "id",
          "name",
          "invite",
          "verified",
          "subscribersCount"
        ]
      },
      "ChannelListResult": {
        "type": "object",
        "properties": {
          "page": {
            "$ref": "#/components/schemas/ChannelPagination"
          },
          "channels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChannelPublicInfo"
            }
          }
        },
        "required": [
          "page",
          "channels"
        ]
      },
      "ChannelSearchByText": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string",
            "default": "Donald Trump"
          },
          "categories": {
            "default": [],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "limit": {
            "type": "number",
            "default": 50
          },
          "startCursor": {
            "type": "string",
            "default": ""
          }
        },
        "required": [
          "text",
          "categories",
          "limit",
          "startCursor"
        ]
      },
      "ChannelView": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "value",
          "name"
        ]
      },
      "ChannelCountry": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "code",
          "name"
        ]
      },
      "ChannelCategory": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "value",
          "name"
        ]
      },
      "TextStatus": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Pre-generated status message id",
            "example": "BBBBBBBBBBBBBBBBB",
            "default": null
          },
          "contacts": {
            "description": "Contact list to send the status to.",
            "example": null,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "text": {
            "type": "string",
            "default": "Have a look! https://github.com/"
          },
          "backgroundColor": {
            "type": "string",
            "default": "#38b42f"
          },
          "font": {
            "type": "number",
            "default": 0
          },
          "linkPreview": {
            "type": "boolean",
            "default": true
          },
          "linkPreviewHighQuality": {
            "type": "boolean",
            "default": false
          }
        },
        "required": [
          "text",
          "backgroundColor",
          "font"
        ]
      },
      "ImageStatus": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Pre-generated status message id",
            "example": "BBBBBBBBBBBBBBBBB",
            "default": null
          },
          "contacts": {
            "description": "Contact list to send the status to.",
            "example": null,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "file": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/RemoteFile"
              },
              {
                "$ref": "#/components/schemas/BinaryFile"
              }
            ]
          },
          "caption": {
            "type": "string"
          }
        },
        "required": [
          "file"
        ]
      },
      "VoiceStatus": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Pre-generated status message id",
            "example": "BBBBBBBBBBBBBBBBB",
            "default": null
          },
          "contacts": {
            "description": "Contact list to send the status to.",
            "example": null,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "file": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/VoiceRemoteFile"
              },
              {
                "$ref": "#/components/schemas/VoiceBinaryFile"
              }
            ]
          },
          "backgroundColor": {
            "type": "string",
            "default": "#38b42f"
          }
        },
        "required": [
          "file",
          "backgroundColor"
        ]
      },
      "VideoStatus": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Pre-generated status message id",
            "example": "BBBBBBBBBBBBBBBBB",
            "default": null
          },
          "contacts": {
            "description": "Contact list to send the status to.",
            "example": null,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "file": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/VideoRemoteFile"
              },
              {
                "$ref": "#/components/schemas/VideoBinaryFile"
              }
            ]
          },
          "caption": {
            "type": "string"
          }
        },
        "required": [
          "file"
        ]
      },
      "DeleteStatusRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Status message id to delete",
            "example": "AAAAAAAAAAAAAAAAA",
            "default": null
          },
          "contacts": {
            "description": "Contact list to send the status to.",
            "example": null,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "NewMessageIDResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Pre-generated message id",
            "example": "BBBBBBBBBBBBBBBBB"
          }
        },
        "required": [
          "id"
        ]
      },
      "Label": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "1",
            "description": "Label ID"
          },
          "name": {
            "type": "string",
            "example": "Lead",
            "description": "Label name"
          },
          "color": {
            "type": "number",
            "example": 0,
            "description": "Color number, not hex"
          },
          "colorHex": {
            "type": "string",
            "example": "#ff9485",
            "description": "Color in hex"
          }
        },
        "required": [
          "id",
          "name",
          "color",
          "colorHex"
        ]
      },
      "LabelBody": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Lead",
            "description": "Label name"
          },
          "colorHex": {
            "type": "string",
            "example": "#ff9485",
            "description": "Color in hex"
          },
          "color": {
            "type": "number",
            "example": null,
            "description": "Color number, not hex"
          }
        },
        "required": [
          "name"
        ]
      },
      "LabelID": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "1",
            "description": "Label ID"
          }
        },
        "required": [
          "id"
        ]
      },
      "SetLabelsRequest": {
        "type": "object",
        "properties": {
          "labels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LabelID"
            }
          }
        },
        "required": [
          "labels"
        ]
      },
      "ContactRequest": {
        "type": "object",
        "properties": {
          "contactId": {
            "type": "string",
            "example": "11111111111@c.us"
          },
          "session": {
            "type": "string",
            "default": "default"
          }
        },
        "required": [
          "contactId",
          "session"
        ]
      },
      "Participant": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "123456789@c.us"
          }
        },
        "required": [
          "id"
        ]
      },
      "CreateGroupRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "participants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Participant"
            }
          }
        },
        "required": [
          "name",
          "participants"
        ]
      },
      "JoinGroupRequest": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Group code (123) or url (https://chat.whatsapp.com/123)",
            "example": "https://chat.whatsapp.com/1234567890abcdef"
          }
        },
        "required": [
          "code"
        ]
      },
      "JoinGroupResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Group ID",
            "example": "123@g.us"
          }
        },
        "required": [
          "id"
        ]
      },
      "CountResponse": {
        "type": "object",
        "properties": {
          "count": {
            "type": "number",
            "default": 0
          }
        },
        "required": [
          "count"
        ]
      },
      "DescriptionRequest": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          }
        },
        "required": [
          "description"
        ]
      },
      "SubjectRequest": {
        "type": "object",
        "properties": {
          "subject": {
            "type": "string"
          }
        },
        "required": [
          "subject"
        ]
      },
      "SettingsSecurityChangeInfo": {
        "type": "object",
        "properties": {
          "adminsOnly": {
            "type": "boolean",
            "default": true
          }
        },
        "required": [
          "adminsOnly"
        ]
      },
      "ParticipantsRequest": {
        "type": "object",
        "properties": {
          "participants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Participant"
            }
          }
        },
        "required": [
          "participants"
        ]
      },
      "WAHASessionPresence": {
        "type": "object",
        "properties": {
          "chatId": {
            "type": "string",
            "description": "Chat ID - either group id or contact id",
            "example": "11111111111@c.us"
          },
          "presence": {
            "type": "string",
            "enum": [
              "offline",
              "online",
              "typing",
              "recording",
              "paused"
            ]
          }
        },
        "required": [
          "chatId",
          "presence"
        ]
      },
      "WAHAPresenceData": {
        "type": "object",
        "properties": {
          "participant": {
            "type": "string",
            "description": "Chat ID - participant or contact id",
            "example": "11111111111@c.us"
          },
          "lastSeen": {
            "type": "number",
            "example": 1686568773
          },
          "lastKnownPresence": {
            "type": "string",
            "enum": [
              "offline",
              "online",
              "typing",
              "recording",
              "paused"
            ]
          }
        },
        "required": [
          "participant",
          "lastKnownPresence"
        ]
      },
      "WAHAChatPresences": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Chat ID - either group id or contact id",
            "example": "11111111111@c.us"
          },
          "presences": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WAHAPresenceData"
            }
          }
        },
        "required": [
          "id",
          "presences"
        ]
      },
      "PingResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "default": "pong"
          }
        },
        "required": [
          "message"
        ]
      },
      "WAHAEnvironment": {
        "type": "object",
        "properties": {
          "version": {
            "type": "string",
            "example": "YYYY.MM.BUILD"
          },
          "engine": {
            "type": "string",
            "example": "WEBJS"
          },
          "tier": {
            "type": "string",
            "example": "PLUS"
          },
          "browser": {
            "type": "string",
            "example": "/usr/path/to/bin/google-chrome"
          }
        },
        "required": [
          "version",
          "engine",
          "tier",
          "browser"
        ]
      },
      "WorkerInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "waha",
            "description": "The worker ID."
          }
        },
        "required": [
          "id"
        ]
      },
      "ServerStatusResponse": {
        "type": "object",
        "properties": {
          "startTimestamp": {
            "type": "number",
            "example": 1723788847247,
            "description": "The timestamp when the server started (milliseconds)."
          },
          "uptime": {
            "type": "number",
            "example": 3600000,
            "description": "The uptime of the server in milliseconds."
          },
          "worker": {
            "$ref": "#/components/schemas/WorkerInfo"
          }
        },
        "required": [
          "startTimestamp",
          "uptime",
          "worker"
        ]
      },
      "StopRequest": {
        "type": "object",
        "properties": {
          "force": {
            "type": "boolean",
            "default": false,
            "example": false,
            "description": "By default, it gracefully stops the server, but you can force it to terminate immediately."
          }
        }
      },
      "StopResponse": {
        "type": "object",
        "properties": {
          "stopping": {
            "type": "boolean",
            "default": true,
            "example": true,
            "description": "Always 'true' if the server is stopping."
          }
        },
        "required": [
          "stopping"
        ]
      },
      "WASessionStatusBody": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "default"
          },
          "status": {
            "type": "string",
            "enum": [
              "STOPPED",
              "STARTING",
              "SCAN_QR_CODE",
              "WORKING",
              "FAILED"
            ]
          }
        },
        "required": [
          "name",
          "status"
        ]
      },
      "WAHAWebhookSessionStatus": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "evt_01aaaaaaaaaaaaaaaaaaaaaaaa",
            "description": "Unique identifier for the event - lower case ULID format. https://github.com/ulid/spec"
          },
          "timestamp": {
            "type": "number",
            "example": 1634567890123,
            "description": "Unix timestamp (ms) for when the event was created."
          },
          "session": {
            "type": "string",
            "example": "default"
          },
          "metadata": {
            "example": {
              "user.id": "123",
              "user.email": "email@example.com"
            },
            "description": "Metadata for the session.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Map"
              }
            ]
          },
          "engine": {
            "enum": [
              "WEBJS",
              "NOWEB",
              "GOWS"
            ],
            "type": "string",
            "example": "WEBJS"
          },
          "event": {
            "enum": [
              "session.status",
              "message",
              "message.reaction",
              "message.any",
              "message.ack",
              "message.waiting",
              "message.revoked",
              "state.change",
              "group.join",
              "group.leave",
              "group.v2.join",
              "group.v2.leave",
              "group.v2.update",
              "group.v2.participants",
              "presence.update",
              "poll.vote",
              "poll.vote.failed",
              "chat.archive",
              "call.received",
              "call.accepted",
              "call.rejected",
              "label.upsert",
              "label.deleted",
              "label.chat.added",
              "label.chat.deleted",
              "engine.event"
            ],
            "type": "object",
            "default": "session.status",
            "description": "The event is triggered when the session status changes."
          },
          "payload": {
            "$ref": "#/components/schemas/WASessionStatusBody"
          },
          "me": {
            "$ref": "#/components/schemas/MeInfo"
          },
          "environment": {
            "$ref": "#/components/schemas/WAHAEnvironment"
          }
        },
        "required": [
          "id",
          "timestamp",
          "session",
          "engine",
          "event",
          "payload",
          "environment"
        ]
      },
      "WAHAWebhookMessage": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "evt_01aaaaaaaaaaaaaaaaaaaaaaaa",
            "description": "Unique identifier for the event - lower case ULID format. https://github.com/ulid/spec"
          },
          "timestamp": {
            "type": "number",
            "example": 1634567890123,
            "description": "Unix timestamp (ms) for when the event was created."
          },
          "session": {
            "type": "string",
            "example": "default"
          },
          "metadata": {
            "example": {
              "user.id": "123",
              "user.email": "email@example.com"
            },
            "description": "Metadata for the session.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Map"
              }
            ]
          },
          "engine": {
            "enum": [
              "WEBJS",
              "NOWEB",
              "GOWS"
            ],
            "type": "string",
            "example": "WEBJS"
          },
          "event": {
            "enum": [
              "session.status",
              "message",
              "message.reaction",
              "message.any",
              "message.ack",
              "message.waiting",
              "message.revoked",
              "state.change",
              "group.join",
              "group.leave",
              "group.v2.join",
              "group.v2.leave",
              "group.v2.update",
              "group.v2.participants",
              "presence.update",
              "poll.vote",
              "poll.vote.failed",
              "chat.archive",
              "call.received",
              "call.accepted",
              "call.rejected",
              "label.upsert",
              "label.deleted",
              "label.chat.added",
              "label.chat.deleted",
              "engine.event"
            ],
            "type": "object",
            "default": "message",
            "description": "Incoming message."
          },
          "payload": {
            "$ref": "#/components/schemas/WAMessage"
          },
          "me": {
            "$ref": "#/components/schemas/MeInfo"
          },
          "environment": {
            "$ref": "#/components/schemas/WAHAEnvironment"
          }
        },
        "required": [
          "id",
          "timestamp",
          "session",
          "engine",
          "event",
          "payload",
          "environment"
        ]
      },
      "WAReaction": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string",
            "description": "Reaction to the message. Either the reaction (emoji) or empty string to remove the reaction"
          },
          "messageId": {
            "type": "string",
            "description": "Message ID for the message to react to",
            "example": "false_11111111111@c.us_AAAAAAAAAAAAAAAAAAAA"
          }
        },
        "required": [
          "text",
          "messageId"
        ]
      },
      "WAMessageReaction": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Message ID",
            "example": "false_11111111111@c.us_AAAAAAAAAAAAAAAAAAAA"
          },
          "timestamp": {
            "type": "number",
            "description": "Unix timestamp for when the message was created",
            "example": 1666943582
          },
          "from": {
            "type": "string",
            "description": "ID for the Chat that this message was sent to, except if the message was sent by the current user ",
            "example": "11111111111@c.us"
          },
          "fromMe": {
            "type": "boolean",
            "description": "Indicates if the message was sent by the current user"
          },
          "source": {
            "enum": [
              "api",
              "app"
            ],
            "type": "string",
            "description": "The device that sent the message - either API or APP. Available in events (webhooks/websockets) only and only \"fromMe: true\" messages.",
            "example": "api"
          },
          "to": {
            "type": "string",
            "description": "\n* ID for who this message is for.\n* If the message is sent by the current user, it will be the Chat to which the message is being sent.\n* If the message is sent by another user, it will be the ID for the current user.\n",
            "example": "11111111111@c.us"
          },
          "participant": {
            "type": "string",
            "description": "For groups - participant who sent the message"
          },
          "reaction": {
            "description": "Reaction to the message. Either the reaction (emoji) or empty string to remove the reaction",
            "allOf": [
              {
                "$ref": "#/components/schemas/WAReaction"
              }
            ]
          }
        },
        "required": [
          "id",
          "timestamp",
          "from",
          "fromMe",
          "source",
          "to",
          "participant",
          "reaction"
        ]
      },
      "WAHAWebhookMessageReaction": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "evt_01aaaaaaaaaaaaaaaaaaaaaaaa",
            "description": "Unique identifier for the event - lower case ULID format. https://github.com/ulid/spec"
          },
          "timestamp": {
            "type": "number",
            "example": 1634567890123,
            "description": "Unix timestamp (ms) for when the event was created."
          },
          "session": {
            "type": "string",
            "example": "default"
          },
          "metadata": {
            "example": {
              "user.id": "123",
              "user.email": "email@example.com"
            },
            "description": "Metadata for the session.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Map"
              }
            ]
          },
          "engine": {
            "enum": [
              "WEBJS",
              "NOWEB",
              "GOWS"
            ],
            "type": "string",
            "example": "WEBJS"
          },
          "event": {
            "enum": [
              "session.status",
              "message",
              "message.reaction",
              "message.any",
              "message.ack",
              "message.waiting",
              "message.revoked",
              "state.change",
              "group.join",
              "group.leave",
              "group.v2.join",
              "group.v2.leave",
              "group.v2.update",
              "group.v2.participants",
              "presence.update",
              "poll.vote",
              "poll.vote.failed",
              "chat.archive",
              "call.received",
              "call.accepted",
              "call.rejected",
              "label.upsert",
              "label.deleted",
              "label.chat.added",
              "label.chat.deleted",
              "engine.event"
            ],
            "type": "object",
            "default": "message.reaction",
            "description": "The event is triggered when a user reacts or removes a reaction."
          },
          "payload": {
            "$ref": "#/components/schemas/WAMessageReaction"
          },
          "me": {
            "$ref": "#/components/schemas/MeInfo"
          },
          "environment": {
            "$ref": "#/components/schemas/WAHAEnvironment"
          }
        },
        "required": [
          "id",
          "timestamp",
          "session",
          "engine",
          "event",
          "payload",
          "environment"
        ]
      },
      "WAHAWebhookMessageAny": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "evt_01aaaaaaaaaaaaaaaaaaaaaaaa",
            "description": "Unique identifier for the event - lower case ULID format. https://github.com/ulid/spec"
          },
          "timestamp": {
            "type": "number",
            "example": 1634567890123,
            "description": "Unix timestamp (ms) for when the event was created."
          },
          "session": {
            "type": "string",
            "example": "default"
          },
          "metadata": {
            "example": {
              "user.id": "123",
              "user.email": "email@example.com"
            },
            "description": "Metadata for the session.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Map"
              }
            ]
          },
          "engine": {
            "enum": [
              "WEBJS",
              "NOWEB",
              "GOWS"
            ],
            "type": "string",
            "example": "WEBJS"
          },
          "event": {
            "enum": [
              "session.status",
              "message",
              "message.reaction",
              "message.any",
              "message.ack",
              "message.waiting",
              "message.revoked",
              "state.change",
              "group.join",
              "group.leave",
              "group.v2.join",
              "group.v2.leave",
              "group.v2.update",
              "group.v2.participants",
              "presence.update",
              "poll.vote",
              "poll.vote.failed",
              "chat.archive",
              "call.received",
              "call.accepted",
              "call.rejected",
              "label.upsert",
              "label.deleted",
              "label.chat.added",
              "label.chat.deleted",
              "engine.event"
            ],
            "type": "object",
            "default": "message.any",
            "description": "Fired on all message creations, including your own."
          },
          "payload": {
            "$ref": "#/components/schemas/WAMessage"
          },
          "me": {
            "$ref": "#/components/schemas/MeInfo"
          },
          "environment": {
            "$ref": "#/components/schemas/WAHAEnvironment"
          }
        },
        "required": [
          "id",
          "timestamp",
          "session",
          "engine",
          "event",
          "payload",
          "environment"
        ]
      },
      "WAMessageAckBody": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Message ID",
            "example": "false_11111111111@c.us_AAAAAAAAAAAAAAAAAAAA"
          },
          "from": {
            "type": "string",
            "example": "11111111111@c.us"
          },
          "to": {
            "type": "string",
            "example": "11111111111@c.us"
          },
          "participant": {
            "type": "string",
            "example": "11111111111@c.us"
          },
          "fromMe": {
            "type": "boolean"
          },
          "ack": {
            "type": "number",
            "enum": [
              -1,
              0,
              1,
              2,
              3,
              4
            ]
          },
          "ackName": {
            "type": "string"
          },
          "_data": {
            "type": "object"
          }
        },
        "required": [
          "id",
          "from",
          "to",
          "participant",
          "fromMe",
          "ack",
          "ackName"
        ]
      },
      "WAHAWebhookMessageAck": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "evt_01aaaaaaaaaaaaaaaaaaaaaaaa",
            "description": "Unique identifier for the event - lower case ULID format. https://github.com/ulid/spec"
          },
          "timestamp": {
            "type": "number",
            "example": 1634567890123,
            "description": "Unix timestamp (ms) for when the event was created."
          },
          "session": {
            "type": "string",
            "example": "default"
          },
          "metadata": {
            "example": {
              "user.id": "123",
              "user.email": "email@example.com"
            },
            "description": "Metadata for the session.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Map"
              }
            ]
          },
          "engine": {
            "enum": [
              "WEBJS",
              "NOWEB",
              "GOWS"
            ],
            "type": "string",
            "example": "WEBJS"
          },
          "event": {
            "enum": [
              "session.status",
              "message",
              "message.reaction",
              "message.any",
              "message.ack",
              "message.waiting",
              "message.revoked",
              "state.change",
              "group.join",
              "group.leave",
              "group.v2.join",
              "group.v2.leave",
              "group.v2.update",
              "group.v2.participants",
              "presence.update",
              "poll.vote",
              "poll.vote.failed",
              "chat.archive",
              "call.received",
              "call.accepted",
              "call.rejected",
              "label.upsert",
              "label.deleted",
              "label.chat.added",
              "label.chat.deleted",
              "engine.event"
            ],
            "type": "object",
            "default": "message.ack",
            "description": "Receive events when server or recipient gets the message, read or played it."
          },
          "payload": {
            "$ref": "#/components/schemas/WAMessageAckBody"
          },
          "me": {
            "$ref": "#/components/schemas/MeInfo"
          },
          "environment": {
            "$ref": "#/components/schemas/WAHAEnvironment"
          }
        },
        "required": [
          "id",
          "timestamp",
          "session",
          "engine",
          "event",
          "payload",
          "environment"
        ]
      },
      "WAMessageRevokedBody": {
        "type": "object",
        "properties": {
          "after": {
            "$ref": "#/components/schemas/WAMessage"
          },
          "before": {
            "$ref": "#/components/schemas/WAMessage"
          },
          "_data": {
            "type": "object"
          }
        }
      },
      "WAHAWebhookMessageRevoked": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "evt_01aaaaaaaaaaaaaaaaaaaaaaaa",
            "description": "Unique identifier for the event - lower case ULID format. https://github.com/ulid/spec"
          },
          "timestamp": {
            "type": "number",
            "example": 1634567890123,
            "description": "Unix timestamp (ms) for when the event was created."
          },
          "session": {
            "type": "string",
            "example": "default"
          },
          "metadata": {
            "example": {
              "user.id": "123",
              "user.email": "email@example.com"
            },
            "description": "Metadata for the session.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Map"
              }
            ]
          },
          "engine": {
            "enum": [
              "WEBJS",
              "NOWEB",
              "GOWS"
            ],
            "type": "string",
            "example": "WEBJS"
          },
          "event": {
            "enum": [
              "session.status",
              "message",
              "message.reaction",
              "message.any",
              "message.ack",
              "message.waiting",
              "message.revoked",
              "state.change",
              "group.join",
              "group.leave",
              "group.v2.join",
              "group.v2.leave",
              "group.v2.update",
              "group.v2.participants",
              "presence.update",
              "poll.vote",
              "poll.vote.failed",
              "chat.archive",
              "call.received",
              "call.accepted",
              "call.rejected",
              "label.upsert",
              "label.deleted",
              "label.chat.added",
              "label.chat.deleted",
              "engine.event"
            ],
            "type": "object",
            "default": "message.revoked",
            "description": "The event is triggered when a user, whether it be you or any other participant, revokes a previously sent message."
          },
          "payload": {
            "$ref": "#/components/schemas/WAMessageRevokedBody"
          },
          "me": {
            "$ref": "#/components/schemas/MeInfo"
          },
          "environment": {
            "$ref": "#/components/schemas/WAHAEnvironment"
          }
        },
        "required": [
          "id",
          "timestamp",
          "session",
          "engine",
          "event",
          "payload",
          "environment"
        ]
      },
      "GroupParticipant": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "123456789@c.us"
          },
          "role": {
            "enum": [
              "left",
              "participant",
              "admin",
              "superadmin"
            ],
            "type": "string",
            "example": "participant"
          }
        },
        "required": [
          "id",
          "role"
        ]
      },
      "GroupInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "123456789@g.us"
          },
          "subject": {
            "type": "string",
            "example": "Group Name"
          },
          "description": {
            "type": "string",
            "example": "Group Description"
          },
          "invite": {
            "type": "string",
            "description": "Invite URL",
            "example": "https://chat.whatsapp.com/1234567890abcdef"
          },
          "membersCanAddNewMember": {
            "type": "boolean",
            "description": "Members can add new members"
          },
          "membersCanSendMessages": {
            "type": "boolean",
            "description": "Members can send messages to the group"
          },
          "newMembersApprovalRequired": {
            "type": "boolean",
            "description": "Admin approval required for new members"
          },
          "participants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupParticipant"
            }
          }
        },
        "required": [
          "id",
          "subject",
          "description",
          "membersCanAddNewMember",
          "membersCanSendMessages",
          "newMembersApprovalRequired",
          "participants"
        ]
      },
      "GroupV2JoinEvent": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "number",
            "description": "Unix timestamp",
            "example": 1666943582
          },
          "group": {
            "$ref": "#/components/schemas/GroupInfo"
          },
          "_data": {
            "type": "object"
          }
        },
        "required": [
          "timestamp",
          "group",
          "_data"
        ]
      },
      "WebhookGroupV2Join": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "evt_01aaaaaaaaaaaaaaaaaaaaaaaa",
            "description": "Unique identifier for the event - lower case ULID format. https://github.com/ulid/spec"
          },
          "timestamp": {
            "type": "number",
            "example": 1634567890123,
            "description": "Unix timestamp (ms) for when the event was created."
          },
          "session": {
            "type": "string",
            "example": "default"
          },
          "metadata": {
            "example": {
              "user.id": "123",
              "user.email": "email@example.com"
            },
            "description": "Metadata for the session.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Map"
              }
            ]
          },
          "engine": {
            "enum": [
              "WEBJS",
              "NOWEB",
              "GOWS"
            ],
            "type": "string",
            "example": "WEBJS"
          },
          "event": {
            "enum": [
              "session.status",
              "message",
              "message.reaction",
              "message.any",
              "message.ack",
              "message.waiting",
              "message.revoked",
              "state.change",
              "group.join",
              "group.leave",
              "group.v2.join",
              "group.v2.leave",
              "group.v2.update",
              "group.v2.participants",
              "presence.update",
              "poll.vote",
              "poll.vote.failed",
              "chat.archive",
              "call.received",
              "call.accepted",
              "call.rejected",
              "label.upsert",
              "label.deleted",
              "label.chat.added",
              "label.chat.deleted",
              "engine.event"
            ],
            "type": "object",
            "default": "group.v2.join",
            "description": "When you joined or were added to a group"
          },
          "payload": {
            "$ref": "#/components/schemas/GroupV2JoinEvent"
          },
          "me": {
            "$ref": "#/components/schemas/MeInfo"
          },
          "environment": {
            "$ref": "#/components/schemas/WAHAEnvironment"
          }
        },
        "required": [
          "id",
          "timestamp",
          "session",
          "engine",
          "event",
          "payload",
          "environment"
        ]
      },
      "GroupId": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "123456789@g.us"
          }
        },
        "required": [
          "id"
        ]
      },
      "GroupV2LeaveEvent": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "number",
            "description": "Unix timestamp",
            "example": 1666943582
          },
          "group": {
            "$ref": "#/components/schemas/GroupId"
          },
          "_data": {
            "type": "object"
          }
        },
        "required": [
          "timestamp",
          "group",
          "_data"
        ]
      },
      "WebhookGroupV2Leave": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "evt_01aaaaaaaaaaaaaaaaaaaaaaaa",
            "description": "Unique identifier for the event - lower case ULID format. https://github.com/ulid/spec"
          },
          "timestamp": {
            "type": "number",
            "example": 1634567890123,
            "description": "Unix timestamp (ms) for when the event was created."
          },
          "session": {
            "type": "string",
            "example": "default"
          },
          "metadata": {
            "example": {
              "user.id": "123",
              "user.email": "email@example.com"
            },
            "description": "Metadata for the session.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Map"
              }
            ]
          },
          "engine": {
            "enum": [
              "WEBJS",
              "NOWEB",
              "GOWS"
            ],
            "type": "string",
            "example": "WEBJS"
          },
          "event": {
            "enum": [
              "session.status",
              "message",
              "message.reaction",
              "message.any",
              "message.ack",
              "message.waiting",
              "message.revoked",
              "state.change",
              "group.join",
              "group.leave",
              "group.v2.join",
              "group.v2.leave",
              "group.v2.update",
              "group.v2.participants",
              "presence.update",
              "poll.vote",
              "poll.vote.failed",
              "chat.archive",
              "call.received",
              "call.accepted",
              "call.rejected",
              "label.upsert",
              "label.deleted",
              "label.chat.added",
              "label.chat.deleted",
              "engine.event"
            ],
            "type": "object",
            "default": "group.v2.leave",
            "description": "When you left or were removed from a group"
          },
          "payload": {
            "$ref": "#/components/schemas/GroupV2LeaveEvent"
          },
          "me": {
            "$ref": "#/components/schemas/MeInfo"
          },
          "environment": {
            "$ref": "#/components/schemas/WAHAEnvironment"
          }
        },
        "required": [
          "id",
          "timestamp",
          "session",
          "engine",
          "event",
          "payload",
          "environment"
        ]
      },
      "GroupV2UpdateEvent": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "number",
            "description": "Unix timestamp",
            "example": 1666943582
          },
          "group": {
            "type": "object"
          },
          "_data": {
            "type": "object"
          }
        },
        "required": [
          "timestamp",
          "group",
          "_data"
        ]
      },
      "WebhookGroupV2Update": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "evt_01aaaaaaaaaaaaaaaaaaaaaaaa",
            "description": "Unique identifier for the event - lower case ULID format. https://github.com/ulid/spec"
          },
          "timestamp": {
            "type": "number",
            "example": 1634567890123,
            "description": "Unix timestamp (ms) for when the event was created."
          },
          "session": {
            "type": "string",
            "example": "default"
          },
          "metadata": {
            "example": {
              "user.id": "123",
              "user.email": "email@example.com"
            },
            "description": "Metadata for the session.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Map"
              }
            ]
          },
          "engine": {
            "enum": [
              "WEBJS",
              "NOWEB",
              "GOWS"
            ],
            "type": "string",
            "example": "WEBJS"
          },
          "event": {
            "enum": [
              "session.status",
              "message",
              "message.reaction",
              "message.any",
              "message.ack",
              "message.waiting",
              "message.revoked",
              "state.change",
              "group.join",
              "group.leave",
              "group.v2.join",
              "group.v2.leave",
              "group.v2.update",
              "group.v2.participants",
              "presence.update",
              "poll.vote",
              "poll.vote.failed",
              "chat.archive",
              "call.received",
              "call.accepted",
              "call.rejected",
              "label.upsert",
              "label.deleted",
              "label.chat.added",
              "label.chat.deleted",
              "engine.event"
            ],
            "type": "object",
            "default": "group.v2.update",
            "description": "When group info is updated"
          },
          "payload": {
            "$ref": "#/components/schemas/GroupV2UpdateEvent"
          },
          "me": {
            "$ref": "#/components/schemas/MeInfo"
          },
          "environment": {
            "$ref": "#/components/schemas/WAHAEnvironment"
          }
        },
        "required": [
          "id",
          "timestamp",
          "session",
          "engine",
          "event",
          "payload",
          "environment"
        ]
      },
      "GroupV2ParticipantsEvent": {
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "join",
              "leave",
              "promote",
              "demote"
            ],
            "type": "string",
            "description": "Type of the event"
          },
          "timestamp": {
            "type": "number",
            "description": "Unix timestamp",
            "example": 1666943582
          },
          "group": {
            "$ref": "#/components/schemas/GroupId"
          },
          "participants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupParticipant"
            }
          },
          "_data": {
            "type": "object"
          }
        },
        "required": [
          "type",
          "timestamp",
          "group",
          "participants",
          "_data"
        ]
      },
      "WebhookGroupV2Participants": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "evt_01aaaaaaaaaaaaaaaaaaaaaaaa",
            "description": "Unique identifier for the event - lower case ULID format. https://github.com/ulid/spec"
          },
          "timestamp": {
            "type": "number",
            "example": 1634567890123,
            "description": "Unix timestamp (ms) for when the event was created."
          },
          "session": {
            "type": "string",
            "example": "default"
          },
          "metadata": {
            "example": {
              "user.id": "123",
              "user.email": "email@example.com"
            },
            "description": "Metadata for the session.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Map"
              }
            ]
          },
          "engine": {
            "enum": [
              "WEBJS",
              "NOWEB",
              "GOWS"
            ],
            "type": "string",
            "example": "WEBJS"
          },
          "event": {
            "enum": [
              "session.status",
              "message",
              "message.reaction",
              "message.any",
              "message.ack",
              "message.waiting",
              "message.revoked",
              "state.change",
              "group.join",
              "group.leave",
              "group.v2.join",
              "group.v2.leave",
              "group.v2.update",
              "group.v2.participants",
              "presence.update",
              "poll.vote",
              "poll.vote.failed",
              "chat.archive",
              "call.received",
              "call.accepted",
              "call.rejected",
              "label.upsert",
              "label.deleted",
              "label.chat.added",
              "label.chat.deleted",
              "engine.event"
            ],
            "type": "object",
            "default": "group.v2.participants",
            "description": "When participants changed - join, leave, promote to admin"
          },
          "payload": {
            "$ref": "#/components/schemas/GroupV2ParticipantsEvent"
          },
          "me": {
            "$ref": "#/components/schemas/MeInfo"
          },
          "environment": {
            "$ref": "#/components/schemas/WAHAEnvironment"
          }
        },
        "required": [
          "id",
          "timestamp",
          "session",
          "engine",
          "event",
          "payload",
          "environment"
        ]
      },
      "WAHAWebhookPresenceUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "evt_01aaaaaaaaaaaaaaaaaaaaaaaa",
            "description": "Unique identifier for the event - lower case ULID format. https://github.com/ulid/spec"
          },
          "timestamp": {
            "type": "number",
            "example": 1634567890123,
            "description": "Unix timestamp (ms) for when the event was created."
          },
          "session": {
            "type": "string",
            "example": "default"
          },
          "metadata": {
            "example": {
              "user.id": "123",
              "user.email": "email@example.com"
            },
            "description": "Metadata for the session.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Map"
              }
            ]
          },
          "engine": {
            "enum": [
              "WEBJS",
              "NOWEB",
              "GOWS"
            ],
            "type": "string",
            "example": "WEBJS"
          },
          "event": {
            "enum": [
              "session.status",
              "message",
              "message.reaction",
              "message.any",
              "message.ack",
              "message.waiting",
              "message.revoked",
              "state.change",
              "group.join",
              "group.leave",
              "group.v2.join",
              "group.v2.leave",
              "group.v2.update",
              "group.v2.participants",
              "presence.update",
              "poll.vote",
              "poll.vote.failed",
              "chat.archive",
              "call.received",
              "call.accepted",
              "call.rejected",
              "label.upsert",
              "label.deleted",
              "label.chat.added",
              "label.chat.deleted",
              "engine.event"
            ],
            "type": "object",
            "default": "presence.update",
            "description": "The most recent presence information for a chat."
          },
          "payload": {
            "$ref": "#/components/schemas/WAHAChatPresences"
          },
          "me": {
            "$ref": "#/components/schemas/MeInfo"
          },
          "environment": {
            "$ref": "#/components/schemas/WAHAEnvironment"
          }
        },
        "required": [
          "id",
          "timestamp",
          "session",
          "engine",
          "event",
          "payload",
          "environment"
        ]
      },
      "PollVote": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Message ID",
            "example": "false_11111111111@c.us_AAAAAAAAAAAAAAAAAAAA"
          },
          "selectedOptions": {
            "description": "Option that user has selected",
            "example": [
              "Awesome!"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "timestamp": {
            "type": "number",
            "description": "Timestamp, ms",
            "example": 1692861369
          },
          "to": {
            "type": "string"
          },
          "from": {
            "type": "string"
          },
          "fromMe": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "selectedOptions",
          "timestamp",
          "to",
          "from",
          "fromMe"
        ]
      },
      "MessageDestination": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Message ID",
            "example": "false_11111111111@c.us_AAAAAAAAAAAAAAAAAAAA"
          },
          "to": {
            "type": "string"
          },
          "from": {
            "type": "string"
          },
          "fromMe": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "to",
          "from",
          "fromMe"
        ]
      },
      "PollVotePayload": {
        "type": "object",
        "properties": {
          "vote": {
            "$ref": "#/components/schemas/PollVote"
          },
          "poll": {
            "$ref": "#/components/schemas/MessageDestination"
          }
        },
        "required": [
          "vote",
          "poll"
        ]
      },
      "WAHAWebhookPollVote": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "evt_01aaaaaaaaaaaaaaaaaaaaaaaa",
            "description": "Unique identifier for the event - lower case ULID format. https://github.com/ulid/spec"
          },
          "timestamp": {
            "type": "number",
            "example": 1634567890123,
            "description": "Unix timestamp (ms) for when the event was created."
          },
          "session": {
            "type": "string",
            "example": "default"
          },
          "metadata": {
            "example": {
              "user.id": "123",
              "user.email": "email@example.com"
            },
            "description": "Metadata for the session.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Map"
              }
            ]
          },
          "engine": {
            "enum": [
              "WEBJS",
              "NOWEB",
              "GOWS"
            ],
            "type": "string",
            "example": "WEBJS"
          },
          "event": {
            "enum": [
              "session.status",
              "message",
              "message.reaction",
              "message.any",
              "message.ack",
              "message.waiting",
              "message.revoked",
              "state.change",
              "group.join",
              "group.leave",
              "group.v2.join",
              "group.v2.leave",
              "group.v2.update",
              "group.v2.participants",
              "presence.update",
              "poll.vote",
              "poll.vote.failed",
              "chat.archive",
              "call.received",
              "call.accepted",
              "call.rejected",
              "label.upsert",
              "label.deleted",
              "label.chat.added",
              "label.chat.deleted",
              "engine.event"
            ],
            "type": "object",
            "default": "poll.vote",
            "description": "With this event, you receive new votes for the poll sent."
          },
          "payload": {
            "$ref": "#/components/schemas/PollVotePayload"
          },
          "me": {
            "$ref": "#/components/schemas/MeInfo"
          },
          "environment": {
            "$ref": "#/components/schemas/WAHAEnvironment"
          }
        },
        "required": [
          "id",
          "timestamp",
          "session",
          "engine",
          "event",
          "payload",
          "environment"
        ]
      },
      "WAHAWebhookPollVoteFailed": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "evt_01aaaaaaaaaaaaaaaaaaaaaaaa",
            "description": "Unique identifier for the event - lower case ULID format. https://github.com/ulid/spec"
          },
          "timestamp": {
            "type": "number",
            "example": 1634567890123,
            "description": "Unix timestamp (ms) for when the event was created."
          },
          "session": {
            "type": "string",
            "example": "default"
          },
          "metadata": {
            "example": {
              "user.id": "123",
              "user.email": "email@example.com"
            },
            "description": "Metadata for the session.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Map"
              }
            ]
          },
          "engine": {
            "enum": [
              "WEBJS",
              "NOWEB",
              "GOWS"
            ],
            "type": "string",
            "example": "WEBJS"
          },
          "event": {
            "enum": [
              "session.status",
              "message",
              "message.reaction",
              "message.any",
              "message.ack",
              "message.waiting",
              "message.revoked",
              "state.change",
              "group.join",
              "group.leave",
              "group.v2.join",
              "group.v2.leave",
              "group.v2.update",
              "group.v2.participants",
              "presence.update",
              "poll.vote",
              "poll.vote.failed",
              "chat.archive",
              "call.received",
              "call.accepted",
              "call.rejected",
              "label.upsert",
              "label.deleted",
              "label.chat.added",
              "label.chat.deleted",
              "engine.event"
            ],
            "type": "object",
            "default": "poll.vote.failed",
            "description": "There may be cases when it fails to decrypt a vote from the user. Read more about how to handle such events in the documentations."
          },
          "payload": {
            "$ref": "#/components/schemas/PollVotePayload"
          },
          "me": {
            "$ref": "#/components/schemas/MeInfo"
          },
          "environment": {
            "$ref": "#/components/schemas/WAHAEnvironment"
          }
        },
        "required": [
          "id",
          "timestamp",
          "session",
          "engine",
          "event",
          "payload",
          "environment"
        ]
      },
      "ChatArchiveEvent": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "11111111111@c.us"
          },
          "archived": {
            "type": "boolean"
          },
          "timestamp": {
            "type": "number"
          }
        },
        "required": [
          "id",
          "archived",
          "timestamp"
        ]
      },
      "WAHAWebhookChatArchive": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "evt_01aaaaaaaaaaaaaaaaaaaaaaaa",
            "description": "Unique identifier for the event - lower case ULID format. https://github.com/ulid/spec"
          },
          "timestamp": {
            "type": "number",
            "example": 1634567890123,
            "description": "Unix timestamp (ms) for when the event was created."
          },
          "session": {
            "type": "string",
            "example": "default"
          },
          "metadata": {
            "example": {
              "user.id": "123",
              "user.email": "email@example.com"
            },
            "description": "Metadata for the session.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Map"
              }
            ]
          },
          "engine": {
            "enum": [
              "WEBJS",
              "NOWEB",
              "GOWS"
            ],
            "type": "string",
            "example": "WEBJS"
          },
          "event": {
            "enum": [
              "session.status",
              "message",
              "message.reaction",
              "message.any",
              "message.ack",
              "message.waiting",
              "message.revoked",
              "state.change",
              "group.join",
              "group.leave",
              "group.v2.join",
              "group.v2.leave",
              "group.v2.update",
              "group.v2.participants",
              "presence.update",
              "poll.vote",
              "poll.vote.failed",
              "chat.archive",
              "call.received",
              "call.accepted",
              "call.rejected",
              "label.upsert",
              "label.deleted",
              "label.chat.added",
              "label.chat.deleted",
              "engine.event"
            ],
            "type": "object",
            "default": "chat.archive",
            "description": "The event is triggered when the chat is archived or unarchived"
          },
          "payload": {
            "$ref": "#/components/schemas/ChatArchiveEvent"
          },
          "me": {
            "$ref": "#/components/schemas/MeInfo"
          },
          "environment": {
            "$ref": "#/components/schemas/WAHAEnvironment"
          }
        },
        "required": [
          "id",
          "timestamp",
          "session",
          "engine",
          "event",
          "payload",
          "environment"
        ]
      },
      "CallData": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Call ID",
            "example": "ABCDEFGABCDEFGABCDEFGABCDEFG"
          },
          "from": {
            "type": "string",
            "example": "11111111111@c.us"
          },
          "timestamp": {
            "type": "number"
          },
          "isVideo": {
            "type": "boolean"
          },
          "isGroup": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "timestamp",
          "isVideo",
          "isGroup"
        ]
      },
      "WAHAWebhookCallReceived": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "evt_01aaaaaaaaaaaaaaaaaaaaaaaa",
            "description": "Unique identifier for the event - lower case ULID format. https://github.com/ulid/spec"
          },
          "timestamp": {
            "type": "number",
            "example": 1634567890123,
            "description": "Unix timestamp (ms) for when the event was created."
          },
          "session": {
            "type": "string",
            "example": "default"
          },
          "metadata": {
            "example": {
              "user.id": "123",
              "user.email": "email@example.com"
            },
            "description": "Metadata for the session.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Map"
              }
            ]
          },
          "engine": {
            "enum": [
              "WEBJS",
              "NOWEB",
              "GOWS"
            ],
            "type": "string",
            "example": "WEBJS"
          },
          "event": {
            "enum": [
              "session.status",
              "message",
              "message.reaction",
              "message.any",
              "message.ack",
              "message.waiting",
              "message.revoked",
              "state.change",
              "group.join",
              "group.leave",
              "group.v2.join",
              "group.v2.leave",
              "group.v2.update",
              "group.v2.participants",
              "presence.update",
              "poll.vote",
              "poll.vote.failed",
              "chat.archive",
              "call.received",
              "call.accepted",
              "call.rejected",
              "label.upsert",
              "label.deleted",
              "label.chat.added",
              "label.chat.deleted",
              "engine.event"
            ],
            "type": "object",
            "default": "call.received",
            "description": "The event is triggered when the call is received by the user."
          },
          "payload": {
            "$ref": "#/components/schemas/CallData"
          },
          "me": {
            "$ref": "#/components/schemas/MeInfo"
          },
          "environment": {
            "$ref": "#/components/schemas/WAHAEnvironment"
          }
        },
        "required": [
          "id",
          "timestamp",
          "session",
          "engine",
          "event",
          "payload",
          "environment"
        ]
      },
      "WAHAWebhookCallAccepted": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "evt_01aaaaaaaaaaaaaaaaaaaaaaaa",
            "description": "Unique identifier for the event - lower case ULID format. https://github.com/ulid/spec"
          },
          "timestamp": {
            "type": "number",
            "example": 1634567890123,
            "description": "Unix timestamp (ms) for when the event was created."
          },
          "session": {
            "type": "string",
            "example": "default"
          },
          "metadata": {
            "example": {
              "user.id": "123",
              "user.email": "email@example.com"
            },
            "description": "Metadata for the session.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Map"
              }
            ]
          },
          "engine": {
            "enum": [
              "WEBJS",
              "NOWEB",
              "GOWS"
            ],
            "type": "string",
            "example": "WEBJS"
          },
          "event": {
            "enum": [
              "session.status",
              "message",
              "message.reaction",
              "message.any",
              "message.ack",
              "message.waiting",
              "message.revoked",
              "state.change",
              "group.join",
              "group.leave",
              "group.v2.join",
              "group.v2.leave",
              "group.v2.update",
              "group.v2.participants",
              "presence.update",
              "poll.vote",
              "poll.vote.failed",
              "chat.archive",
              "call.received",
              "call.accepted",
              "call.rejected",
              "label.upsert",
              "label.deleted",
              "label.chat.added",
              "label.chat.deleted",
              "engine.event"
            ],
            "type": "object",
            "default": "call.accepted",
            "description": "The event is triggered when the call is accepted by the user."
          },
          "payload": {
            "$ref": "#/components/schemas/CallData"
          },
          "me": {
            "$ref": "#/components/schemas/MeInfo"
          },
          "environment": {
            "$ref": "#/components/schemas/WAHAEnvironment"
          }
        },
        "required": [
          "id",
          "timestamp",
          "session",
          "engine",
          "event",
          "payload",
          "environment"
        ]
      },
      "WAHAWebhookCallRejected": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "evt_01aaaaaaaaaaaaaaaaaaaaaaaa",
            "description": "Unique identifier for the event - lower case ULID format. https://github.com/ulid/spec"
          },
          "timestamp": {
            "type": "number",
            "example": 1634567890123,
            "description": "Unix timestamp (ms) for when the event was created."
          },
          "session": {
            "type": "string",
            "example": "default"
          },
          "metadata": {
            "example": {
              "user.id": "123",
              "user.email": "email@example.com"
            },
            "description": "Metadata for the session.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Map"
              }
            ]
          },
          "engine": {
            "enum": [
              "WEBJS",
              "NOWEB",
              "GOWS"
            ],
            "type": "string",
            "example": "WEBJS"
          },
          "event": {
            "enum": [
              "session.status",
              "message",
              "message.reaction",
              "message.any",
              "message.ack",
              "message.waiting",
              "message.revoked",
              "state.change",
              "group.join",
              "group.leave",
              "group.v2.join",
              "group.v2.leave",
              "group.v2.update",
              "group.v2.participants",
              "presence.update",
              "poll.vote",
              "poll.vote.failed",
              "chat.archive",
              "call.received",
              "call.accepted",
              "call.rejected",
              "label.upsert",
              "label.deleted",
              "label.chat.added",
              "label.chat.deleted",
              "engine.event"
            ],
            "type": "object",
            "default": "call.rejected",
            "description": "The event is triggered when the call is rejected by the user."
          },
          "payload": {
            "$ref": "#/components/schemas/CallData"
          },
          "me": {
            "$ref": "#/components/schemas/MeInfo"
          },
          "environment": {
            "$ref": "#/components/schemas/WAHAEnvironment"
          }
        },
        "required": [
          "id",
          "timestamp",
          "session",
          "engine",
          "event",
          "payload",
          "environment"
        ]
      },
      "WAHAWebhookLabelUpsert": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "evt_01aaaaaaaaaaaaaaaaaaaaaaaa",
            "description": "Unique identifier for the event - lower case ULID format. https://github.com/ulid/spec"
          },
          "timestamp": {
            "type": "number",
            "example": 1634567890123,
            "description": "Unix timestamp (ms) for when the event was created."
          },
          "session": {
            "type": "string",
            "example": "default"
          },
          "metadata": {
            "example": {
              "user.id": "123",
              "user.email": "email@example.com"
            },
            "description": "Metadata for the session.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Map"
              }
            ]
          },
          "engine": {
            "enum": [
              "WEBJS",
              "NOWEB",
              "GOWS"
            ],
            "type": "string",
            "example": "WEBJS"
          },
          "event": {
            "enum": [
              "session.status",
              "message",
              "message.reaction",
              "message.any",
              "message.ack",
              "message.waiting",
              "message.revoked",
              "state.change",
              "group.join",
              "group.leave",
              "group.v2.join",
              "group.v2.leave",
              "group.v2.update",
              "group.v2.participants",
              "presence.update",
              "poll.vote",
              "poll.vote.failed",
              "chat.archive",
              "call.received",
              "call.accepted",
              "call.rejected",
              "label.upsert",
              "label.deleted",
              "label.chat.added",
              "label.chat.deleted",
              "engine.event"
            ],
            "type": "object",
            "default": "label.upsert",
            "description": "The event is triggered when a label is created or updated"
          },
          "payload": {
            "$ref": "#/components/schemas/Label"
          },
          "me": {
            "$ref": "#/components/schemas/MeInfo"
          },
          "environment": {
            "$ref": "#/components/schemas/WAHAEnvironment"
          }
        },
        "required": [
          "id",
          "timestamp",
          "session",
          "engine",
          "event",
          "payload",
          "environment"
        ]
      },
      "WAHAWebhookLabelDeleted": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "evt_01aaaaaaaaaaaaaaaaaaaaaaaa",
            "description": "Unique identifier for the event - lower case ULID format. https://github.com/ulid/spec"
          },
          "timestamp": {
            "type": "number",
            "example": 1634567890123,
            "description": "Unix timestamp (ms) for when the event was created."
          },
          "session": {
            "type": "string",
            "example": "default"
          },
          "metadata": {
            "example": {
              "user.id": "123",
              "user.email": "email@example.com"
            },
            "description": "Metadata for the session.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Map"
              }
            ]
          },
          "engine": {
            "enum": [
              "WEBJS",
              "NOWEB",
              "GOWS"
            ],
            "type": "string",
            "example": "WEBJS"
          },
          "event": {
            "enum": [
              "session.status",
              "message",
              "message.reaction",
              "message.any",
              "message.ack",
              "message.waiting",
              "message.revoked",
              "state.change",
              "group.join",
              "group.leave",
              "group.v2.join",
              "group.v2.leave",
              "group.v2.update",
              "group.v2.participants",
              "presence.update",
              "poll.vote",
              "poll.vote.failed",
              "chat.archive",
              "call.received",
              "call.accepted",
              "call.rejected",
              "label.upsert",
              "label.deleted",
              "label.chat.added",
              "label.chat.deleted",
              "engine.event"
            ],
            "type": "object",
            "default": "label.deleted",
            "description": "The event is triggered when a label is deleted"
          },
          "payload": {
            "$ref": "#/components/schemas/Label"
          },
          "me": {
            "$ref": "#/components/schemas/MeInfo"
          },
          "environment": {
            "$ref": "#/components/schemas/WAHAEnvironment"
          }
        },
        "required": [
          "id",
          "timestamp",
          "session",
          "engine",
          "event",
          "payload",
          "environment"
        ]
      },
      "LabelChatAssociation": {
        "type": "object",
        "properties": {
          "labelId": {
            "type": "string",
            "example": "1",
            "description": "Label ID"
          },
          "chatId": {
            "type": "string",
            "description": "Chat ID",
            "example": "11111111111@c.us"
          },
          "label": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Label"
              }
            ]
          }
        },
        "required": [
          "labelId",
          "chatId",
          "label"
        ]
      },
      "WAHAWebhookLabelChatAdded": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "evt_01aaaaaaaaaaaaaaaaaaaaaaaa",
            "description": "Unique identifier for the event - lower case ULID format. https://github.com/ulid/spec"
          },
          "timestamp": {
            "type": "number",
            "example": 1634567890123,
            "description": "Unix timestamp (ms) for when the event was created."
          },
          "session": {
            "type": "string",
            "example": "default"
          },
          "metadata": {
            "example": {
              "user.id": "123",
              "user.email": "email@example.com"
            },
            "description": "Metadata for the session.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Map"
              }
            ]
          },
          "engine": {
            "enum": [
              "WEBJS",
              "NOWEB",
              "GOWS"
            ],
            "type": "string",
            "example": "WEBJS"
          },
          "event": {
            "enum": [
              "session.status",
              "message",
              "message.reaction",
              "message.any",
              "message.ack",
              "message.waiting",
              "message.revoked",
              "state.change",
              "group.join",
              "group.leave",
              "group.v2.join",
              "group.v2.leave",
              "group.v2.update",
              "group.v2.participants",
              "presence.update",
              "poll.vote",
              "poll.vote.failed",
              "chat.archive",
              "call.received",
              "call.accepted",
              "call.rejected",
              "label.upsert",
              "label.deleted",
              "label.chat.added",
              "label.chat.deleted",
              "engine.event"
            ],
            "type": "object",
            "default": "label.chat.added",
            "description": "The event is triggered when a label is added to a chat"
          },
          "payload": {
            "$ref": "#/components/schemas/LabelChatAssociation"
          },
          "me": {
            "$ref": "#/components/schemas/MeInfo"
          },
          "environment": {
            "$ref": "#/components/schemas/WAHAEnvironment"
          }
        },
        "required": [
          "id",
          "timestamp",
          "session",
          "engine",
          "event",
          "payload",
          "environment"
        ]
      },
      "WAHAWebhookLabelChatDeleted": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "evt_01aaaaaaaaaaaaaaaaaaaaaaaa",
            "description": "Unique identifier for the event - lower case ULID format. https://github.com/ulid/spec"
          },
          "timestamp": {
            "type": "number",
            "example": 1634567890123,
            "description": "Unix timestamp (ms) for when the event was created."
          },
          "session": {
            "type": "string",
            "example": "default"
          },
          "metadata": {
            "example": {
              "user.id": "123",
              "user.email": "email@example.com"
            },
            "description": "Metadata for the session.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Map"
              }
            ]
          },
          "engine": {
            "enum": [
              "WEBJS",
              "NOWEB",
              "GOWS"
            ],
            "type": "string",
            "example": "WEBJS"
          },
          "event": {
            "enum": [
              "session.status",
              "message",
              "message.reaction",
              "message.any",
              "message.ack",
              "message.waiting",
              "message.revoked",
              "state.change",
              "group.join",
              "group.leave",
              "group.v2.join",
              "group.v2.leave",
              "group.v2.update",
              "group.v2.participants",
              "presence.update",
              "poll.vote",
              "poll.vote.failed",
              "chat.archive",
              "call.received",
              "call.accepted",
              "call.rejected",
              "label.upsert",
              "label.deleted",
              "label.chat.added",
              "label.chat.deleted",
              "engine.event"
            ],
            "type": "object",
            "default": "label.chat.deleted",
            "description": "The event is triggered when a label is deleted from a chat"
          },
          "payload": {
            "$ref": "#/components/schemas/LabelChatAssociation"
          },
          "me": {
            "$ref": "#/components/schemas/MeInfo"
          },
          "environment": {
            "$ref": "#/components/schemas/WAHAEnvironment"
          }
        },
        "required": [
          "id",
          "timestamp",
          "session",
          "engine",
          "event",
          "payload",
          "environment"
        ]
      },
      "EnginePayload": {
        "type": "object",
        "properties": {
          "event": {
            "type": "string"
          },
          "data": {
            "type": "object"
          }
        },
        "required": [
          "event",
          "data"
        ]
      },
      "WAHAWebhookEngineEvent": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "evt_01aaaaaaaaaaaaaaaaaaaaaaaa",
            "description": "Unique identifier for the event - lower case ULID format. https://github.com/ulid/spec"
          },
          "timestamp": {
            "type": "number",
            "example": 1634567890123,
            "description": "Unix timestamp (ms) for when the event was created."
          },
          "session": {
            "type": "string",
            "example": "default"
          },
          "metadata": {
            "example": {
              "user.id": "123",
              "user.email": "email@example.com"
            },
            "description": "Metadata for the session.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Map"
              }
            ]
          },
          "engine": {
            "enum": [
              "WEBJS",
              "NOWEB",
              "GOWS"
            ],
            "type": "string",
            "example": "WEBJS"
          },
          "event": {
            "enum": [
              "session.status",
              "message",
              "message.reaction",
              "message.any",
              "message.ack",
              "message.waiting",
              "message.revoked",
              "state.change",
              "group.join",
              "group.leave",
              "group.v2.join",
              "group.v2.leave",
              "group.v2.update",
              "group.v2.participants",
              "presence.update",
              "poll.vote",
              "poll.vote.failed",
              "chat.archive",
              "call.received",
              "call.accepted",
              "call.rejected",
              "label.upsert",
              "label.deleted",
              "label.chat.added",
              "label.chat.deleted",
              "engine.event"
            ],
            "type": "object",
            "default": "engine.event",
            "description": "Internal engine event."
          },
          "payload": {
            "$ref": "#/components/schemas/EnginePayload"
          },
          "me": {
            "$ref": "#/components/schemas/MeInfo"
          },
          "environment": {
            "$ref": "#/components/schemas/WAHAEnvironment"
          }
        },
        "required": [
          "id",
          "timestamp",
          "session",
          "engine",
          "event",
          "payload",
          "environment"
        ]
      },
      "WAHAWebhookGroupJoin": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "evt_01aaaaaaaaaaaaaaaaaaaaaaaa",
            "description": "Unique identifier for the event - lower case ULID format. https://github.com/ulid/spec"
          },
          "timestamp": {
            "type": "number",
            "example": 1634567890123,
            "description": "Unix timestamp (ms) for when the event was created."
          },
          "session": {
            "type": "string",
            "example": "default"
          },
          "metadata": {
            "example": {
              "user.id": "123",
              "user.email": "email@example.com"
            },
            "description": "Metadata for the session.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Map"
              }
            ]
          },
          "engine": {
            "enum": [
              "WEBJS",
              "NOWEB",
              "GOWS"
            ],
            "type": "string",
            "example": "WEBJS"
          },
          "event": {
            "enum": [
              "session.status",
              "message",
              "message.reaction",
              "message.any",
              "message.ack",
              "message.waiting",
              "message.revoked",
              "state.change",
              "group.join",
              "group.leave",
              "group.v2.join",
              "group.v2.leave",
              "group.v2.update",
              "group.v2.participants",
              "presence.update",
              "poll.vote",
              "poll.vote.failed",
              "chat.archive",
              "call.received",
              "call.accepted",
              "call.rejected",
              "label.upsert",
              "label.deleted",
              "label.chat.added",
              "label.chat.deleted",
              "engine.event"
            ],
            "type": "object",
            "default": "group.join",
            "description": "Some one join a group.",
            "deprecated": true
          },
          "payload": {
            "type": "object"
          },
          "me": {
            "$ref": "#/components/schemas/MeInfo"
          },
          "environment": {
            "$ref": "#/components/schemas/WAHAEnvironment"
          }
        },
        "required": [
          "id",
          "timestamp",
          "session",
          "engine",
          "event",
          "payload",
          "environment"
        ]
      },
      "WAHAWebhookGroupLeave": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "evt_01aaaaaaaaaaaaaaaaaaaaaaaa",
            "description": "Unique identifier for the event - lower case ULID format. https://github.com/ulid/spec"
          },
          "timestamp": {
            "type": "number",
            "example": 1634567890123,
            "description": "Unix timestamp (ms) for when the event was created."
          },
          "session": {
            "type": "string",
            "example": "default"
          },
          "metadata": {
            "example": {
              "user.id": "123",
              "user.email": "email@example.com"
            },
            "description": "Metadata for the session.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Map"
              }
            ]
          },
          "engine": {
            "enum": [
              "WEBJS",
              "NOWEB",
              "GOWS"
            ],
            "type": "string",
            "example": "WEBJS"
          },
          "event": {
            "enum": [
              "session.status",
              "message",
              "message.reaction",
              "message.any",
              "message.ack",
              "message.waiting",
              "message.revoked",
              "state.change",
              "group.join",
              "group.leave",
              "group.v2.join",
              "group.v2.leave",
              "group.v2.update",
              "group.v2.participants",
              "presence.update",
              "poll.vote",
              "poll.vote.failed",
              "chat.archive",
              "call.received",
              "call.accepted",
              "call.rejected",
              "label.upsert",
              "label.deleted",
              "label.chat.added",
              "label.chat.deleted",
              "engine.event"
            ],
            "type": "object",
            "default": "group.leave",
            "description": "Some one left a group.",
            "deprecated": true
          },
          "payload": {
            "type": "object"
          },
          "me": {
            "$ref": "#/components/schemas/MeInfo"
          },
          "environment": {
            "$ref": "#/components/schemas/WAHAEnvironment"
          }
        },
        "required": [
          "id",
          "timestamp",
          "session",
          "engine",
          "event",
          "payload",
          "environment"
        ]
      },
      "WAHAWebhookStateChange": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "evt_01aaaaaaaaaaaaaaaaaaaaaaaa",
            "description": "Unique identifier for the event - lower case ULID format. https://github.com/ulid/spec"
          },
          "timestamp": {
            "type": "number",
            "example": 1634567890123,
            "description": "Unix timestamp (ms) for when the event was created."
          },
          "session": {
            "type": "string",
            "example": "default"
          },
          "metadata": {
            "example": {
              "user.id": "123",
              "user.email": "email@example.com"
            },
            "description": "Metadata for the session.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Map"
              }
            ]
          },
          "engine": {
            "enum": [
              "WEBJS",
              "NOWEB",
              "GOWS"
            ],
            "type": "string",
            "example": "WEBJS"
          },
          "event": {
            "enum": [
              "session.status",
              "message",
              "message.reaction",
              "message.any",
              "message.ack",
              "message.waiting",
              "message.revoked",
              "state.change",
              "group.join",
              "group.leave",
              "group.v2.join",
              "group.v2.leave",
              "group.v2.update",
              "group.v2.participants",
              "presence.update",
              "poll.vote",
              "poll.vote.failed",
              "chat.archive",
              "call.received",
              "call.accepted",
              "call.rejected",
              "label.upsert",
              "label.deleted",
              "label.chat.added",
              "label.chat.deleted",
              "engine.event"
            ],
            "type": "object",
            "default": "state.change",
            "description": "It‚Äôs an internal engine‚Äôs state, not session status.",
            "deprecated": true
          },
          "payload": {
            "type": "object"
          },
          "me": {
            "$ref": "#/components/schemas/MeInfo"
          },
          "environment": {
            "$ref": "#/components/schemas/WAHAEnvironment"
          }
        },
        "required": [
          "id",
          "timestamp",
          "session",
          "engine",
          "event",
          "payload",
          "environment"
        ]
      }
    }
  },
  "externalDocs": {
    "description": "WAHA - WhatsApp HTTP API",
    "url": "https://waha.devlike.pro/"
  },
  "webhooks": {
    "session.status": {
      "post": {
        "summary": "The event is triggered when the session status changes.",
        "deprecated": false,
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WAHAWebhookSessionStatus"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "message": {
      "post": {
        "summary": "Incoming message.",
        "deprecated": false,
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WAHAWebhookMessage"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "message.reaction": {
      "post": {
        "summary": "The event is triggered when a user reacts or removes a reaction.",
        "deprecated": false,
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WAHAWebhookMessageReaction"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "message.any": {
      "post": {
        "summary": "Fired on all message creations, including your own.",
        "deprecated": false,
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WAHAWebhookMessageAny"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "message.ack": {
      "post": {
        "summary": "Receive events when server or recipient gets the message, read or played it.",
        "deprecated": false,
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WAHAWebhookMessageAck"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "message.revoked": {
      "post": {
        "summary": "The event is triggered when a user, whether it be you or any other participant, revokes a previously sent message.",
        "deprecated": false,
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WAHAWebhookMessageRevoked"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "group.v2.join": {
      "post": {
        "summary": "When you joined or were added to a group",
        "deprecated": false,
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookGroupV2Join"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "group.v2.leave": {
      "post": {
        "summary": "When you left or were removed from a group",
        "deprecated": false,
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookGroupV2Leave"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "group.v2.update": {
      "post": {
        "summary": "When group info is updated",
        "deprecated": false,
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookGroupV2Update"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "group.v2.participants": {
      "post": {
        "summary": "When participants changed - join, leave, promote to admin",
        "deprecated": false,
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookGroupV2Participants"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "presence.update": {
      "post": {
        "summary": "The most recent presence information for a chat.",
        "deprecated": false,
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WAHAWebhookPresenceUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "poll.vote": {
      "post": {
        "summary": "With this event, you receive new votes for the poll sent.",
        "deprecated": false,
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WAHAWebhookPollVote"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "poll.vote.failed": {
      "post": {
        "summary": "There may be cases when it fails to decrypt a vote from the user. Read more about how to handle such events in the documentations.",
        "deprecated": false,
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WAHAWebhookPollVoteFailed"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "chat.archive": {
      "post": {
        "summary": "The event is triggered when the chat is archived or unarchived",
        "deprecated": false,
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WAHAWebhookChatArchive"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "call.received": {
      "post": {
        "summary": "The event is triggered when the call is received by the user.",
        "deprecated": false,
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WAHAWebhookCallReceived"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "call.accepted": {
      "post": {
        "summary": "The event is triggered when the call is accepted by the user.",
        "deprecated": false,
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WAHAWebhookCallAccepted"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "call.rejected": {
      "post": {
        "summary": "The event is triggered when the call is rejected by the user.",
        "deprecated": false,
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WAHAWebhookCallRejected"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "label.upsert": {
      "post": {
        "summary": "The event is triggered when a label is created or updated",
        "deprecated": false,
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WAHAWebhookLabelUpsert"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "label.deleted": {
      "post": {
        "summary": "The event is triggered when a label is deleted",
        "deprecated": false,
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WAHAWebhookLabelDeleted"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "label.chat.added": {
      "post": {
        "summary": "The event is triggered when a label is added to a chat",
        "deprecated": false,
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WAHAWebhookLabelChatAdded"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "label.chat.deleted": {
      "post": {
        "summary": "The event is triggered when a label is deleted from a chat",
        "deprecated": false,
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WAHAWebhookLabelChatDeleted"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "engine.event": {
      "post": {
        "summary": "Internal engine event.",
        "deprecated": false,
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WAHAWebhookEngineEvent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "group.join": {
      "post": {
        "summary": "Some one join a group.",
        "deprecated": true,
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WAHAWebhookGroupJoin"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "group.leave": {
      "post": {
        "summary": "Some one left a group.",
        "deprecated": true,
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WAHAWebhookGroupLeave"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "state.change": {
      "post": {
        "summary": "It‚Äôs an internal engine‚Äôs state, not session status.",
        "deprecated": true,
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WAHAWebhookStateChange"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    }
  }
}
